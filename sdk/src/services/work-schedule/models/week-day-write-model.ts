// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { WeekDayWriteModelType, weekDayWriteModelType } from './week-day-write-model-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const weekDayWriteModel = z.lazy(() => {
  return z.object({
    _type: weekDayWriteModelType,
    working: z.boolean(),
  });
});

/**
 * Describes a week day as a working day or a non-working day (weekend).
 * @typedef  {WeekDayWriteModel} weekDayWriteModel - Describes a week day as a working day or a non-working day (weekend). - Describes a week day as a working day or a non-working day (weekend).
 * @property {WeekDayWriteModelType}
 * @property {boolean} - `true` for a working day. `false` for a weekend day.
 */
export type WeekDayWriteModel = z.infer<typeof weekDayWriteModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const weekDayWriteModelResponse = z.lazy(() => {
  return z
    .object({
      _type: weekDayWriteModelType,
      working: z.boolean(),
    })
    .transform((data) => ({
      _type: data['_type'],
      working: data['working'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const weekDayWriteModelRequest = z.lazy(() => {
  return z
    .object({
      _type: weekDayWriteModelType,
      working: z.boolean(),
    })
    .transform((data) => ({
      _type: data['_type'],
      working: data['working'],
    }));
});
