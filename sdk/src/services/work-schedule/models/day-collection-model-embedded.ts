// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { DayModel, dayModel, dayModelRequest, dayModelResponse } from './day-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dayCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(dayModel),
  });
});

/**
 * 
 * @typedef  {DayCollectionModelEmbedded} dayCollectionModelEmbedded   
 * @property {DayModel[]} - The array of days. Each day has a name and a working status
indicating if it is a working or a non-working day.
 */
export type DayCollectionModelEmbedded = z.infer<typeof dayCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dayCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(dayModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dayCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(dayModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
