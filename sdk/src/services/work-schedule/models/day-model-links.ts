// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { Link, link, linkRequest, linkResponse } from './link';
import { WeekDay, weekDay, weekDayRequest, weekDayResponse } from './week-day';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dayModelLinks = z.lazy(() => {
  return z.object({
    self: link,
    nonWorkingReasons: z.array(link).optional(),
    weekDay: weekDay.optional(),
  });
});

/**
 * 
 * @typedef  {DayModelLinks} dayModelLinks   
 * @property {Link} 
 * @property {Link[]} - A list of resources describing why this day is a non-working day.
Linked resources can be `NonWorkingDay` and `WeekDay` resources.
This property is absent for working days.
 * @property {WeekDay} - The week day for this day.
 */
export type DayModelLinks = z.infer<typeof dayModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dayModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: linkResponse,
      nonWorkingReasons: z.array(linkResponse).optional(),
      weekDay: weekDayResponse.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      nonWorkingReasons: data['nonWorkingReasons'],
      weekDay: data['weekDay'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dayModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: linkRequest,
      nonWorkingReasons: z.array(linkRequest).optional(),
      weekDay: weekDayRequest.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      nonWorkingReasons: data['nonWorkingReasons'],
      weekDay: data['weekDay'],
    }));
});
