// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { DayModelType, dayModelType } from './day-model-type';
import { DayModelLinks, dayModelLinks, dayModelLinksRequest, dayModelLinksResponse } from './day-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dayModel = z.lazy(() => {
  return z.object({
    _type: dayModelType,
    date: z.string(),
    name: z.string(),
    working: z.boolean(),
    _links: dayModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {DayModel} dayModel
 * @property {DayModelType}
 * @property {string} - Date of the day.
 * @property {string} - Descriptive name for the day.
 * @property {boolean} - `true` for a working day, `false` otherwise.
 * @property {DayModelLinks}
 */
export type DayModel = z.infer<typeof dayModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dayModelResponse = z.lazy(() => {
  return z
    .object({
      _type: dayModelType,
      date: z.string(),
      name: z.string(),
      working: z.boolean(),
      _links: dayModelLinksResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      date: data['date'],
      name: data['name'],
      working: data['working'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dayModelRequest = z.lazy(() => {
  return z
    .object({
      _type: dayModelType,
      date: z.string(),
      name: z.string(),
      working: z.boolean(),
      _links: dayModelLinksRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      date: data['date'],
      name: data['name'],
      working: data['working'],
      _links: data['_links'],
    }));
});
