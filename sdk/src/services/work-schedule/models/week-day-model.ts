// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { WeekDayModelType, weekDayModelType } from './week-day-model-type';
import {
  WeekDaySelfLinkModel,
  weekDaySelfLinkModel,
  weekDaySelfLinkModelRequest,
  weekDaySelfLinkModelResponse,
} from './week-day-self-link-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const weekDayModel = z.lazy(() => {
  return z.object({
    _type: weekDayModelType,
    day: z.number().gte(1).lte(7),
    name: z.string(),
    working: z.boolean(),
    _links: weekDaySelfLinkModel.optional(),
  });
});

/**
 *
 * @typedef  {WeekDayModel} weekDayModel
 * @property {WeekDayModelType}
 * @property {number} - The week day from 1 to 7. 1 is Monday. 7 is Sunday.
 * @property {string} - The week day name.
 * @property {boolean} - `true` for a working week day, `false` otherwise.
 * @property {WeekDaySelfLinkModel} - Identify a particular week day by its href.
 */
export type WeekDayModel = z.infer<typeof weekDayModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const weekDayModelResponse = z.lazy(() => {
  return z
    .object({
      _type: weekDayModelType,
      day: z.number().gte(1).lte(7),
      name: z.string(),
      working: z.boolean(),
      _links: weekDaySelfLinkModelResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      day: data['day'],
      name: data['name'],
      working: data['working'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const weekDayModelRequest = z.lazy(() => {
  return z
    .object({
      _type: weekDayModelType,
      day: z.number().gte(1).lte(7),
      name: z.string(),
      working: z.boolean(),
      _links: weekDaySelfLinkModelRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      day: data['day'],
      name: data['name'],
      working: data['working'],
      _links: data['_links'],
    }));
});
