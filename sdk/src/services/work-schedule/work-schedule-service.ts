// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import {
  NonWorkingDayCollectionModel,
  nonWorkingDayCollectionModelResponse,
} from './models/non-working-day-collection-model';
import { ListDaysParams, ListNonWorkingDaysParams } from './request-params';
import {
  NonWorkingDayModel,
  nonWorkingDayModelRequest,
  nonWorkingDayModelResponse,
} from './models/non-working-day-model';
import { WeekDayCollectionModel, weekDayCollectionModelResponse } from './models/week-day-collection-model';
import {
  WeekDayCollectionWriteModel,
  weekDayCollectionWriteModelRequest,
} from './models/week-day-collection-write-model';
import { WeekDayModel, weekDayModelResponse } from './models/week-day-model';
import { WeekDayWriteModel, weekDayWriteModelRequest } from './models/week-day-write-model';
import { DayCollectionModel, dayCollectionModelResponse } from './models/day-collection-model';
import { DayModel, dayModelResponse } from './models/day-model';

export class WorkScheduleService extends BaseService {
  /**
 * Lists all one-time non working days, such as holidays.It does not lists the non working weekdays, such as each Saturday, Sunday.
For listing the weekends, the `/api/v3/days` endpoint should be used.

All days from current year are returned by default.
 * @param {string} [params.filters] - JSON specifying filter conditions.

Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/)
endpoint. Currently supported filters are:

+ date: the inclusive date interval to scope days to look up. When
  unspecified, default is from the beginning to the end of current year.

  Example: `{ "date": { "operator": "<>d", "values": ["2022-05-02","2022-05-26"] } }`
  would return days between May 5 and May 26 2022, inclusive.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<NonWorkingDayCollectionModel>>} OK
 */
  async listNonWorkingDays(
    params?: ListNonWorkingDaysParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<NonWorkingDayCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/days/non_working')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: nonWorkingDayCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filters',
        value: params?.filters,
      })
      .build();
    return this.client.call<NonWorkingDayCollectionModel>(request);
  }

  /**
 * **(NOT IMPLEMENTED)**Marks a day as being a non-working day.

Note: creating a non-working day will not affect the start and finish dates
of work packages but will affect their duration.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<NonWorkingDayModel>>} Non-working day created.
 */
  async createNonWorkingDay(
    body: NonWorkingDayModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<NonWorkingDayModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api/v3/days/non_working')
      .setRequestSchema(nonWorkingDayModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: nonWorkingDayModelResponse,
        contentType: ContentType.Json,
        status: 201,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<NonWorkingDayModel>(request);
  }

  /**
   * Returns the non-working day information for a given date.
   * @param {string} date - The date of the non-working day to view in ISO 8601 format.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<NonWorkingDayModel>>} OK
   */
  async viewNonWorkingDay(date: string, requestConfig?: RequestConfig): Promise<HttpResponse<NonWorkingDayModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/days/non_working/{date}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: nonWorkingDayModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'date',
        value: date,
      })
      .build();
    return this.client.call<NonWorkingDayModel>(request);
  }

  /**
   * **(NOT IMPLEMENTED)**Update the non-working day information for a given date.
   * @param {string} date - The date of the non-working day to view in ISO 8601 format.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<NonWorkingDayModel>>} OK
   */
  async updateNonWorkingDay(
    date: string,
    body: NonWorkingDayModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<NonWorkingDayModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('PATCH')
      .setPath('/api/v3/days/non_working/{date}')
      .setRequestSchema(nonWorkingDayModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: nonWorkingDayModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'date',
        value: date,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<NonWorkingDayModel>(request);
  }

  /**
 * **(NOT IMPLEMENTED)**Removes the non-working day at the given date.

Note: deleting a non-working day will not affect the start and finish dates
of work packages but will affect their duration.
 * @param {string} date - The date of the non-working day to view in ISO 8601 format.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<any>>} No Content.

The operation succeeded.
 */
  async deleteNonWorkingDay(date: string, requestConfig?: RequestConfig): Promise<HttpResponse<void>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('DELETE')
      .setPath('/api/v3/days/non_working/{date}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.undefined(),
        contentType: ContentType.NoContent,
        status: 204,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'date',
        value: date,
      })
      .build();
    return this.client.call<void>(request);
  }

  /**
   * Lists week days with work schedule information.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WeekDayCollectionModel>>} OK
   */
  async listWeekDays(requestConfig?: RequestConfig): Promise<HttpResponse<WeekDayCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/days/week')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: weekDayCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<WeekDayCollectionModel>(request);
  }

  /**
   * **(NOT IMPLEMENTED)**Update multiple week days with work schedule information.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WeekDayCollectionModel>>} OK
   */
  async updateWeekDays(
    body: WeekDayCollectionWriteModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WeekDayCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('PATCH')
      .setPath('/api/v3/days/week')
      .setRequestSchema(weekDayCollectionWriteModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: weekDayCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<WeekDayCollectionModel>(request);
  }

  /**
   * View a week day and its attributes.
   * @param {number} day - The week day from 1 to 7. 1 is Monday. 7 is Sunday.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WeekDayModel>>} OK
   */
  async viewWeekDay(day: number, requestConfig?: RequestConfig): Promise<HttpResponse<WeekDayModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/days/week/{day}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: weekDayModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'day',
        value: day,
      })
      .build();
    return this.client.call<WeekDayModel>(request);
  }

  /**
 * **(NOT IMPLEMENTED)**Makes a week day a working or non-working day.

Note: changing a week day working attribute will not affect the start and
finish dates of work packages but will affect their duration attribute.
 * @param {number} day - The week day from 1 to 7. 1 is Monday. 7 is Sunday.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<WeekDayModel>>} Update succeeded.

Response will include the week day with updated attributes.
 */
  async updateWeekDay(
    day: number,
    body: WeekDayWriteModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WeekDayModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('PATCH')
      .setPath('/api/v3/days/week/{day}')
      .setRequestSchema(weekDayWriteModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: weekDayModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'day',
        value: day,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<WeekDayModel>(request);
  }

  /**
 * Lists days information for a given date interval.
All days from the beginning of current month to the end of following month
are returned by default.
 * @param {string} [params.filters] - JSON specifying filter conditions.

Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/)
endpoint. Currently supported filters are:

+ date: the inclusive date interval to scope days to look up. When
  unspecified, default is from the beginning of current month to the end
  of following month.

  Example: `{ "date": { "operator": "<>d", "values": ["2022-05-02","2022-05-26"] } }`
  would return days between May 5 and May 26 2022, inclusive.

+ working: when `true`, returns only the working days. When `false`,
  returns only the non-working days (weekend days and non-working days).
  When unspecified, returns both working and non-working days.

  Example: `{ "working": { "operator": "=", "values": ["t"] } }`
  would exclude non-working days from the response.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<DayCollectionModel>>} OK
 */
  async listDays(params?: ListDaysParams, requestConfig?: RequestConfig): Promise<HttpResponse<DayCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/days')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: dayCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filters',
        value: params?.filters,
      })
      .build();
    return this.client.call<DayCollectionModel>(request);
  }

  /**
   * View the day information for a given date.
   * @param {string} date - The date of the non-working day to view in ISO 8601 format.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<DayModel>>} OK
   */
  async viewDay(date: string, requestConfig?: RequestConfig): Promise<HttpResponse<DayModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/days/{date}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: dayModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'date',
        value: date,
      })
      .build();
    return this.client.call<DayModel>(request);
  }
}
