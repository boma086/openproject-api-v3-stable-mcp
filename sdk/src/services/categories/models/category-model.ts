// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  CategoryModelLinks,
  categoryModelLinks,
  categoryModelLinksRequest,
  categoryModelLinksResponse,
} from './category-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const categoryModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    name: z.string().optional(),
    _links: categoryModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {CategoryModel} categoryModel
 * @property {number} - Category id
 * @property {string} - Category name
 * @property {CategoryModelLinks}
 */
export type CategoryModel = z.infer<typeof categoryModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const categoryModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().optional(),
      _links: categoryModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const categoryModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().optional(),
      _links: categoryModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      _links: data['_links'],
    }));
});
