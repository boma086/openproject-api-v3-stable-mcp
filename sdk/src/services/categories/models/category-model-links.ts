// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf10, _linksSelf10, _linksSelf10Request, _linksSelf10Response } from './_links-self-10';
import { _LinksProject2, _linksProject2, _linksProject2Request, _linksProject2Response } from './_links-project-2';
import {
  _LinksDefaultAssignee1,
  _linksDefaultAssignee1,
  _linksDefaultAssignee1Request,
  _linksDefaultAssignee1Response,
} from './_links-default-assignee-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const categoryModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf10,
    project: _linksProject2,
    defaultAssignee: _linksDefaultAssignee1.optional(),
  });
});

/**
 * 
 * @typedef  {CategoryModelLinks} categoryModelLinks   
 * @property {_LinksSelf10} - This category

``Resource``: Category
 * @property {_LinksProject2} - The project of this category

``Resource``: Project
 * @property {_LinksDefaultAssignee1} - Default assignee for work packages of this category

``Resource``: User
 */
export type CategoryModelLinks = z.infer<typeof categoryModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const categoryModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf10Response,
      project: _linksProject2Response,
      defaultAssignee: _linksDefaultAssignee1Response.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      project: data['project'],
      defaultAssignee: data['defaultAssignee'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const categoryModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf10Request,
      project: _linksProject2Request,
      defaultAssignee: _linksDefaultAssignee1Request.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      project: data['project'],
      defaultAssignee: data['defaultAssignee'],
    }));
});
