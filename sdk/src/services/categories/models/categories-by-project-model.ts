// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { CategoriesByProjectModelType, categoriesByProjectModelType } from './categories-by-project-model-type';
import {
  CategoriesByProjectModelLinks,
  categoriesByProjectModelLinks,
  categoriesByProjectModelLinksRequest,
  categoriesByProjectModelLinksResponse,
} from './categories-by-project-model-links';
import {
  CategoriesByProjectModelEmbedded,
  categoriesByProjectModelEmbedded,
  categoriesByProjectModelEmbeddedRequest,
  categoriesByProjectModelEmbeddedResponse,
} from './categories-by-project-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const categoriesByProjectModel = z.lazy(() => {
  return z.object({
    _type: categoriesByProjectModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: categoriesByProjectModelLinks,
    _embedded: categoriesByProjectModelEmbedded,
  });
});

/**
 *
 * @typedef  {CategoriesByProjectModel} categoriesByProjectModel
 * @property {CategoriesByProjectModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {CategoriesByProjectModelLinks}
 * @property {CategoriesByProjectModelEmbedded}
 */
export type CategoriesByProjectModel = z.infer<typeof categoriesByProjectModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const categoriesByProjectModelResponse = z.lazy(() => {
  return z
    .object({
      _type: categoriesByProjectModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: categoriesByProjectModelLinksResponse,
      _embedded: categoriesByProjectModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const categoriesByProjectModelRequest = z.lazy(() => {
  return z
    .object({
      _type: categoriesByProjectModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: categoriesByProjectModelLinksRequest,
      _embedded: categoriesByProjectModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
