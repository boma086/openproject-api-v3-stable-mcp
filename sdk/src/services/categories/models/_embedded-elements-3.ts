// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ElementsLinks3, elementsLinks3, elementsLinks3Request, elementsLinks3Response } from './elements-links-3';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _embeddedElements3 = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    name: z.string().optional(),
    _links: elementsLinks3.optional(),
  });
});

/**
 * Collection of Categories
 * @typedef  {_EmbeddedElements3} _embeddedElements3 - Collection of Categories - Collection of Categories
 * @property {number} - Category id
 * @property {string} - Category name
 * @property {ElementsLinks3}
 */
export type _EmbeddedElements3 = z.infer<typeof _embeddedElements3>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements3Response = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().optional(),
      _links: elementsLinks3Response.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements3Request = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().optional(),
      _links: elementsLinks3Request.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      _links: data['_links'],
    }));
});
