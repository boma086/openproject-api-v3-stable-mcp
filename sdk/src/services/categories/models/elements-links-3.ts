// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf12, _linksSelf12, _linksSelf12Request, _linksSelf12Response } from './_links-self-12';
import { _LinksProject3, _linksProject3, _linksProject3Request, _linksProject3Response } from './_links-project-3';
import {
  _LinksDefaultAssignee2,
  _linksDefaultAssignee2,
  _linksDefaultAssignee2Request,
  _linksDefaultAssignee2Response,
} from './_links-default-assignee-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const elementsLinks3 = z.lazy(() => {
  return z.object({
    self: _linksSelf12,
    project: _linksProject3,
    defaultAssignee: _linksDefaultAssignee2.optional(),
  });
});

/**
 * 
 * @typedef  {ElementsLinks3} elementsLinks3   
 * @property {_LinksSelf12} - This category

``Resource``: Category
 * @property {_LinksProject3} - The project of this category

``Resource``: Project
 * @property {_LinksDefaultAssignee2} - Default assignee for work packages of this category

``Resource``: User
 */
export type ElementsLinks3 = z.infer<typeof elementsLinks3>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks3Response = z.lazy(() => {
  return z
    .object({
      self: _linksSelf12Response,
      project: _linksProject3Response,
      defaultAssignee: _linksDefaultAssignee2Response.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      project: data['project'],
      defaultAssignee: data['defaultAssignee'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks3Request = z.lazy(() => {
  return z
    .object({
      self: _linksSelf12Request,
      project: _linksProject3Request,
      defaultAssignee: _linksDefaultAssignee2Request.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      project: data['project'],
      defaultAssignee: data['defaultAssignee'],
    }));
});
