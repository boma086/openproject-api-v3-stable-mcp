// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  MeetingModelLinks,
  meetingModelLinks,
  meetingModelLinksRequest,
  meetingModelLinksResponse,
} from './meeting-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const meetingModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    title: z.string(),
    _links: meetingModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {MeetingModel} meetingModel
 * @property {number} - Identifier of this meeting
 * @property {string} - The meeting's title
 * @property {MeetingModelLinks}
 */
export type MeetingModel = z.infer<typeof meetingModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const meetingModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      title: z.string(),
      _links: meetingModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      title: data['title'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const meetingModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      title: z.string(),
      _links: meetingModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      title: data['title'],
      _links: data['_links'],
    }));
});
