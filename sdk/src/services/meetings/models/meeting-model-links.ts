// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf38, _linksSelf38, _linksSelf38Request, _linksSelf38Response } from './_links-self-38';
import { _LinksAuthor6, _linksAuthor6, _linksAuthor6Request, _linksAuthor6Response } from './_links-author-6';
import { _LinksProject7, _linksProject7, _linksProject7Request, _linksProject7Response } from './_links-project-7';
import {
  _LinksAttachments7,
  _linksAttachments7,
  _linksAttachments7Request,
  _linksAttachments7Response,
} from './_links-attachments-7';
import {
  _LinksAddAttachment6,
  _linksAddAttachment6,
  _linksAddAttachment6Request,
  _linksAddAttachment6Response,
} from './_links-add-attachment-6';

/**
 * The shape of the model inside the application code - what the users use
 */
export const meetingModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf38.optional(),
    author: _linksAuthor6.optional(),
    project: _linksProject7.optional(),
    attachments: _linksAttachments7.optional(),
    addAttachment: _linksAddAttachment6.optional(),
  });
});

/**
 * 
 * @typedef  {MeetingModelLinks} meetingModelLinks   
 * @property {_LinksSelf38} - This meeting

``Resource``: Meeting
 * @property {_LinksAuthor6} - The user having created the meeting

``Resource``: User
 * @property {_LinksProject7} - The project the meeting is in

``Resource``: Project
 * @property {_LinksAttachments7} - The attachment collection of this grid.

``Resource``: AttachmentCollection           
 * @property {_LinksAddAttachment6} - Attach a file to the meeting

# Conditions

``Permission``: edit meeting
 */
export type MeetingModelLinks = z.infer<typeof meetingModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const meetingModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf38Response.optional(),
      author: _linksAuthor6Response.optional(),
      project: _linksProject7Response.optional(),
      attachments: _linksAttachments7Response.optional(),
      addAttachment: _linksAddAttachment6Response.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      author: data['author'],
      project: data['project'],
      attachments: data['attachments'],
      addAttachment: data['addAttachment'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const meetingModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf38Request.optional(),
      author: _linksAuthor6Request.optional(),
      project: _linksProject7Request.optional(),
      attachments: _linksAttachments7Request.optional(),
      addAttachment: _linksAddAttachment6Request.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      author: data['author'],
      project: data['project'],
      attachments: data['attachments'],
      addAttachment: data['addAttachment'],
    }));
});
