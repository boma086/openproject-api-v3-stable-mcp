// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { StatusModelType, statusModelType } from './status-model-type';
import {
  StatusModelLinks,
  statusModelLinks,
  statusModelLinksRequest,
  statusModelLinksResponse,
} from './status-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const statusModel = z.lazy(() => {
  return z.object({
    _type: statusModelType.optional(),
    id: z.number().gte(1).optional(),
    name: z.string().optional(),
    isClosed: z.boolean().optional(),
    color: z.string().optional(),
    isDefault: z.boolean().optional(),
    isReadonly: z.boolean().optional(),
    excludedFromTotals: z.boolean().optional(),
    defaultDoneRatio: z.number().gte(0).lte(100).optional(),
    position: z.number().optional(),
    _links: statusModelLinks.optional(),
  });
});

/**
 * 
 * @typedef  {StatusModel} statusModel   
 * @property {StatusModelType} 
 * @property {number} - Status id
 * @property {string} - Status name
 * @property {boolean} - Indicates, whether work package of this status are considered closed
 * @property {string} - The color of the status
 * @property {boolean} - True, if this status is the default status for new work packages
 * @property {boolean} - Indicates, whether work package of this status are readonly
 * @property {boolean} - Indicates, whether work package of this status are excluded from totals of `Work`, `Remaining work`, and
`% Complete` in a hierarchy.
 * @property {number} - The percentageDone being applied when changing to this status
 * @property {number} - Sort index of the status
 * @property {StatusModelLinks} 
 */
export type StatusModel = z.infer<typeof statusModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const statusModelResponse = z.lazy(() => {
  return z
    .object({
      _type: statusModelType.optional(),
      id: z.number().gte(1).optional(),
      name: z.string().optional(),
      isClosed: z.boolean().optional(),
      color: z.string().optional(),
      isDefault: z.boolean().optional(),
      isReadonly: z.boolean().optional(),
      excludedFromTotals: z.boolean().optional(),
      defaultDoneRatio: z.number().gte(0).lte(100).optional(),
      position: z.number().optional(),
      _links: statusModelLinksResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      isClosed: data['isClosed'],
      color: data['color'],
      isDefault: data['isDefault'],
      isReadonly: data['isReadonly'],
      excludedFromTotals: data['excludedFromTotals'],
      defaultDoneRatio: data['defaultDoneRatio'],
      position: data['position'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const statusModelRequest = z.lazy(() => {
  return z
    .object({
      _type: statusModelType.optional(),
      id: z.number().gte(1).optional(),
      name: z.string().optional(),
      isClosed: z.boolean().optional(),
      color: z.string().optional(),
      isDefault: z.boolean().optional(),
      isReadonly: z.boolean().optional(),
      excludedFromTotals: z.boolean().optional(),
      defaultDoneRatio: z.number().gte(0).lte(100).optional(),
      position: z.number().optional(),
      _links: statusModelLinksRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      isClosed: data['isClosed'],
      color: data['color'],
      isDefault: data['isDefault'],
      isReadonly: data['isReadonly'],
      excludedFromTotals: data['excludedFromTotals'],
      defaultDoneRatio: data['defaultDoneRatio'],
      position: data['position'],
      _links: data['_links'],
    }));
});
