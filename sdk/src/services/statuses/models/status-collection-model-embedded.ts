// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { StatusModel, statusModel, statusModelRequest, statusModelResponse } from './status-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const statusCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(statusModel),
  });
});

/**
 *
 * @typedef  {StatusCollectionModelEmbedded} statusCollectionModelEmbedded
 * @property {StatusModel[]}
 */
export type StatusCollectionModelEmbedded = z.infer<typeof statusCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const statusCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(statusModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const statusCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(statusModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
