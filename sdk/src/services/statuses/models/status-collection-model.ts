// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { StatusCollectionModelType, statusCollectionModelType } from './status-collection-model-type';
import {
  CollectionLinks,
  collectionLinks,
  collectionLinksRequest,
  collectionLinksResponse,
} from '../../common/collection-links';
import {
  StatusCollectionModelEmbedded,
  statusCollectionModelEmbedded,
  statusCollectionModelEmbeddedRequest,
  statusCollectionModelEmbeddedResponse,
} from './status-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const statusCollectionModel = z.lazy(() => {
  return z.object({
    _type: statusCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: collectionLinks,
    _embedded: statusCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {StatusCollectionModel} statusCollectionModel
 * @property {StatusCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {CollectionLinks}
 * @property {StatusCollectionModelEmbedded}
 */
export type StatusCollectionModel = z.infer<typeof statusCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const statusCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: statusCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: collectionLinksResponse,
      _embedded: statusCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const statusCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: statusCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: collectionLinksRequest,
      _embedded: statusCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
