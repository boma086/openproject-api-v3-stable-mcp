// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  WorkPackagePatchModelDescription,
  workPackagePatchModelDescription,
  workPackagePatchModelDescriptionRequest,
  workPackagePatchModelDescriptionResponse,
} from './work-package-patch-model-description';
import {
  WorkPackagePatchModelLinks,
  workPackagePatchModelLinks,
  workPackagePatchModelLinksRequest,
  workPackagePatchModelLinksResponse,
} from './work-package-patch-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workPackagePatchModel = z.lazy(() => {
  return z.object({
    subject: z.string().optional(),
    description: workPackagePatchModelDescription.optional(),
    scheduleManually: z.boolean().optional(),
    startDate: z.string().optional().nullable(),
    dueDate: z.string().optional().nullable(),
    estimatedTime: z.string().optional().nullable(),
    duration: z.string().optional().nullable(),
    ignoreNonWorkingDays: z.boolean().optional(),
    _links: workPackagePatchModelLinks.optional(),
    lockVersion: z.number(),
  });
});

/**
 * 
 * @typedef  {WorkPackagePatchModel} workPackagePatchModel   
 * @property {string} - Work package subject
 * @property {WorkPackagePatchModelDescription} - The work package description
 * @property {boolean} - Uses manual scheduling mode when true (default). Uses automatic scheduling
mode when false. Can be automatic only when predecessors or children are
present.
 * @property {string} - Scheduled beginning of a work package
 * @property {string} - Scheduled end of a work package
 * @property {string} - Time a work package likely needs to be completed excluding its descendants
 * @property {string} - The amount of time in hours the work package needs to be completed. This value must be bigger or equal to `P1D`,
and any the value will get floored to the nearest day.

The duration has no effect, unless either a start date or a due date is set.

Not available for milestone type of work packages.
 * @property {boolean} - When scheduling, whether or not to ignore the non working days being defined.
A work package with the flag set to true will be allowed to be scheduled to a non working day.
 * @property {WorkPackagePatchModelLinks} 
 * @property {number} - The version of the item as used for optimistic locking
 */
export type WorkPackagePatchModel = z.infer<typeof workPackagePatchModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackagePatchModelResponse = z.lazy(() => {
  return z
    .object({
      subject: z.string().optional(),
      description: workPackagePatchModelDescriptionResponse.optional(),
      scheduleManually: z.boolean().optional(),
      startDate: z.string().optional().nullable(),
      dueDate: z.string().optional().nullable(),
      estimatedTime: z.string().optional().nullable(),
      duration: z.string().optional().nullable(),
      ignoreNonWorkingDays: z.boolean().optional(),
      _links: workPackagePatchModelLinksResponse.optional(),
      lockVersion: z.number(),
    })
    .transform((data) => ({
      subject: data['subject'],
      description: data['description'],
      scheduleManually: data['scheduleManually'],
      startDate: data['startDate'],
      dueDate: data['dueDate'],
      estimatedTime: data['estimatedTime'],
      duration: data['duration'],
      ignoreNonWorkingDays: data['ignoreNonWorkingDays'],
      _links: data['_links'],
      lockVersion: data['lockVersion'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackagePatchModelRequest = z.lazy(() => {
  return z
    .object({
      subject: z.string().optional(),
      description: workPackagePatchModelDescriptionRequest.optional(),
      scheduleManually: z.boolean().optional(),
      startDate: z.string().optional().nullable(),
      dueDate: z.string().optional().nullable(),
      estimatedTime: z.string().optional().nullable(),
      duration: z.string().optional().nullable(),
      ignoreNonWorkingDays: z.boolean().optional(),
      _links: workPackagePatchModelLinksRequest.optional(),
      lockVersion: z.number(),
    })
    .transform((data) => ({
      subject: data['subject'],
      description: data['description'],
      scheduleManually: data['scheduleManually'],
      startDate: data['startDate'],
      dueDate: data['dueDate'],
      estimatedTime: data['estimatedTime'],
      duration: data['duration'],
      ignoreNonWorkingDays: data['ignoreNonWorkingDays'],
      _links: data['_links'],
      lockVersion: data['lockVersion'],
    }));
});
