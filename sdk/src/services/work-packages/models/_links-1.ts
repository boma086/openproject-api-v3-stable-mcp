// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _Links1Storage, _links1Storage, _links1StorageRequest, _links1StorageResponse } from './_links-1-storage';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _links1 = z.lazy(() => {
  return z.object({
    storage: _links1Storage,
  });
});

/**
 * 
 * @typedef  {_Links1} _links1   
 * @property {_Links1Storage} - The storage resource of the linked file.

``Resource``: Storage
 */
export type _Links1 = z.infer<typeof _links1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _links1Response = z.lazy(() => {
  return z
    .object({
      storage: _links1StorageResponse,
    })
    .transform((data) => ({
      storage: data['storage'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _links1Request = z.lazy(() => {
  return z
    .object({
      storage: _links1StorageRequest,
    })
    .transform((data) => ({
      storage: data['storage'],
    }));
});
