// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  ReminderModelLinks,
  reminderModelLinks,
  reminderModelLinksRequest,
  reminderModelLinksResponse,
} from './reminder-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const reminderModel = z.lazy(() => {
  return z.object({
    id: z.number().gte(1).optional(),
    note: z.string().optional(),
    remindAt: z.string().optional(),
    _links: reminderModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {ReminderModel} reminderModel
 * @property {number} - Reminder id
 * @property {string} - The note of the reminder
 * @property {string} - The date and time when the reminder is due
 * @property {ReminderModelLinks}
 */
export type ReminderModel = z.infer<typeof reminderModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const reminderModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      note: z.string().optional(),
      remindAt: z.string().optional(),
      _links: reminderModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      note: data['note'],
      remindAt: data['remindAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const reminderModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      note: z.string().optional(),
      remindAt: z.string().optional(),
      _links: reminderModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      note: data['note'],
      remindAt: data['remindAt'],
      _links: data['_links'],
    }));
});
