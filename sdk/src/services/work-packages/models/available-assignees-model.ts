// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { AvailableAssigneesModelType, availableAssigneesModelType } from './available-assignees-model-type';
import {
  AvailableAssigneesModelLinks,
  availableAssigneesModelLinks,
  availableAssigneesModelLinksRequest,
  availableAssigneesModelLinksResponse,
} from './available-assignees-model-links';
import {
  AvailableAssigneesModelEmbedded,
  availableAssigneesModelEmbedded,
  availableAssigneesModelEmbeddedRequest,
  availableAssigneesModelEmbeddedResponse,
} from './available-assignees-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const availableAssigneesModel = z.lazy(() => {
  return z.object({
    _type: availableAssigneesModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: availableAssigneesModelLinks,
    _embedded: availableAssigneesModelEmbedded,
  });
});

/**
 *
 * @typedef  {AvailableAssigneesModel} availableAssigneesModel
 * @property {AvailableAssigneesModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {AvailableAssigneesModelLinks}
 * @property {AvailableAssigneesModelEmbedded}
 */
export type AvailableAssigneesModel = z.infer<typeof availableAssigneesModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const availableAssigneesModelResponse = z.lazy(() => {
  return z
    .object({
      _type: availableAssigneesModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: availableAssigneesModelLinksResponse,
      _embedded: availableAssigneesModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const availableAssigneesModelRequest = z.lazy(() => {
  return z
    .object({
      _type: availableAssigneesModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: availableAssigneesModelLinksRequest,
      _embedded: availableAssigneesModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
