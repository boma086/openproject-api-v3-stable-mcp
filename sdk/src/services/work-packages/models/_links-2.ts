// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { StorageUrl, storageUrl, storageUrlRequest, storageUrlResponse } from './storage-url';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _links2 = z.lazy(() => {
  return z.object({
    storageUrl: storageUrl,
  });
});

/**
 * 
 * @typedef  {_Links2} _links2   
 * @property {StorageUrl} - The storage url the file link references to.

``Resource``: N/A
 */
export type _Links2 = z.infer<typeof _links2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _links2Response = z.lazy(() => {
  return z
    .object({
      storageUrl: storageUrlResponse,
    })
    .transform((data) => ({
      storageUrl: data['storageUrl'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _links2Request = z.lazy(() => {
  return z
    .object({
      storageUrl: storageUrlRequest,
    })
    .transform((data) => ({
      storageUrl: data['storageUrl'],
    }));
});
