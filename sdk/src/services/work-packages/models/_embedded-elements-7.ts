// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ElementsType3, elementsType3 } from './elements-type-3';
import { ElementsLinks5, elementsLinks5, elementsLinks5Request, elementsLinks5Response } from './elements-links-5';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _embeddedElements7 = z.lazy(() => {
  return z.object({
    _type: elementsType3,
    id: z.number().gte(1),
    name: z.string(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    _links: elementsLinks5,
    avatar: z.string(),
    login: z.string().max(256).optional(),
    firstName: z.string().max(30).optional(),
    lastName: z.string().max(30).optional(),
    email: z.string().max(60).optional(),
    admin: z.boolean().optional(),
    status: z.string().optional(),
    language: z.string().optional(),
    identityUrl: z.string().optional().nullable(),
  });
});

/**
 * Collection of Users
 * @typedef  {_EmbeddedElements7} _embeddedElements7 - Collection of Users - Collection of Users
 * @property {ElementsType3} 
 * @property {number} - The principal's unique identifier.
 * @property {string} - The principal's display name, layout depends on instance settings.
 * @property {string} - Time of creation
 * @property {string} - Time of the most recent change to the user
 * @property {ElementsLinks5} 
 * @property {string} - URL to user's avatar
 * @property {string} - The user's login name

# Conditions

- User is self, or `create_user` or `manage_user` permission globally
 * @property {string} - The user's first name

# Conditions

- User is self, or `create_user` or `manage_user` permission globally
 * @property {string} - The user's last name

# Conditions

- User is self, or `create_user` or `manage_user` permission globally
 * @property {string} - The user's email address

# Conditions

- E-Mail address not hidden
- User is not a new record
- User is self, or `create_user` or `manage_user` permission globally
 * @property {boolean} - Flag indicating whether or not the user is an admin

# Conditions

- `admin`
 * @property {string} - The current activation status of the user.

# Conditions

- User is self, or `create_user` or `manage_user` permission globally
 * @property {string} - User's language | ISO 639-1 format

# Conditions

- User is self, or `create_user` or `manage_user` permission globally
 * @property {string} - User's identity_url for OmniAuth authentication.

# Conditions

- User is self, or `create_user` or `manage_user` permission globally
 */
export type _EmbeddedElements7 = z.infer<typeof _embeddedElements7>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements7Response = z.lazy(() => {
  return z
    .object({
      _type: elementsType3,
      id: z.number().gte(1),
      name: z.string(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: elementsLinks5Response,
      avatar: z.string(),
      login: z.string().max(256).optional(),
      firstName: z.string().max(30).optional(),
      lastName: z.string().max(30).optional(),
      email: z.string().max(60).optional(),
      admin: z.boolean().optional(),
      status: z.string().optional(),
      language: z.string().optional(),
      identityUrl: z.string().optional().nullable(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
      avatar: data['avatar'],
      login: data['login'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      email: data['email'],
      admin: data['admin'],
      status: data['status'],
      language: data['language'],
      identityUrl: data['identityUrl'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements7Request = z.lazy(() => {
  return z
    .object({
      _type: elementsType3,
      id: z.number().gte(1),
      name: z.string(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: elementsLinks5Request,
      avatar: z.string(),
      login: z.string().max(256).optional(),
      firstName: z.string().max(30).optional(),
      lastName: z.string().max(30).optional(),
      email: z.string().max(60).optional(),
      admin: z.boolean().optional(),
      status: z.string().optional(),
      language: z.string().optional(),
      identityUrl: z.string().optional().nullable(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
      avatar: data['avatar'],
      login: data['login'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      email: data['email'],
      admin: data['admin'],
      status: data['status'],
      language: data['language'],
      identityUrl: data['identityUrl'],
    }));
});
