// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksCategory3, _linksCategory3, _linksCategory3Request, _linksCategory3Response } from './_links-category-3';
import { _LinksType5, _linksType5, _linksType5Request, _linksType5Response } from './_links-type-5';
import { _LinksPriority3, _linksPriority3, _linksPriority3Request, _linksPriority3Response } from './_links-priority-3';
import { _LinksProject13, _linksProject13, _linksProject13Request, _linksProject13Response } from './_links-project-13';
import { _LinksStatus6, _linksStatus6, _linksStatus6Request, _linksStatus6Response } from './_links-status-6';
import {
  _LinksResponsible3,
  _linksResponsible3,
  _linksResponsible3Request,
  _linksResponsible3Response,
} from './_links-responsible-3';
import { _LinksAssignee3, _linksAssignee3, _linksAssignee3Request, _linksAssignee3Response } from './_links-assignee-3';
import { _LinksVersion3, _linksVersion3, _linksVersion3Request, _linksVersion3Response } from './_links-version-3';
import { _LinksParent6, _linksParent6, _linksParent6Request, _linksParent6Response } from './_links-parent-6';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workPackageWriteModelLinks = z.lazy(() => {
  return z.object({
    category: _linksCategory3.optional(),
    type: _linksType5.optional(),
    priority: _linksPriority3.optional(),
    project: _linksProject13.optional(),
    status: _linksStatus6.optional(),
    responsible: _linksResponsible3.optional(),
    assignee: _linksAssignee3.optional(),
    version: _linksVersion3.optional(),
    parent: _linksParent6.optional(),
  });
});

/**
 * 
 * @typedef  {WorkPackageWriteModelLinks} workPackageWriteModelLinks   
 * @property {_LinksCategory3} - The category of the work package

``Resource``: Category
 * @property {_LinksType5} - The type of the work package

``Resource``: Type
 * @property {_LinksPriority3} - The priority of the work package

``Resource``: Priority
 * @property {_LinksProject13} - The project to which the work package belongs

``Resource``: Project
 * @property {_LinksStatus6} - The current status of the work package

``Resource``: Status
 * @property {_LinksResponsible3} - The person that is responsible for the overall outcome

``Resource``: User
 * @property {_LinksAssignee3} - The person that is intended to work on the work package

``Resource``: User
 * @property {_LinksVersion3} - The version associated to the work package

``Resource``: Version
 * @property {_LinksParent6} - Parent work package

``Resource``: WorkPackage
 */
export type WorkPackageWriteModelLinks = z.infer<typeof workPackageWriteModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageWriteModelLinksResponse = z.lazy(() => {
  return z
    .object({
      category: _linksCategory3Response.optional(),
      type: _linksType5Response.optional(),
      priority: _linksPriority3Response.optional(),
      project: _linksProject13Response.optional(),
      status: _linksStatus6Response.optional(),
      responsible: _linksResponsible3Response.optional(),
      assignee: _linksAssignee3Response.optional(),
      version: _linksVersion3Response.optional(),
      parent: _linksParent6Response.optional(),
    })
    .transform((data) => ({
      category: data['category'],
      type: data['type'],
      priority: data['priority'],
      project: data['project'],
      status: data['status'],
      responsible: data['responsible'],
      assignee: data['assignee'],
      version: data['version'],
      parent: data['parent'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageWriteModelLinksRequest = z.lazy(() => {
  return z
    .object({
      category: _linksCategory3Request.optional(),
      type: _linksType5Request.optional(),
      priority: _linksPriority3Request.optional(),
      project: _linksProject13Request.optional(),
      status: _linksStatus6Request.optional(),
      responsible: _linksResponsible3Request.optional(),
      assignee: _linksAssignee3Request.optional(),
      version: _linksVersion3Request.optional(),
      parent: _linksParent6Request.optional(),
    })
    .transform((data) => ({
      category: data['category'],
      type: data['type'],
      priority: data['priority'],
      project: data['project'],
      status: data['status'],
      responsible: data['responsible'],
      assignee: data['assignee'],
      version: data['version'],
      parent: data['parent'],
    }));
});
