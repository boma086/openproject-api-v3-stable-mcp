// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  FileLinkReadModel,
  fileLinkReadModel,
  fileLinkReadModelRequest,
  fileLinkReadModelResponse,
} from '../../common/file-link-read-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const fileLinkCollectionReadModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(fileLinkReadModel).optional(),
  });
});

/**
 *
 * @typedef  {FileLinkCollectionReadModelEmbedded} fileLinkCollectionReadModelEmbedded
 * @property {FileLinkReadModel[]}
 */
export type FileLinkCollectionReadModelEmbedded = z.infer<typeof fileLinkCollectionReadModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkCollectionReadModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(fileLinkReadModelResponse).optional(),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkCollectionReadModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(fileLinkReadModelRequest).optional(),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
