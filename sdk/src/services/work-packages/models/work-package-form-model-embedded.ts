// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  WorkPackageWriteModel,
  workPackageWriteModel,
  workPackageWriteModelRequest,
  workPackageWriteModelResponse,
} from './work-package-write-model';
import {
  WorkPackageSchemaModel,
  workPackageSchemaModel,
  workPackageSchemaModelRequest,
  workPackageSchemaModelResponse,
} from './work-package-schema-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workPackageFormModelEmbedded = z.lazy(() => {
  return z.object({
    payload: workPackageWriteModel.optional(),
    schema: workPackageSchemaModel.optional(),
    validationErrors: z.any().optional(),
  });
});

/**
 * 
 * @typedef  {WorkPackageFormModelEmbedded} workPackageFormModelEmbedded   
 * @property {WorkPackageWriteModel} - This model is used for creating and updating work packages. It can also be used for validation against the work
package form endpoints.
 * @property {WorkPackageSchemaModel} - A schema for a work package. This schema defines the attributes of a work package.

TODO: Incomplete, needs to be updated with the real behaviour of schemas (when does which attribute appear?).
 * @property {any} - All validation errors, where the key is the faulty property. The object is empty, if the request body is
valid.
 */
export type WorkPackageFormModelEmbedded = z.infer<typeof workPackageFormModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageFormModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      payload: workPackageWriteModelResponse.optional(),
      schema: workPackageSchemaModelResponse.optional(),
      validationErrors: z.any().optional(),
    })
    .transform((data) => ({
      payload: data['payload'],
      schema: data['schema'],
      validationErrors: data['validationErrors'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageFormModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      payload: workPackageWriteModelRequest.optional(),
      schema: workPackageSchemaModelRequest.optional(),
      validationErrors: z.any().optional(),
    })
    .transform((data) => ({
      payload: data['payload'],
      schema: data['schema'],
      validationErrors: data['validationErrors'],
    }));
});
