// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _LinksShowUser4,
  _linksShowUser4,
  _linksShowUser4Request,
  _linksShowUser4Response,
} from './_links-show-user-4';
import {
  _LinksUpdateImmediately13,
  _linksUpdateImmediately13,
  _linksUpdateImmediately13Request,
  _linksUpdateImmediately13Response,
} from './_links-update-immediately-13';
import { _LinksLock3, _linksLock3, _linksLock3Request, _linksLock3Response } from './_links-lock-3';
import { _LinksUnlock3, _linksUnlock3, _linksUnlock3Request, _linksUnlock3Response } from './_links-unlock-3';
import { _LinksDelete15, _linksDelete15, _linksDelete15Request, _linksDelete15Response } from './_links-delete-15';
import {
  _LinksAuthSource3,
  _linksAuthSource3,
  _linksAuthSource3Request,
  _linksAuthSource3Response,
} from './_links-auth-source-3';

/**
 * The shape of the model inside the application code - what the users use
 */
export const elementsLinks6 = z.lazy(() => {
  return z.object({
    showUser: _linksShowUser4.optional(),
    updateImmediately: _linksUpdateImmediately13.optional(),
    lock: _linksLock3.optional(),
    unlock: _linksUnlock3.optional(),
    delete: _linksDelete15.optional(),
    authSource: _linksAuthSource3.optional(),
  });
});

/**
 * 
 * @typedef  {ElementsLinks6} elementsLinks6   
 * @property {_LinksShowUser4} - A relative path to show the user in the web application.

# Condition

- User is not a new record
- User is not `locked`
 * @property {_LinksUpdateImmediately13} - A link to update the user resource.

# Conditions

- `admin`
 * @property {_LinksLock3} - Restrict the user from logging in and performing any actions.

# Conditions

- User is not locked
- `admin`
 * @property {_LinksUnlock3} - Allow a locked user to login and act again.

# Conditions

- User is not locked
- `admin`
 * @property {_LinksDelete15} - Permanently remove a user from the instance

# Conditions

either:
  - `admin`
  - Setting `users_deletable_by_admin` is set
or:
  - User is self
  - Setting `users_deletable_by_self` is set
 * @property {_LinksAuthSource3} - Permanently remove a user from the instance

# Conditions

- LDAP authentication configured
- `admin`
 */
export type ElementsLinks6 = z.infer<typeof elementsLinks6>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks6Response = z.lazy(() => {
  return z
    .object({
      showUser: _linksShowUser4Response.optional(),
      updateImmediately: _linksUpdateImmediately13Response.optional(),
      lock: _linksLock3Response.optional(),
      unlock: _linksUnlock3Response.optional(),
      delete: _linksDelete15Response.optional(),
      authSource: _linksAuthSource3Response.optional(),
    })
    .transform((data) => ({
      showUser: data['showUser'],
      updateImmediately: data['updateImmediately'],
      lock: data['lock'],
      unlock: data['unlock'],
      delete: data['delete'],
      authSource: data['authSource'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks6Request = z.lazy(() => {
  return z
    .object({
      showUser: _linksShowUser4Request.optional(),
      updateImmediately: _linksUpdateImmediately13Request.optional(),
      lock: _linksLock3Request.optional(),
      unlock: _linksUnlock3Request.optional(),
      delete: _linksDelete15Request.optional(),
      authSource: _linksAuthSource3Request.optional(),
    })
    .transform((data) => ({
      showUser: data['showUser'],
      updateImmediately: data['updateImmediately'],
      lock: data['lock'],
      unlock: data['unlock'],
      delete: data['delete'],
      authSource: data['authSource'],
    }));
});
