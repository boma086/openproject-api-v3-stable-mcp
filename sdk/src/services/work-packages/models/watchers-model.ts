// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { WatchersModelType, watchersModelType } from './watchers-model-type';
import {
  WatchersModelLinks,
  watchersModelLinks,
  watchersModelLinksRequest,
  watchersModelLinksResponse,
} from './watchers-model-links';
import {
  WatchersModelEmbedded,
  watchersModelEmbedded,
  watchersModelEmbeddedRequest,
  watchersModelEmbeddedResponse,
} from './watchers-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const watchersModel = z.lazy(() => {
  return z.object({
    _type: watchersModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: watchersModelLinks,
    _embedded: watchersModelEmbedded,
  });
});

/**
 *
 * @typedef  {WatchersModel} watchersModel
 * @property {WatchersModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {WatchersModelLinks}
 * @property {WatchersModelEmbedded}
 */
export type WatchersModel = z.infer<typeof watchersModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const watchersModelResponse = z.lazy(() => {
  return z
    .object({
      _type: watchersModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: watchersModelLinksResponse,
      _embedded: watchersModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const watchersModelRequest = z.lazy(() => {
  return z
    .object({
      _type: watchersModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: watchersModelLinksRequest,
      _embedded: watchersModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
