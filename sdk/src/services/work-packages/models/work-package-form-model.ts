// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { WorkPackageFormModelType, workPackageFormModelType } from './work-package-form-model-type';
import {
  WorkPackageFormModelEmbedded,
  workPackageFormModelEmbedded,
  workPackageFormModelEmbeddedRequest,
  workPackageFormModelEmbeddedResponse,
} from './work-package-form-model-embedded';
import {
  WorkPackageFormModelLinks,
  workPackageFormModelLinks,
  workPackageFormModelLinksRequest,
  workPackageFormModelLinksResponse,
} from './work-package-form-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workPackageFormModel = z.lazy(() => {
  return z.object({
    _type: workPackageFormModelType.optional(),
    _embedded: workPackageFormModelEmbedded.optional(),
    _links: workPackageFormModelLinks.optional(),
  });
});

/**
 * The work package creation form. This object is returned, whenever a work package form endpoint is called. It contains
an allowed payload definition, the full schema and any validation errors on the current request body.
 * @typedef  {WorkPackageFormModel} workPackageFormModel - The work package creation form. This object is returned, whenever a work package form endpoint is called. It contains
an allowed payload definition, the full schema and any validation errors on the current request body. - The work package creation form. This object is returned, whenever a work package form endpoint is called. It contains
an allowed payload definition, the full schema and any validation errors on the current request body.
 * @property {WorkPackageFormModelType} 
 * @property {WorkPackageFormModelEmbedded} 
 * @property {WorkPackageFormModelLinks} 
 */
export type WorkPackageFormModel = z.infer<typeof workPackageFormModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageFormModelResponse = z.lazy(() => {
  return z
    .object({
      _type: workPackageFormModelType.optional(),
      _embedded: workPackageFormModelEmbeddedResponse.optional(),
      _links: workPackageFormModelLinksResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageFormModelRequest = z.lazy(() => {
  return z
    .object({
      _type: workPackageFormModelType.optional(),
      _embedded: workPackageFormModelEmbeddedRequest.optional(),
      _links: workPackageFormModelLinksRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});
