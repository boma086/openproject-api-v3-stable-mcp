// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksCategory4, _linksCategory4, _linksCategory4Request, _linksCategory4Response } from './_links-category-4';
import { _LinksType6, _linksType6, _linksType6Request, _linksType6Response } from './_links-type-6';
import { _LinksPriority4, _linksPriority4, _linksPriority4Request, _linksPriority4Response } from './_links-priority-4';
import { _LinksProject14, _linksProject14, _linksProject14Request, _linksProject14Response } from './_links-project-14';
import { _LinksStatus7, _linksStatus7, _linksStatus7Request, _linksStatus7Response } from './_links-status-7';
import {
  _LinksResponsible4,
  _linksResponsible4,
  _linksResponsible4Request,
  _linksResponsible4Response,
} from './_links-responsible-4';
import { _LinksAssignee4, _linksAssignee4, _linksAssignee4Request, _linksAssignee4Response } from './_links-assignee-4';
import { _LinksVersion4, _linksVersion4, _linksVersion4Request, _linksVersion4Response } from './_links-version-4';
import { _LinksParent7, _linksParent7, _linksParent7Request, _linksParent7Response } from './_links-parent-7';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workPackagePatchModelLinks = z.lazy(() => {
  return z.object({
    category: _linksCategory4.optional(),
    type: _linksType6.optional(),
    priority: _linksPriority4.optional(),
    project: _linksProject14.optional(),
    status: _linksStatus7.optional(),
    responsible: _linksResponsible4.optional(),
    assignee: _linksAssignee4.optional(),
    version: _linksVersion4.optional(),
    parent: _linksParent7.optional(),
  });
});

/**
 * 
 * @typedef  {WorkPackagePatchModelLinks} workPackagePatchModelLinks   
 * @property {_LinksCategory4} - The category of the work package

``Resource``: Category
 * @property {_LinksType6} - The type of the work package

``Resource``: Type
 * @property {_LinksPriority4} - The priority of the work package

``Resource``: Priority
 * @property {_LinksProject14} - The project to which the work package belongs

``Resource``: Project
 * @property {_LinksStatus7} - The current status of the work package

``Resource``: Status
 * @property {_LinksResponsible4} - The person that is responsible for the overall outcome

``Resource``: User
 * @property {_LinksAssignee4} - The person that is intended to work on the work package

``Resource``: User
 * @property {_LinksVersion4} - The version associated to the work package

``Resource``: Version
 * @property {_LinksParent7} - Parent work package

``Resource``: WorkPackage
 */
export type WorkPackagePatchModelLinks = z.infer<typeof workPackagePatchModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackagePatchModelLinksResponse = z.lazy(() => {
  return z
    .object({
      category: _linksCategory4Response.optional(),
      type: _linksType6Response.optional(),
      priority: _linksPriority4Response.optional(),
      project: _linksProject14Response.optional(),
      status: _linksStatus7Response.optional(),
      responsible: _linksResponsible4Response.optional(),
      assignee: _linksAssignee4Response.optional(),
      version: _linksVersion4Response.optional(),
      parent: _linksParent7Response.optional(),
    })
    .transform((data) => ({
      category: data['category'],
      type: data['type'],
      priority: data['priority'],
      project: data['project'],
      status: data['status'],
      responsible: data['responsible'],
      assignee: data['assignee'],
      version: data['version'],
      parent: data['parent'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackagePatchModelLinksRequest = z.lazy(() => {
  return z
    .object({
      category: _linksCategory4Request.optional(),
      type: _linksType6Request.optional(),
      priority: _linksPriority4Request.optional(),
      project: _linksProject14Request.optional(),
      status: _linksStatus7Request.optional(),
      responsible: _linksResponsible4Request.optional(),
      assignee: _linksAssignee4Request.optional(),
      version: _linksVersion4Request.optional(),
      parent: _linksParent7Request.optional(),
    })
    .transform((data) => ({
      category: data['category'],
      type: data['type'],
      priority: data['priority'],
      project: data['project'],
      status: data['status'],
      responsible: data['responsible'],
      assignee: data['assignee'],
      version: data['version'],
      parent: data['parent'],
    }));
});
