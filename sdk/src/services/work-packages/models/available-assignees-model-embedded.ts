// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _EmbeddedElements7,
  _embeddedElements7,
  _embeddedElements7Request,
  _embeddedElements7Response,
} from './_embedded-elements-7';

/**
 * The shape of the model inside the application code - what the users use
 */
export const availableAssigneesModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(_embeddedElements7).optional(),
  });
});

/**
 *
 * @typedef  {AvailableAssigneesModelEmbedded} availableAssigneesModelEmbedded
 * @property {_EmbeddedElements7[]}
 */
export type AvailableAssigneesModelEmbedded = z.infer<typeof availableAssigneesModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const availableAssigneesModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(_embeddedElements7Response).optional(),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const availableAssigneesModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(_embeddedElements7Request).optional(),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
