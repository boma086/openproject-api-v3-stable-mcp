// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _links1, _links1Request, _links1Response } from './_links-1';
import { _links2, _links2Request, _links2Response } from './_links-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const fileLinkWriteModelLinks = z.lazy(() => {
  return z.union([_links1, _links2]);
});

/**
 *
 * @typedef  {FileLinkWriteModelLinks} fileLinkWriteModelLinks
 * @property {_Links1}
 * @property {_Links2}
 */
export type FileLinkWriteModelLinks = z.infer<typeof fileLinkWriteModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkWriteModelLinksResponse = z.lazy(() => {
  return z.union([_links1Response, _links2Response]);
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkWriteModelLinksRequest = z.lazy(() => {
  return z.union([_links1Request, _links2Request]);
});
