// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const addWatcherRequestUser = z.lazy(() => {
  return z.object({
    href: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AddWatcherRequestUser} addWatcherRequestUser
 * @property {string}
 */
export type AddWatcherRequestUser = z.infer<typeof addWatcherRequestUser>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const addWatcherRequestUserResponse = z.lazy(() => {
  return z
    .object({
      href: z.string().optional(),
    })
    .transform((data) => ({
      href: data['href'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const addWatcherRequestUserRequest = z.lazy(() => {
  return z
    .object({
      href: z.string().optional(),
    })
    .transform((data) => ({
      href: data['href'],
    }));
});
