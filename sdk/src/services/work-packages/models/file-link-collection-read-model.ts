// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  FileLinkCollectionReadModelType,
  fileLinkCollectionReadModelType,
} from './file-link-collection-read-model-type';
import {
  FileLinkCollectionReadModelLinks,
  fileLinkCollectionReadModelLinks,
  fileLinkCollectionReadModelLinksRequest,
  fileLinkCollectionReadModelLinksResponse,
} from './file-link-collection-read-model-links';
import {
  FileLinkCollectionReadModelEmbedded,
  fileLinkCollectionReadModelEmbedded,
  fileLinkCollectionReadModelEmbeddedRequest,
  fileLinkCollectionReadModelEmbeddedResponse,
} from './file-link-collection-read-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const fileLinkCollectionReadModel = z.lazy(() => {
  return z.object({
    _type: fileLinkCollectionReadModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: fileLinkCollectionReadModelLinks,
    pageSize: z.number().gte(0),
    offset: z.number().gte(1),
    _embedded: fileLinkCollectionReadModelEmbedded.optional(),
  });
});

/**
 *
 * @typedef  {FileLinkCollectionReadModel} fileLinkCollectionReadModel
 * @property {FileLinkCollectionReadModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {FileLinkCollectionReadModelLinks}
 * @property {number} - Amount of elements that a response will hold.
 * @property {number} - The page number that is requested from paginated collection.
 * @property {FileLinkCollectionReadModelEmbedded}
 */
export type FileLinkCollectionReadModel = z.infer<typeof fileLinkCollectionReadModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkCollectionReadModelResponse = z.lazy(() => {
  return z
    .object({
      _type: fileLinkCollectionReadModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: fileLinkCollectionReadModelLinksResponse,
      pageSize: z.number().gte(0),
      offset: z.number().gte(1),
      _embedded: fileLinkCollectionReadModelEmbeddedResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      pageSize: data['pageSize'],
      offset: data['offset'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkCollectionReadModelRequest = z.lazy(() => {
  return z
    .object({
      _type: fileLinkCollectionReadModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: fileLinkCollectionReadModelLinksRequest,
      pageSize: z.number().gte(0),
      offset: z.number().gte(1),
      _embedded: fileLinkCollectionReadModelEmbeddedRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      pageSize: data['pageSize'],
      offset: data['offset'],
      _embedded: data['_embedded'],
    }));
});
