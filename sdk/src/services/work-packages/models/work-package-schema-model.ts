// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { WorkPackageSchemaModelType, workPackageSchemaModelType } from './work-package-schema-model-type';
import {
  SchemaPropertyModel,
  schemaPropertyModel,
  schemaPropertyModelRequest,
  schemaPropertyModelResponse,
} from '../../common/schema-property-model';
import {
  WorkPackageSchemaModelLinks,
  workPackageSchemaModelLinks,
  workPackageSchemaModelLinksRequest,
  workPackageSchemaModelLinksResponse,
} from './work-package-schema-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workPackageSchemaModel = z.lazy(() => {
  return z.object({
    _type: workPackageSchemaModelType.optional(),
    _dependencies: z.array(z.string()).optional(),
    _attributeGroups: z.array(z.any()).optional(),
    lockVersion: schemaPropertyModel.optional(),
    id: schemaPropertyModel.optional(),
    subject: schemaPropertyModel.optional(),
    description: schemaPropertyModel.optional(),
    duration: schemaPropertyModel.optional(),
    scheduleManually: schemaPropertyModel.optional(),
    ignoreNonWorkingDays: schemaPropertyModel.optional(),
    startDate: schemaPropertyModel.optional(),
    dueDate: schemaPropertyModel.optional(),
    derivedStartDate: schemaPropertyModel.optional(),
    derivedDueDate: schemaPropertyModel.optional(),
    estimatedTime: schemaPropertyModel.optional(),
    derivedEstimatedTime: schemaPropertyModel.optional(),
    remainingTime: schemaPropertyModel.optional(),
    derivedRemainingTime: schemaPropertyModel.optional(),
    percentageDone: schemaPropertyModel.optional(),
    derivedPercentageDone: schemaPropertyModel.optional(),
    readonly: schemaPropertyModel.optional(),
    createdAt: schemaPropertyModel.optional(),
    updatedAt: schemaPropertyModel.optional(),
    author: schemaPropertyModel.optional(),
    project: schemaPropertyModel.optional(),
    parent: schemaPropertyModel.optional(),
    assignee: schemaPropertyModel.optional(),
    responsible: schemaPropertyModel.optional(),
    type: schemaPropertyModel.optional(),
    status: schemaPropertyModel.optional(),
    category: schemaPropertyModel.optional(),
    version: schemaPropertyModel.optional(),
    priority: schemaPropertyModel.optional(),
    _links: workPackageSchemaModelLinks.optional(),
  });
});

/**
 * A schema for a work package. This schema defines the attributes of a work package.

TODO: Incomplete, needs to be updated with the real behaviour of schemas (when does which attribute appear?).
 * @typedef  {WorkPackageSchemaModel} workPackageSchemaModel - A schema for a work package. This schema defines the attributes of a work package.

TODO: Incomplete, needs to be updated with the real behaviour of schemas (when does which attribute appear?). - A schema for a work package. This schema defines the attributes of a work package.

TODO: Incomplete, needs to be updated with the real behaviour of schemas (when does which attribute appear?).
 * @property {WorkPackageSchemaModelType} 
 * @property {string[]} - TBD
 * @property {any[]} - TBD (WorkPackageFormAttributeGroup)
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {SchemaPropertyModel} 
 * @property {WorkPackageSchemaModelLinks} 
 */
export type WorkPackageSchemaModel = z.infer<typeof workPackageSchemaModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageSchemaModelResponse = z.lazy(() => {
  return z
    .object({
      _type: workPackageSchemaModelType.optional(),
      _dependencies: z.array(z.string()).optional(),
      _attributeGroups: z.array(z.any()).optional(),
      lockVersion: schemaPropertyModelResponse.optional(),
      id: schemaPropertyModelResponse.optional(),
      subject: schemaPropertyModelResponse.optional(),
      description: schemaPropertyModelResponse.optional(),
      duration: schemaPropertyModelResponse.optional(),
      scheduleManually: schemaPropertyModelResponse.optional(),
      ignoreNonWorkingDays: schemaPropertyModelResponse.optional(),
      startDate: schemaPropertyModelResponse.optional(),
      dueDate: schemaPropertyModelResponse.optional(),
      derivedStartDate: schemaPropertyModelResponse.optional(),
      derivedDueDate: schemaPropertyModelResponse.optional(),
      estimatedTime: schemaPropertyModelResponse.optional(),
      derivedEstimatedTime: schemaPropertyModelResponse.optional(),
      remainingTime: schemaPropertyModelResponse.optional(),
      derivedRemainingTime: schemaPropertyModelResponse.optional(),
      percentageDone: schemaPropertyModelResponse.optional(),
      derivedPercentageDone: schemaPropertyModelResponse.optional(),
      readonly: schemaPropertyModelResponse.optional(),
      createdAt: schemaPropertyModelResponse.optional(),
      updatedAt: schemaPropertyModelResponse.optional(),
      author: schemaPropertyModelResponse.optional(),
      project: schemaPropertyModelResponse.optional(),
      parent: schemaPropertyModelResponse.optional(),
      assignee: schemaPropertyModelResponse.optional(),
      responsible: schemaPropertyModelResponse.optional(),
      type: schemaPropertyModelResponse.optional(),
      status: schemaPropertyModelResponse.optional(),
      category: schemaPropertyModelResponse.optional(),
      version: schemaPropertyModelResponse.optional(),
      priority: schemaPropertyModelResponse.optional(),
      _links: workPackageSchemaModelLinksResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      _dependencies: data['_dependencies'],
      _attributeGroups: data['_attributeGroups'],
      lockVersion: data['lockVersion'],
      id: data['id'],
      subject: data['subject'],
      description: data['description'],
      duration: data['duration'],
      scheduleManually: data['scheduleManually'],
      ignoreNonWorkingDays: data['ignoreNonWorkingDays'],
      startDate: data['startDate'],
      dueDate: data['dueDate'],
      derivedStartDate: data['derivedStartDate'],
      derivedDueDate: data['derivedDueDate'],
      estimatedTime: data['estimatedTime'],
      derivedEstimatedTime: data['derivedEstimatedTime'],
      remainingTime: data['remainingTime'],
      derivedRemainingTime: data['derivedRemainingTime'],
      percentageDone: data['percentageDone'],
      derivedPercentageDone: data['derivedPercentageDone'],
      readonly: data['readonly'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      author: data['author'],
      project: data['project'],
      parent: data['parent'],
      assignee: data['assignee'],
      responsible: data['responsible'],
      type: data['type'],
      status: data['status'],
      category: data['category'],
      version: data['version'],
      priority: data['priority'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageSchemaModelRequest = z.lazy(() => {
  return z
    .object({
      _type: workPackageSchemaModelType.optional(),
      _dependencies: z.array(z.string()).optional(),
      _attributeGroups: z.array(z.any()).optional(),
      lockVersion: schemaPropertyModelRequest.optional(),
      id: schemaPropertyModelRequest.optional(),
      subject: schemaPropertyModelRequest.optional(),
      description: schemaPropertyModelRequest.optional(),
      duration: schemaPropertyModelRequest.optional(),
      scheduleManually: schemaPropertyModelRequest.optional(),
      ignoreNonWorkingDays: schemaPropertyModelRequest.optional(),
      startDate: schemaPropertyModelRequest.optional(),
      dueDate: schemaPropertyModelRequest.optional(),
      derivedStartDate: schemaPropertyModelRequest.optional(),
      derivedDueDate: schemaPropertyModelRequest.optional(),
      estimatedTime: schemaPropertyModelRequest.optional(),
      derivedEstimatedTime: schemaPropertyModelRequest.optional(),
      remainingTime: schemaPropertyModelRequest.optional(),
      derivedRemainingTime: schemaPropertyModelRequest.optional(),
      percentageDone: schemaPropertyModelRequest.optional(),
      derivedPercentageDone: schemaPropertyModelRequest.optional(),
      readonly: schemaPropertyModelRequest.optional(),
      createdAt: schemaPropertyModelRequest.optional(),
      updatedAt: schemaPropertyModelRequest.optional(),
      author: schemaPropertyModelRequest.optional(),
      project: schemaPropertyModelRequest.optional(),
      parent: schemaPropertyModelRequest.optional(),
      assignee: schemaPropertyModelRequest.optional(),
      responsible: schemaPropertyModelRequest.optional(),
      type: schemaPropertyModelRequest.optional(),
      status: schemaPropertyModelRequest.optional(),
      category: schemaPropertyModelRequest.optional(),
      version: schemaPropertyModelRequest.optional(),
      priority: schemaPropertyModelRequest.optional(),
      _links: workPackageSchemaModelLinksRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      _dependencies: data['_dependencies'],
      _attributeGroups: data['_attributeGroups'],
      lockVersion: data['lockVersion'],
      id: data['id'],
      subject: data['subject'],
      description: data['description'],
      duration: data['duration'],
      scheduleManually: data['scheduleManually'],
      ignoreNonWorkingDays: data['ignoreNonWorkingDays'],
      startDate: data['startDate'],
      dueDate: data['dueDate'],
      derivedStartDate: data['derivedStartDate'],
      derivedDueDate: data['derivedDueDate'],
      estimatedTime: data['estimatedTime'],
      derivedEstimatedTime: data['derivedEstimatedTime'],
      remainingTime: data['remainingTime'],
      derivedRemainingTime: data['derivedRemainingTime'],
      percentageDone: data['percentageDone'],
      derivedPercentageDone: data['derivedPercentageDone'],
      readonly: data['readonly'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      author: data['author'],
      project: data['project'],
      parent: data['parent'],
      assignee: data['assignee'],
      responsible: data['responsible'],
      type: data['type'],
      status: data['status'],
      category: data['category'],
      version: data['version'],
      priority: data['priority'],
      _links: data['_links'],
    }));
});
