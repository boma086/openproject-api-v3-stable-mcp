// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  WorkPackageModel,
  workPackageModel,
  workPackageModelRequest,
  workPackageModelResponse,
} from '../../common/work-package-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workPackagesModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(workPackageModel),
  });
});

/**
 *
 * @typedef  {WorkPackagesModelEmbedded} workPackagesModelEmbedded
 * @property {WorkPackageModel[]}
 */
export type WorkPackagesModelEmbedded = z.infer<typeof workPackagesModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackagesModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(workPackageModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackagesModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(workPackageModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
