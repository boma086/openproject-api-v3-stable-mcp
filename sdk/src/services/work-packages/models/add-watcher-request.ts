// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  AddWatcherRequestUser,
  addWatcherRequestUser,
  addWatcherRequestUserRequest,
  addWatcherRequestUserResponse,
} from './add-watcher-request-user';

/**
 * The shape of the model inside the application code - what the users use
 */
export const addWatcherRequest = z.lazy(() => {
  return z.object({
    user: addWatcherRequestUser.optional(),
  });
});

/**
 *
 * @typedef  {AddWatcherRequest} addWatcherRequest
 * @property {AddWatcherRequestUser}
 */
export type AddWatcherRequest = z.infer<typeof addWatcherRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const addWatcherRequestResponse = z.lazy(() => {
  return z
    .object({
      user: addWatcherRequestUserResponse.optional(),
    })
    .transform((data) => ({
      user: data['user'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const addWatcherRequestRequest = z.lazy(() => {
  return z
    .object({
      user: addWatcherRequestUserRequest.optional(),
    })
    .transform((data) => ({
      user: data['user'],
    }));
});
