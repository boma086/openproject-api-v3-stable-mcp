// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _LinksShowUser3,
  _linksShowUser3,
  _linksShowUser3Request,
  _linksShowUser3Response,
} from './_links-show-user-3';
import {
  _LinksUpdateImmediately12,
  _linksUpdateImmediately12,
  _linksUpdateImmediately12Request,
  _linksUpdateImmediately12Response,
} from './_links-update-immediately-12';
import { _LinksLock2, _linksLock2, _linksLock2Request, _linksLock2Response } from './_links-lock-2';
import { _LinksUnlock2, _linksUnlock2, _linksUnlock2Request, _linksUnlock2Response } from './_links-unlock-2';
import { _LinksDelete14, _linksDelete14, _linksDelete14Request, _linksDelete14Response } from './_links-delete-14';
import {
  _LinksAuthSource2,
  _linksAuthSource2,
  _linksAuthSource2Request,
  _linksAuthSource2Response,
} from './_links-auth-source-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const elementsLinks5 = z.lazy(() => {
  return z.object({
    showUser: _linksShowUser3.optional(),
    updateImmediately: _linksUpdateImmediately12.optional(),
    lock: _linksLock2.optional(),
    unlock: _linksUnlock2.optional(),
    delete: _linksDelete14.optional(),
    authSource: _linksAuthSource2.optional(),
  });
});

/**
 * 
 * @typedef  {ElementsLinks5} elementsLinks5   
 * @property {_LinksShowUser3} - A relative path to show the user in the web application.

# Condition

- User is not a new record
- User is not `locked`
 * @property {_LinksUpdateImmediately12} - A link to update the user resource.

# Conditions

- `admin`
 * @property {_LinksLock2} - Restrict the user from logging in and performing any actions.

# Conditions

- User is not locked
- `admin`
 * @property {_LinksUnlock2} - Allow a locked user to login and act again.

# Conditions

- User is not locked
- `admin`
 * @property {_LinksDelete14} - Permanently remove a user from the instance

# Conditions

either:
  - `admin`
  - Setting `users_deletable_by_admin` is set
or:
  - User is self
  - Setting `users_deletable_by_self` is set
 * @property {_LinksAuthSource2} - Permanently remove a user from the instance

# Conditions

- LDAP authentication configured
- `admin`
 */
export type ElementsLinks5 = z.infer<typeof elementsLinks5>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks5Response = z.lazy(() => {
  return z
    .object({
      showUser: _linksShowUser3Response.optional(),
      updateImmediately: _linksUpdateImmediately12Response.optional(),
      lock: _linksLock2Response.optional(),
      unlock: _linksUnlock2Response.optional(),
      delete: _linksDelete14Response.optional(),
      authSource: _linksAuthSource2Response.optional(),
    })
    .transform((data) => ({
      showUser: data['showUser'],
      updateImmediately: data['updateImmediately'],
      lock: data['lock'],
      unlock: data['unlock'],
      delete: data['delete'],
      authSource: data['authSource'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks5Request = z.lazy(() => {
  return z
    .object({
      showUser: _linksShowUser3Request.optional(),
      updateImmediately: _linksUpdateImmediately12Request.optional(),
      lock: _linksLock2Request.optional(),
      unlock: _linksUnlock2Request.optional(),
      delete: _linksDelete14Request.optional(),
      authSource: _linksAuthSource2Request.optional(),
    })
    .transform((data) => ({
      showUser: data['showUser'],
      updateImmediately: data['updateImmediately'],
      lock: data['lock'],
      unlock: data['unlock'],
      delete: data['delete'],
      authSource: data['authSource'],
    }));
});
