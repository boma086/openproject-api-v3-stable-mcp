// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { WorkPackagesModelType, workPackagesModelType } from './work-packages-model-type';
import {
  WorkPackagesModelLinks,
  workPackagesModelLinks,
  workPackagesModelLinksRequest,
  workPackagesModelLinksResponse,
} from './work-packages-model-links';
import {
  WorkPackagesModelEmbedded,
  workPackagesModelEmbedded,
  workPackagesModelEmbeddedRequest,
  workPackagesModelEmbeddedResponse,
} from './work-packages-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workPackagesModel = z.lazy(() => {
  return z.object({
    _type: workPackagesModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: workPackagesModelLinks,
    _embedded: workPackagesModelEmbedded,
  });
});

/**
 *
 * @typedef  {WorkPackagesModel} workPackagesModel
 * @property {WorkPackagesModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {WorkPackagesModelLinks}
 * @property {WorkPackagesModelEmbedded}
 */
export type WorkPackagesModel = z.infer<typeof workPackagesModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackagesModelResponse = z.lazy(() => {
  return z
    .object({
      _type: workPackagesModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: workPackagesModelLinksResponse,
      _embedded: workPackagesModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackagesModelRequest = z.lazy(() => {
  return z
    .object({
      _type: workPackagesModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: workPackagesModelLinksRequest,
      _embedded: workPackagesModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
