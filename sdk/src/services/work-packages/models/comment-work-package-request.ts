// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { Comment, comment, commentRequest, commentResponse } from './comment';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commentWorkPackageRequest = z.lazy(() => {
  return z.object({
    comment: comment.optional(),
  });
});

/**
 *
 * @typedef  {CommentWorkPackageRequest} commentWorkPackageRequest
 * @property {Comment}
 */
export type CommentWorkPackageRequest = z.infer<typeof commentWorkPackageRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commentWorkPackageRequestResponse = z.lazy(() => {
  return z
    .object({
      comment: commentResponse.optional(),
    })
    .transform((data) => ({
      comment: data['comment'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commentWorkPackageRequestRequest = z.lazy(() => {
  return z
    .object({
      comment: commentRequest.optional(),
    })
    .transform((data) => ({
      comment: data['comment'],
    }));
});
