// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ProjectModel, projectModel, projectModelRequest, projectModelResponse } from '../../common/project-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const timeEntryActivityModelEmbedded = z.lazy(() => {
  return z.object({
    projects: z.array(projectModel),
  });
});

/**
 *
 * @typedef  {TimeEntryActivityModelEmbedded} timeEntryActivityModelEmbedded
 * @property {ProjectModel[]}
 */
export type TimeEntryActivityModelEmbedded = z.infer<typeof timeEntryActivityModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const timeEntryActivityModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      projects: z.array(projectModelResponse),
    })
    .transform((data) => ({
      projects: data['projects'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const timeEntryActivityModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      projects: z.array(projectModelRequest),
    })
    .transform((data) => ({
      projects: data['projects'],
    }));
});
