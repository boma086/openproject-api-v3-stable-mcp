// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf73, _linksSelf73, _linksSelf73Request, _linksSelf73Response } from './_links-self-73';
import { Projects, projects, projectsRequest, projectsResponse } from './projects';

/**
 * The shape of the model inside the application code - what the users use
 */
export const timeEntryActivityModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf73,
    projects: z.array(projects),
  });
});

/**
 * 
 * @typedef  {TimeEntryActivityModelLinks} timeEntryActivityModelLinks   
 * @property {_LinksSelf73} - This time entry activity

``Resource``: TimeEntriesActivity
 * @property {Projects[]} 
 */
export type TimeEntryActivityModelLinks = z.infer<typeof timeEntryActivityModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const timeEntryActivityModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf73Response,
      projects: z.array(projectsResponse),
    })
    .transform((data) => ({
      self: data['self'],
      projects: data['projects'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const timeEntryActivityModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf73Request,
      projects: z.array(projectsRequest),
    })
    .transform((data) => ({
      self: data['self'],
      projects: data['projects'],
    }));
});
