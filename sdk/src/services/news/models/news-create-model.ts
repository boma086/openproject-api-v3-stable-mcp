// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  NewsCreateModelDescription,
  newsCreateModelDescription,
  newsCreateModelDescriptionRequest,
  newsCreateModelDescriptionResponse,
} from './news-create-model-description';
import {
  NewsCreateModelLinks,
  newsCreateModelLinks,
  newsCreateModelLinksRequest,
  newsCreateModelLinksResponse,
} from './news-create-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const newsCreateModel = z.lazy(() => {
  return z.object({
    title: z.string().optional(),
    summary: z.string().optional(),
    description: newsCreateModelDescription.optional(),
    _links: newsCreateModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {NewsCreateModel} newsCreateModel
 * @property {string} - The headline of the news
 * @property {string} - A short summary
 * @property {NewsCreateModelDescription} - The main body of the news with all the details
 * @property {NewsCreateModelLinks}
 */
export type NewsCreateModel = z.infer<typeof newsCreateModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const newsCreateModelResponse = z.lazy(() => {
  return z
    .object({
      title: z.string().optional(),
      summary: z.string().optional(),
      description: newsCreateModelDescriptionResponse.optional(),
      _links: newsCreateModelLinksResponse.optional(),
    })
    .transform((data) => ({
      title: data['title'],
      summary: data['summary'],
      description: data['description'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const newsCreateModelRequest = z.lazy(() => {
  return z
    .object({
      title: z.string().optional(),
      summary: z.string().optional(),
      description: newsCreateModelDescriptionRequest.optional(),
      _links: newsCreateModelLinksRequest.optional(),
    })
    .transform((data) => ({
      title: data['title'],
      summary: data['summary'],
      description: data['description'],
      _links: data['_links'],
    }));
});
