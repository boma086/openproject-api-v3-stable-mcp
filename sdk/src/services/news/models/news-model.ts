// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { NewsModelLinks, newsModelLinks, newsModelLinksRequest, newsModelLinksResponse } from './news-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const newsModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    title: z.string().optional(),
    summary: z.string().optional(),
    description: z.string().optional(),
    createdAt: z.string().optional(),
    _links: newsModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {NewsModel} newsModel
 * @property {number} - News' id
 * @property {string} - The headline of the news
 * @property {string} - A short summary
 * @property {string} - The main body of the news with all the details
 * @property {string} - The time the news was created at
 * @property {NewsModelLinks}
 */
export type NewsModel = z.infer<typeof newsModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const newsModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      title: z.string().optional(),
      summary: z.string().optional(),
      description: z.string().optional(),
      createdAt: z.string().optional(),
      _links: newsModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      title: data['title'],
      summary: data['summary'],
      description: data['description'],
      createdAt: data['createdAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const newsModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      title: z.string().optional(),
      summary: z.string().optional(),
      description: z.string().optional(),
      createdAt: z.string().optional(),
      _links: newsModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      title: data['title'],
      summary: data['summary'],
      description: data['description'],
      createdAt: data['createdAt'],
      _links: data['_links'],
    }));
});
