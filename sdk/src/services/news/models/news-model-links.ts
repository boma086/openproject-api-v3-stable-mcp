// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf45, _linksSelf45, _linksSelf45Request, _linksSelf45Response } from './_links-self-45';
import { _LinksProject11, _linksProject11, _linksProject11Request, _linksProject11Response } from './_links-project-11';
import { _LinksAuthor7, _linksAuthor7, _linksAuthor7Request, _linksAuthor7Response } from './_links-author-7';
import {
  _LinksUpdateImmediately8,
  _linksUpdateImmediately8,
  _linksUpdateImmediately8Request,
  _linksUpdateImmediately8Response,
} from './_links-update-immediately-8';
import { _LinksDelete11, _linksDelete11, _linksDelete11Request, _linksDelete11Response } from './_links-delete-11';

/**
 * The shape of the model inside the application code - what the users use
 */
export const newsModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf45,
    project: _linksProject11,
    author: _linksAuthor7,
    updateImmediately: _linksUpdateImmediately8.optional(),
    delete: _linksDelete11.optional(),
  });
});

/**
 * 
 * @typedef  {NewsModelLinks} newsModelLinks   
 * @property {_LinksSelf45} - This news

``Resource``: News
 * @property {_LinksProject11} - The project the news is situated in

``Resource``: Project
 * @property {_LinksAuthor7} - The user having created the news

``Resource``: User
 * @property {_LinksUpdateImmediately8} - Directly perform edits on the news

``Permission`` manage news
 * @property {_LinksDelete11} - Delete the news

``Permission`` manage news
 */
export type NewsModelLinks = z.infer<typeof newsModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const newsModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf45Response,
      project: _linksProject11Response,
      author: _linksAuthor7Response,
      updateImmediately: _linksUpdateImmediately8Response.optional(),
      delete: _linksDelete11Response.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      project: data['project'],
      author: data['author'],
      updateImmediately: data['updateImmediately'],
      delete: data['delete'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const newsModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf45Request,
      project: _linksProject11Request,
      author: _linksAuthor7Request,
      updateImmediately: _linksUpdateImmediately8Request.optional(),
      delete: _linksDelete11Request.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      project: data['project'],
      author: data['author'],
      updateImmediately: data['updateImmediately'],
      delete: data['delete'],
    }));
});
