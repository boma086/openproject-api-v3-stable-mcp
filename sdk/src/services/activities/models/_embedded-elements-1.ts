// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  ElementsDescription1,
  elementsDescription1,
  elementsDescription1Request,
  elementsDescription1Response,
} from './elements-description-1';
import { ElementsLinks1, elementsLinks1, elementsLinks1Request, elementsLinks1Response } from './elements-links-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _embeddedElements1 = z.lazy(() => {
  return z.object({
    id: z.number().gte(1).optional(),
    title: z.string(),
    fileName: z.string(),
    fileSize: z.number().gte(0).optional(),
    description: elementsDescription1,
    contentType: z.string(),
    digest: z.string(),
    createdAt: z.string(),
    _links: elementsLinks1.optional(),
  });
});

/**
 * Collection of Attachments
 * @typedef  {_EmbeddedElements1} _embeddedElements1 - Collection of Attachments - Collection of Attachments
 * @property {number} - Attachment's id
 * @property {string} - The name of the file
 * @property {string} - The name of the uploaded file
 * @property {number} - The size of the uploaded file in Bytes
 * @property {ElementsDescription1} - A user provided description of the file
 * @property {string} - The files MIME-Type as determined by the server
 * @property {string} - A checksum for the files content
 * @property {string} - Time of creation
 * @property {ElementsLinks1}
 */
export type _EmbeddedElements1 = z.infer<typeof _embeddedElements1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements1Response = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      title: z.string(),
      fileName: z.string(),
      fileSize: z.number().gte(0).optional(),
      description: elementsDescription1Response,
      contentType: z.string(),
      digest: z.string(),
      createdAt: z.string(),
      _links: elementsLinks1Response.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      title: data['title'],
      fileName: data['fileName'],
      fileSize: data['fileSize'],
      description: data['description'],
      contentType: data['contentType'],
      digest: data['digest'],
      createdAt: data['createdAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements1Request = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      title: z.string(),
      fileName: z.string(),
      fileSize: z.number().gte(0).optional(),
      description: elementsDescription1Request,
      contentType: z.string(),
      digest: z.string(),
      createdAt: z.string(),
      _links: elementsLinks1Request.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      title: data['title'],
      fileName: data['fileName'],
      fileSize: data['fileSize'],
      description: data['description'],
      contentType: data['contentType'],
      digest: data['digest'],
      createdAt: data['createdAt'],
      _links: data['_links'],
    }));
});
