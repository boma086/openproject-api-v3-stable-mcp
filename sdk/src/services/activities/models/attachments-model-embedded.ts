// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _EmbeddedElements2,
  _embeddedElements2,
  _embeddedElements2Request,
  _embeddedElements2Response,
} from './_embedded-elements-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const attachmentsModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(_embeddedElements2).optional(),
  });
});

/**
 *
 * @typedef  {AttachmentsModelEmbedded} attachmentsModelEmbedded
 * @property {_EmbeddedElements2[]}
 */
export type AttachmentsModelEmbedded = z.infer<typeof attachmentsModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const attachmentsModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(_embeddedElements2Response).optional(),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const attachmentsModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(_embeddedElements2Request).optional(),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
