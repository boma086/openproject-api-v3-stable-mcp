// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _EmbeddedAttachments,
  _embeddedAttachments,
  _embeddedAttachmentsRequest,
  _embeddedAttachmentsResponse,
} from './_embedded-attachments';
import {
  _EmbeddedWorkPackage,
  _embeddedWorkPackage,
  _embeddedWorkPackageRequest,
  _embeddedWorkPackageResponse,
} from './_embedded-work-package';

/**
 * The shape of the model inside the application code - what the users use
 */
export const activityModelEmbedded = z.lazy(() => {
  return z.object({
    attachments: _embeddedAttachments.optional(),
    workPackage: _embeddedWorkPackage.optional(),
  });
});

/**
 * 
 * @typedef  {ActivityModelEmbedded} activityModelEmbedded   
 * @property {_EmbeddedAttachments} - Collection of attachments for this activity
 * @property {_EmbeddedWorkPackage} - The work package this activity belongs to

# Conditions

Only embedded when the `journable` of the activity is a work package
 */
export type ActivityModelEmbedded = z.infer<typeof activityModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const activityModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      attachments: _embeddedAttachmentsResponse.optional(),
      workPackage: _embeddedWorkPackageResponse.optional(),
    })
    .transform((data) => ({
      attachments: data['attachments'],
      workPackage: data['workPackage'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const activityModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      attachments: _embeddedAttachmentsRequest.optional(),
      workPackage: _embeddedWorkPackageRequest.optional(),
    })
    .transform((data) => ({
      attachments: data['attachments'],
      workPackage: data['workPackage'],
    }));
});
