// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { WorkPackageType, workPackageType } from './work-package-type';
import {
  WorkPackageDescription,
  workPackageDescription,
  workPackageDescriptionRequest,
  workPackageDescriptionResponse,
} from './work-package-description';
import {
  WorkPackageLinks,
  workPackageLinks,
  workPackageLinksRequest,
  workPackageLinksResponse,
} from './work-package-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _embeddedWorkPackage = z.lazy(() => {
  return z.object({
    id: z.number().gte(1).optional(),
    lockVersion: z.number().optional(),
    subject: z.string(),
    _type: workPackageType.optional(),
    description: workPackageDescription.optional(),
    scheduleManually: z.boolean().optional(),
    readonly: z.boolean().optional(),
    startDate: z.string().optional(),
    dueDate: z.string().optional(),
    date: z.string().optional(),
    derivedStartDate: z.string().optional(),
    derivedDueDate: z.string().optional(),
    duration: z.string().optional(),
    estimatedTime: z.string().optional(),
    derivedEstimatedTime: z.string().optional(),
    ignoreNonWorkingDays: z.boolean().optional(),
    spentTime: z.string().optional(),
    percentageDone: z.number().gte(0).lte(100).optional(),
    derivedPercentageDone: z.number().gte(0).lte(100).optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    _links: workPackageLinks,
  });
});

/**
 * The work package this activity belongs to

# Conditions

Only embedded when the `journable` of the activity is a work package
 * @typedef  {_EmbeddedWorkPackage} _embeddedWorkPackage - The work package this activity belongs to

# Conditions

Only embedded when the `journable` of the activity is a work package - The work package this activity belongs to

# Conditions

Only embedded when the `journable` of the activity is a work package
 * @property {number} - Work package id
 * @property {number} - The version of the item as used for optimistic locking
 * @property {string} - Work package subject
 * @property {WorkPackageType} 
 * @property {WorkPackageDescription} - The work package description
 * @property {boolean} - Uses manual scheduling mode when true (default). Uses automatic scheduling
mode when false. Can be automatic only when predecessors or children are
present.
 * @property {boolean} - If true, the work package is in a readonly status so with the exception of the status, no other property can be altered.
 * @property {string} - Scheduled beginning of a work package
 * @property {string} - Scheduled end of a work package
 * @property {string} - Date on which a milestone is achieved
 * @property {string} - Similar to start date but is not set by a client but rather deduced by the work packages' descendants. If manual scheduleManually is active, the two dates can deviate.
 * @property {string} - Similar to due date but is not set by a client but rather deduced by the work packages' descendants. If manual scheduleManually is active, the two dates can deviate.
 * @property {string} - ``(NOT IMPLEMENTED)`` The amount of time in hours the work package needs to be completed.
Not available for milestone type of work packages.
 * @property {string} - Time a work package likely needs to be completed excluding its descendants
 * @property {string} - Time a work package likely needs to be completed including its descendants
 * @property {boolean} - ``(NOT IMPLEMENTED)`` When scheduling, whether or not to ignore the non working days being defined.
A work package with the flag set to true will be allowed to be scheduled to a non working day.
 * @property {string} - The time booked for this work package by users working on it

# Conditions

``Permission`` view time entries
 * @property {number} - Amount of total completion for a work package
 * @property {number} - Amount of total completion for a work package derived from itself and its descendant work packages
 * @property {string} - Time of creation. Can be writable by admins with the `apiv3_write_readonly_attributes` setting enabled.
 * @property {string} - Time of the most recent change to the work package.
 * @property {WorkPackageLinks} 
 */
export type _EmbeddedWorkPackage = z.infer<typeof _embeddedWorkPackage>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedWorkPackageResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      lockVersion: z.number().optional(),
      subject: z.string(),
      _type: workPackageType.optional(),
      description: workPackageDescriptionResponse.optional(),
      scheduleManually: z.boolean().optional(),
      readonly: z.boolean().optional(),
      startDate: z.string().optional(),
      dueDate: z.string().optional(),
      date: z.string().optional(),
      derivedStartDate: z.string().optional(),
      derivedDueDate: z.string().optional(),
      duration: z.string().optional(),
      estimatedTime: z.string().optional(),
      derivedEstimatedTime: z.string().optional(),
      ignoreNonWorkingDays: z.boolean().optional(),
      spentTime: z.string().optional(),
      percentageDone: z.number().gte(0).lte(100).optional(),
      derivedPercentageDone: z.number().gte(0).lte(100).optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: workPackageLinksResponse,
    })
    .transform((data) => ({
      id: data['id'],
      lockVersion: data['lockVersion'],
      subject: data['subject'],
      _type: data['_type'],
      description: data['description'],
      scheduleManually: data['scheduleManually'],
      readonly: data['readonly'],
      startDate: data['startDate'],
      dueDate: data['dueDate'],
      date: data['date'],
      derivedStartDate: data['derivedStartDate'],
      derivedDueDate: data['derivedDueDate'],
      duration: data['duration'],
      estimatedTime: data['estimatedTime'],
      derivedEstimatedTime: data['derivedEstimatedTime'],
      ignoreNonWorkingDays: data['ignoreNonWorkingDays'],
      spentTime: data['spentTime'],
      percentageDone: data['percentageDone'],
      derivedPercentageDone: data['derivedPercentageDone'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedWorkPackageRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      lockVersion: z.number().optional(),
      subject: z.string(),
      _type: workPackageType.optional(),
      description: workPackageDescriptionRequest.optional(),
      scheduleManually: z.boolean().optional(),
      readonly: z.boolean().optional(),
      startDate: z.string().optional(),
      dueDate: z.string().optional(),
      date: z.string().optional(),
      derivedStartDate: z.string().optional(),
      derivedDueDate: z.string().optional(),
      duration: z.string().optional(),
      estimatedTime: z.string().optional(),
      derivedEstimatedTime: z.string().optional(),
      ignoreNonWorkingDays: z.boolean().optional(),
      spentTime: z.string().optional(),
      percentageDone: z.number().gte(0).lte(100).optional(),
      derivedPercentageDone: z.number().gte(0).lte(100).optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: workPackageLinksRequest,
    })
    .transform((data) => ({
      id: data['id'],
      lockVersion: data['lockVersion'],
      subject: data['subject'],
      _type: data['_type'],
      description: data['description'],
      scheduleManually: data['scheduleManually'],
      readonly: data['readonly'],
      startDate: data['startDate'],
      dueDate: data['dueDate'],
      date: data['date'],
      derivedStartDate: data['derivedStartDate'],
      derivedDueDate: data['derivedDueDate'],
      duration: data['duration'],
      estimatedTime: data['estimatedTime'],
      derivedEstimatedTime: data['derivedEstimatedTime'],
      ignoreNonWorkingDays: data['ignoreNonWorkingDays'],
      spentTime: data['spentTime'],
      percentageDone: data['percentageDone'],
      derivedPercentageDone: data['derivedPercentageDone'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});
