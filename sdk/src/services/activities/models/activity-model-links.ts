// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf5, _linksSelf5, _linksSelf5Request, _linksSelf5Response } from './_links-self-5';
import {
  _LinksWorkPackage1,
  _linksWorkPackage1,
  _linksWorkPackage1Request,
  _linksWorkPackage1Response,
} from './_links-work-package-1';
import { _LinksUser2, _linksUser2, _linksUser2Request, _linksUser2Response } from './_links-user-2';
import { _LinksUpdate2, _linksUpdate2, _linksUpdate2Request, _linksUpdate2Response } from './_links-update-2';
import {
  _LinksAttachments2,
  _linksAttachments2,
  _linksAttachments2Request,
  _linksAttachments2Response,
} from './_links-attachments-2';
import {
  _LinksAddAttachment2,
  _linksAddAttachment2,
  _linksAddAttachment2Request,
  _linksAddAttachment2Response,
} from './_links-add-attachment-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const activityModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf5.optional(),
    workPackage: _linksWorkPackage1.optional(),
    user: _linksUser2.optional(),
    update: _linksUpdate2.optional(),
    attachments: _linksAttachments2.optional(),
    addAttachment: _linksAddAttachment2.optional(),
  });
});

/**
 * 
 * @typedef  {ActivityModelLinks} activityModelLinks   
 * @property {_LinksSelf5} - This activity

``Resource``: Activity
 * @property {_LinksWorkPackage1} - The work package this activity belongs to

``Resource``: WorkPackage
 * @property {_LinksUser2} - The user who created this activity

``Resource``: Principal
 * @property {_LinksUpdate2} - Update this activity
 * @property {_LinksAttachments2} - The attachment collection of this activity

``Resource``: Attachments
 * @property {_LinksAddAttachment2} - Attach a file to the activity

# Conditions

``Permissions``:
- `add_work_package_comments`
- for internal comments: `add_internal_comments`
 */
export type ActivityModelLinks = z.infer<typeof activityModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const activityModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf5Response.optional(),
      workPackage: _linksWorkPackage1Response.optional(),
      user: _linksUser2Response.optional(),
      update: _linksUpdate2Response.optional(),
      attachments: _linksAttachments2Response.optional(),
      addAttachment: _linksAddAttachment2Response.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      workPackage: data['workPackage'],
      user: data['user'],
      update: data['update'],
      attachments: data['attachments'],
      addAttachment: data['addAttachment'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const activityModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf5Request.optional(),
      workPackage: _linksWorkPackage1Request.optional(),
      user: _linksUser2Request.optional(),
      update: _linksUpdate2Request.optional(),
      attachments: _linksAttachments2Request.optional(),
      addAttachment: _linksAddAttachment2Request.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      workPackage: data['workPackage'],
      user: data['user'],
      update: data['update'],
      attachments: data['attachments'],
      addAttachment: data['addAttachment'],
    }));
});
