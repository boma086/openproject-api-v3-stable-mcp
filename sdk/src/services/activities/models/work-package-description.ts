// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { DescriptionFormat2, descriptionFormat2 } from './description-format-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workPackageDescription = z.lazy(() => {
  return z.object({
    format: descriptionFormat2,
    raw: z.string().optional(),
    html: z.string().optional(),
  });
});

/**
 * The work package description
 * @typedef  {WorkPackageDescription} workPackageDescription - The work package description - The work package description
 * @property {DescriptionFormat2} - Indicates the formatting language of the raw text
 * @property {string} - The raw text, as entered by the user
 * @property {string} - The text converted to HTML according to the format
 */
export type WorkPackageDescription = z.infer<typeof workPackageDescription>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageDescriptionResponse = z.lazy(() => {
  return z
    .object({
      format: descriptionFormat2,
      raw: z.string().optional(),
      html: z.string().optional(),
    })
    .transform((data) => ({
      format: data['format'],
      raw: data['raw'],
      html: data['html'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workPackageDescriptionRequest = z.lazy(() => {
  return z
    .object({
      format: descriptionFormat2,
      raw: z.string().optional(),
      html: z.string().optional(),
    })
    .transform((data) => ({
      format: data['format'],
      raw: data['raw'],
      html: data['html'],
    }));
});
