// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const metadata = z.lazy(() => {
  return z.object({
    fileName: z.string().optional(),
  });
});

/**
 *
 * @typedef  {Metadata} metadata
 * @property {string}
 */
export type Metadata = z.infer<typeof metadata>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const metadataResponse = z.lazy(() => {
  return z
    .object({
      fileName: z.string().optional(),
    })
    .transform((data) => ({
      fileName: data['fileName'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const metadataRequest = z.lazy(() => {
  return z
    .object({
      fileName: z.string().optional(),
    })
    .transform((data) => ({
      fileName: data['fileName'],
    }));
});
