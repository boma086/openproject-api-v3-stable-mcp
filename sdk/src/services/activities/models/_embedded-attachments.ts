// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { AttachmentsType, attachmentsType } from './attachments-type';
import {
  AttachmentsLinks,
  attachmentsLinks,
  attachmentsLinksRequest,
  attachmentsLinksResponse,
} from './attachments-links';
import {
  AttachmentsEmbedded,
  attachmentsEmbedded,
  attachmentsEmbeddedRequest,
  attachmentsEmbeddedResponse,
} from './attachments-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _embeddedAttachments = z.lazy(() => {
  return z.object({
    _type: attachmentsType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: attachmentsLinks,
    _embedded: attachmentsEmbedded,
  });
});

/**
 * Collection of attachments for this activity
 * @typedef  {_EmbeddedAttachments} _embeddedAttachments - Collection of attachments for this activity - Collection of attachments for this activity
 * @property {AttachmentsType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {AttachmentsLinks}
 * @property {AttachmentsEmbedded}
 */
export type _EmbeddedAttachments = z.infer<typeof _embeddedAttachments>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedAttachmentsResponse = z.lazy(() => {
  return z
    .object({
      _type: attachmentsType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: attachmentsLinksResponse,
      _embedded: attachmentsEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedAttachmentsRequest = z.lazy(() => {
  return z
    .object({
      _type: attachmentsType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: attachmentsLinksRequest,
      _embedded: attachmentsEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
