// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { Metadata, metadata, metadataRequest, metadataResponse } from './metadata';

/**
 * The shape of the model inside the application code - what the users use
 */
export const fileUploadForm = z.lazy(() => {
  return z.object({
    metadata: metadata.optional(),
    file: z.instanceof(ArrayBuffer).optional(),
  });
});

/**
 *
 * @typedef  {FileUploadForm} fileUploadForm
 * @property {Metadata}
 * @property {ArrayBuffer}
 */
export type FileUploadForm = z.infer<typeof fileUploadForm>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const fileUploadFormResponse = z.lazy(() => {
  return z
    .object({
      metadata: metadataResponse.optional(),
      file: z.instanceof(ArrayBuffer).optional(),
    })
    .transform((data) => ({
      metadata: data['metadata'],
      file: data['file'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const fileUploadFormRequest = z.lazy(() => {
  return z
    .object({
      metadata: metadataRequest.optional(),
      file: z.instanceof(ArrayBuffer).optional(),
    })
    .transform((data) => ({
      metadata: data['metadata'],
      file: data['file'],
    }));
});
