// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { Query, query, queryRequest, queryResponse } from './query';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createViewsRequestLinks = z.lazy(() => {
  return z.object({
    query: query.optional(),
  });
});

/**
 *
 * @typedef  {CreateViewsRequestLinks} createViewsRequestLinks
 * @property {Query}
 */
export type CreateViewsRequestLinks = z.infer<typeof createViewsRequestLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createViewsRequestLinksResponse = z.lazy(() => {
  return z
    .object({
      query: queryResponse.optional(),
    })
    .transform((data) => ({
      query: data['query'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createViewsRequestLinksRequest = z.lazy(() => {
  return z
    .object({
      query: queryRequest.optional(),
    })
    .transform((data) => ({
      query: data['query'],
    }));
});
