// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf67, _linksSelf67, _linksSelf67Request, _linksSelf67Response } from './_links-self-67';

/**
 * The shape of the model inside the application code - what the users use
 */
export const relationCollectionModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf67,
  });
});

/**
 * 
 * @typedef  {RelationCollectionModelLinks} relationCollectionModelLinks   
 * @property {_LinksSelf67} - This relation collection

``Resource``: RelationCollectionReadModel
 */
export type RelationCollectionModelLinks = z.infer<typeof relationCollectionModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const relationCollectionModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf67Response,
    })
    .transform((data) => ({
      self: data['self'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const relationCollectionModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf67Request,
    })
    .transform((data) => ({
      self: data['self'],
    }));
});
