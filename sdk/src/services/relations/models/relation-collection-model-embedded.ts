// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  RelationReadModel,
  relationReadModel,
  relationReadModelRequest,
  relationReadModelResponse,
} from './relation-read-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const relationCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(relationReadModel),
  });
});

/**
 *
 * @typedef  {RelationCollectionModelEmbedded} relationCollectionModelEmbedded
 * @property {RelationReadModel[]}
 */
export type RelationCollectionModelEmbedded = z.infer<typeof relationCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const relationCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(relationReadModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const relationCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(relationReadModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
