// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { RelationCollectionModelType, relationCollectionModelType } from './relation-collection-model-type';
import {
  RelationCollectionModelLinks,
  relationCollectionModelLinks,
  relationCollectionModelLinksRequest,
  relationCollectionModelLinksResponse,
} from './relation-collection-model-links';
import {
  RelationCollectionModelEmbedded,
  relationCollectionModelEmbedded,
  relationCollectionModelEmbeddedRequest,
  relationCollectionModelEmbeddedResponse,
} from './relation-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const relationCollectionModel = z.lazy(() => {
  return z.object({
    _type: relationCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: relationCollectionModelLinks,
    _embedded: relationCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {RelationCollectionModel} relationCollectionModel
 * @property {RelationCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {RelationCollectionModelLinks}
 * @property {RelationCollectionModelEmbedded}
 */
export type RelationCollectionModel = z.infer<typeof relationCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const relationCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: relationCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: relationCollectionModelLinksResponse,
      _embedded: relationCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const relationCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: relationCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: relationCollectionModelLinksRequest,
      _embedded: relationCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
