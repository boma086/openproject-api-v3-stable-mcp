// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { RelationWriteModelType, relationWriteModelType } from './relation-write-model-type';
import {
  RelationWriteModelLinks,
  relationWriteModelLinks,
  relationWriteModelLinksRequest,
  relationWriteModelLinksResponse,
} from './relation-write-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const relationWriteModel = z.lazy(() => {
  return z.object({
    type: relationWriteModelType,
    description: z.string().optional().nullable(),
    lag: z.number().gte(0).optional().nullable(),
    _links: relationWriteModelLinks,
  });
});

/**
 *
 * @typedef  {RelationWriteModel} relationWriteModel
 * @property {RelationWriteModelType} - The relation type.
 * @property {string} - A descriptive text for the relation.
 * @property {number} - The lag in days between closing of `from` and start of `to`
 * @property {RelationWriteModelLinks}
 */
export type RelationWriteModel = z.infer<typeof relationWriteModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const relationWriteModelResponse = z.lazy(() => {
  return z
    .object({
      type: relationWriteModelType,
      description: z.string().optional().nullable(),
      lag: z.number().gte(0).optional().nullable(),
      _links: relationWriteModelLinksResponse,
    })
    .transform((data) => ({
      type: data['type'],
      description: data['description'],
      lag: data['lag'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const relationWriteModelRequest = z.lazy(() => {
  return z
    .object({
      type: relationWriteModelType,
      description: z.string().optional().nullable(),
      lag: z.number().gte(0).optional().nullable(),
      _links: relationWriteModelLinksRequest,
    })
    .transform((data) => ({
      type: data['type'],
      description: data['description'],
      lag: data['lag'],
      _links: data['_links'],
    }));
});
