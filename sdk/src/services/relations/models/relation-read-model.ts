// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { RelationReadModelType1, relationReadModelType1 } from './relation-read-model-type-1';
import { RelationReadModelType2, relationReadModelType2 } from './relation-read-model-type-2';
import { ReverseType, reverseType } from './reverse-type';
import {
  RelationReadModelEmbedded,
  relationReadModelEmbedded,
  relationReadModelEmbeddedRequest,
  relationReadModelEmbeddedResponse,
} from './relation-read-model-embedded';
import {
  RelationReadModelLinks,
  relationReadModelLinks,
  relationReadModelLinksRequest,
  relationReadModelLinksResponse,
} from './relation-read-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const relationReadModel = z.lazy(() => {
  return z.object({
    _type: relationReadModelType1.optional(),
    id: z.number().optional(),
    name: z.string().optional(),
    type: relationReadModelType2.optional(),
    reverseType: reverseType.optional(),
    description: z.string().optional().nullable(),
    lag: z.number().gte(0).optional().nullable(),
    _embedded: relationReadModelEmbedded.optional(),
    _links: relationReadModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {RelationReadModel} relationReadModel
 * @property {RelationReadModelType1}
 * @property {number} - Relation ID
 * @property {string} - The internationalised name of this type of relation
 * @property {RelationReadModelType2} - The relation type.
 * @property {ReverseType} - The type of relation from the perspective of the related work package.
 * @property {string} - A descriptive text for the relation.
 * @property {number} - The lag in days between closing of `from` and start of `to`
 * @property {RelationReadModelEmbedded}
 * @property {RelationReadModelLinks}
 */
export type RelationReadModel = z.infer<typeof relationReadModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const relationReadModelResponse = z.lazy(() => {
  return z
    .object({
      _type: relationReadModelType1.optional(),
      id: z.number().optional(),
      name: z.string().optional(),
      type: relationReadModelType2.optional(),
      reverseType: reverseType.optional(),
      description: z.string().optional().nullable(),
      lag: z.number().gte(0).optional().nullable(),
      _embedded: relationReadModelEmbeddedResponse.optional(),
      _links: relationReadModelLinksResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      type: data['type'],
      reverseType: data['reverseType'],
      description: data['description'],
      lag: data['lag'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const relationReadModelRequest = z.lazy(() => {
  return z
    .object({
      _type: relationReadModelType1.optional(),
      id: z.number().optional(),
      name: z.string().optional(),
      type: relationReadModelType2.optional(),
      reverseType: reverseType.optional(),
      description: z.string().optional().nullable(),
      lag: z.number().gte(0).optional().nullable(),
      _embedded: relationReadModelEmbeddedRequest.optional(),
      _links: relationReadModelLinksRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      type: data['type'],
      reverseType: data['reverseType'],
      description: data['description'],
      lag: data['lag'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});
