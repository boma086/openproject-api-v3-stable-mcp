// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  WorkPackageModel,
  workPackageModel,
  workPackageModelRequest,
  workPackageModelResponse,
} from '../../common/work-package-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const relationReadModelEmbedded = z.lazy(() => {
  return z.object({
    from: workPackageModel.optional(),
    to: workPackageModel.optional(),
  });
});

/**
 *
 * @typedef  {RelationReadModelEmbedded} relationReadModelEmbedded
 * @property {WorkPackageModel}
 * @property {WorkPackageModel}
 */
export type RelationReadModelEmbedded = z.infer<typeof relationReadModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const relationReadModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      from: workPackageModelResponse.optional(),
      to: workPackageModelResponse.optional(),
    })
    .transform((data) => ({
      from: data['from'],
      to: data['to'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const relationReadModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      from: workPackageModelRequest.optional(),
      to: workPackageModelRequest.optional(),
    })
    .transform((data) => ({
      from: data['from'],
      to: data['to'],
    }));
});
