// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksTo2, _linksTo2, _linksTo2Request, _linksTo2Response } from './_links-to-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const relationWriteModelLinks = z.lazy(() => {
  return z.object({
    to: _linksTo2.optional(),
  });
});

/**
 * 
 * @typedef  {RelationWriteModelLinks} relationWriteModelLinks   
 * @property {_LinksTo2} - The work package the relation ends in. Only available on relation creation, not on update.

``Resource``: WorkPackage

# Conditions

``Permission``: view work packages
 */
export type RelationWriteModelLinks = z.infer<typeof relationWriteModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const relationWriteModelLinksResponse = z.lazy(() => {
  return z
    .object({
      to: _linksTo2Response.optional(),
    })
    .transform((data) => ({
      to: data['to'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const relationWriteModelLinksRequest = z.lazy(() => {
  return z
    .object({
      to: _linksTo2Request.optional(),
    })
    .transform((data) => ({
      to: data['to'],
    }));
});
