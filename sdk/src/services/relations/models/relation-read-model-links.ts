// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf68, _linksSelf68, _linksSelf68Request, _linksSelf68Response } from './_links-self-68';
import {
  _LinksUpdateImmediately16,
  _linksUpdateImmediately16,
  _linksUpdateImmediately16Request,
  _linksUpdateImmediately16Response,
} from './_links-update-immediately-16';
import { _LinksDelete16, _linksDelete16, _linksDelete16Request, _linksDelete16Response } from './_links-delete-16';
import { From_, fromRequest, fromResponse, from_ } from './from_';
import { _LinksTo1, _linksTo1, _linksTo1Request, _linksTo1Response } from './_links-to-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const relationReadModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf68.optional(),
    updateImmediately: _linksUpdateImmediately16.optional(),
    delete: _linksDelete16.optional(),
    from: from_.optional(),
    to: _linksTo1.optional(),
  });
});

/**
 * 
 * @typedef  {RelationReadModelLinks} relationReadModelLinks   
 * @property {_LinksSelf68} - This relation

``Resource``: Relation

# Conditions

``Permission``: view work packages
 * @property {_LinksUpdateImmediately16} - Updates the relation between two work packages

# Conditions

``Permission``: manage work package relations
 * @property {_LinksDelete16} - Destroys the relation between the two work packages

# Conditions

``Permission``: manage work package relations
 * @property {From_} - The emanating work package

``Resource``: WorkPackage

# Conditions

``Permission``: view work packages
 * @property {_LinksTo1} - The work package the relation ends in

``Resource``: WorkPackage

# Conditions

``Permission``: view work packages
 */
export type RelationReadModelLinks = z.infer<typeof relationReadModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const relationReadModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf68Response.optional(),
      updateImmediately: _linksUpdateImmediately16Response.optional(),
      delete: _linksDelete16Response.optional(),
      from: fromResponse.optional(),
      to: _linksTo1Response.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      updateImmediately: data['updateImmediately'],
      delete: data['delete'],
      from: data['from'],
      to: data['to'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const relationReadModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf68Request.optional(),
      updateImmediately: _linksUpdateImmediately16Request.optional(),
      delete: _linksDelete16Request.optional(),
      from: fromRequest.optional(),
      to: _linksTo1Request.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      updateImmediately: data['updateImmediately'],
      delete: data['delete'],
      from: data['from'],
      to: data['to'],
    }));
});
