// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { PlaceholderUserModelType, placeholderUserModelType } from './placeholder-user-model-type';
import {
  PlaceholderUserModelLinks,
  placeholderUserModelLinks,
  placeholderUserModelLinksRequest,
  placeholderUserModelLinksResponse,
} from './placeholder-user-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const placeholderUserModel = z.lazy(() => {
  return z.object({
    _type: placeholderUserModelType,
    id: z.number().gte(1),
    name: z.string(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    _links: placeholderUserModelLinks,
    status: z.string().optional(),
  });
});

/**
 * 
 * @typedef  {PlaceholderUserModel} placeholderUserModel   
 * @property {PlaceholderUserModelType} 
 * @property {number} - The principal's unique identifier.
 * @property {string} - The principal's display name, layout depends on instance settings.
 * @property {string} - Time of creation
 * @property {string} - Time of the most recent change to the principal
 * @property {PlaceholderUserModelLinks} 
 * @property {string} - The current activation status of the placeholder user.

# Conditions

- User has `manage_placeholder_user` permission globally
 */
export type PlaceholderUserModel = z.infer<typeof placeholderUserModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const placeholderUserModelResponse = z.lazy(() => {
  return z
    .object({
      _type: placeholderUserModelType,
      id: z.number().gte(1),
      name: z.string(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: placeholderUserModelLinksResponse,
      status: z.string().optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
      status: data['status'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const placeholderUserModelRequest = z.lazy(() => {
  return z
    .object({
      _type: placeholderUserModelType,
      id: z.number().gte(1),
      name: z.string(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: placeholderUserModelLinksRequest,
      status: z.string().optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
      status: data['status'],
    }));
});
