// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  OffsetPaginatedCollectionLinksSelf,
  offsetPaginatedCollectionLinksSelf,
  offsetPaginatedCollectionLinksSelfRequest,
  offsetPaginatedCollectionLinksSelfResponse,
} from './offset-paginated-collection-links-self';
import {
  OffsetPaginatedCollectionLinksJumpTo,
  offsetPaginatedCollectionLinksJumpTo,
  offsetPaginatedCollectionLinksJumpToRequest,
  offsetPaginatedCollectionLinksJumpToResponse,
} from './offset-paginated-collection-links-jump-to';
import {
  OffsetPaginatedCollectionLinksChangeSize,
  offsetPaginatedCollectionLinksChangeSize,
  offsetPaginatedCollectionLinksChangeSizeRequest,
  offsetPaginatedCollectionLinksChangeSizeResponse,
} from './offset-paginated-collection-links-change-size';
import {
  OffsetPaginatedCollectionLinksPreviousByOffset,
  offsetPaginatedCollectionLinksPreviousByOffset,
  offsetPaginatedCollectionLinksPreviousByOffsetRequest,
  offsetPaginatedCollectionLinksPreviousByOffsetResponse,
} from './offset-paginated-collection-links-previous-by-offset';
import {
  OffsetPaginatedCollectionLinksNextByOffset,
  offsetPaginatedCollectionLinksNextByOffset,
  offsetPaginatedCollectionLinksNextByOffsetRequest,
  offsetPaginatedCollectionLinksNextByOffsetResponse,
} from './offset-paginated-collection-links-next-by-offset';

/**
 * The shape of the model inside the application code - what the users use
 */
export const offsetPaginatedCollectionLinks = z.lazy(() => {
  return z.object({
    self: offsetPaginatedCollectionLinksSelf,
    jumpTo: offsetPaginatedCollectionLinksJumpTo,
    changeSize: offsetPaginatedCollectionLinksChangeSize,
    previousByOffset: offsetPaginatedCollectionLinksPreviousByOffset.optional(),
    nextByOffset: offsetPaginatedCollectionLinksNextByOffset.optional(),
  });
});

/**
 * 
 * @typedef  {OffsetPaginatedCollectionLinks} offsetPaginatedCollectionLinks   
 * @property {OffsetPaginatedCollectionLinksSelf} - This collection resource.

``Resource``: Collection
 * @property {OffsetPaginatedCollectionLinksJumpTo} - A templated link to jump to a given offset.
 * @property {OffsetPaginatedCollectionLinksChangeSize} - A templated link to change the current page size.
 * @property {OffsetPaginatedCollectionLinksPreviousByOffset} - A link to the previous page of the collection.

# Conditions
- The collection is not on the first page.
 * @property {OffsetPaginatedCollectionLinksNextByOffset} - A link to the next page of the collection.

# Conditions
- The collection is not on the last page.
 */
export type OffsetPaginatedCollectionLinks = z.infer<typeof offsetPaginatedCollectionLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const offsetPaginatedCollectionLinksResponse = z.lazy(() => {
  return z
    .object({
      self: offsetPaginatedCollectionLinksSelfResponse,
      jumpTo: offsetPaginatedCollectionLinksJumpToResponse,
      changeSize: offsetPaginatedCollectionLinksChangeSizeResponse,
      previousByOffset: offsetPaginatedCollectionLinksPreviousByOffsetResponse.optional(),
      nextByOffset: offsetPaginatedCollectionLinksNextByOffsetResponse.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      jumpTo: data['jumpTo'],
      changeSize: data['changeSize'],
      previousByOffset: data['previousByOffset'],
      nextByOffset: data['nextByOffset'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const offsetPaginatedCollectionLinksRequest = z.lazy(() => {
  return z
    .object({
      self: offsetPaginatedCollectionLinksSelfRequest,
      jumpTo: offsetPaginatedCollectionLinksJumpToRequest,
      changeSize: offsetPaginatedCollectionLinksChangeSizeRequest,
      previousByOffset: offsetPaginatedCollectionLinksPreviousByOffsetRequest.optional(),
      nextByOffset: offsetPaginatedCollectionLinksNextByOffsetRequest.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      jumpTo: data['jumpTo'],
      changeSize: data['changeSize'],
      previousByOffset: data['previousByOffset'],
      nextByOffset: data['nextByOffset'],
    }));
});
