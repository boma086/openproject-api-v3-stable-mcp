// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { PrincipalCollectionModelType, principalCollectionModelType } from './principal-collection-model-type';
import {
  OffsetPaginatedCollectionLinks,
  offsetPaginatedCollectionLinks,
  offsetPaginatedCollectionLinksRequest,
  offsetPaginatedCollectionLinksResponse,
} from './offset-paginated-collection-links';
import {
  PrincipalCollectionModelEmbedded,
  principalCollectionModelEmbedded,
  principalCollectionModelEmbeddedRequest,
  principalCollectionModelEmbeddedResponse,
} from './principal-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const principalCollectionModel = z.lazy(() => {
  return z.object({
    _type: principalCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: offsetPaginatedCollectionLinks,
    pageSize: z.number().gte(0),
    offset: z.number().gte(0),
    _embedded: principalCollectionModelEmbedded,
  });
});

/**
 * 
 * @typedef  {PrincipalCollectionModel} principalCollectionModel   
 * @property {PrincipalCollectionModelType} 
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {OffsetPaginatedCollectionLinks} 
 * @property {number} - The amount of elements per page. If not set by the request this value defaults to the server's system
settings.
 * @property {number} - The page offset indicating on which page the element collection starts.
 * @property {PrincipalCollectionModelEmbedded} 
 */
export type PrincipalCollectionModel = z.infer<typeof principalCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const principalCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: principalCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: offsetPaginatedCollectionLinksResponse,
      pageSize: z.number().gte(0),
      offset: z.number().gte(0),
      _embedded: principalCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      pageSize: data['pageSize'],
      offset: data['offset'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const principalCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: principalCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: offsetPaginatedCollectionLinksRequest,
      pageSize: z.number().gte(0),
      offset: z.number().gte(0),
      _embedded: principalCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      pageSize: data['pageSize'],
      offset: data['offset'],
      _embedded: data['_embedded'],
    }));
});
