// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _EmbeddedElements5,
  _embeddedElements5,
  _embeddedElements5Request,
  _embeddedElements5Response,
} from './_embedded-elements-5';

/**
 * The shape of the model inside the application code - what the users use
 */
export const principalCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(_embeddedElements5),
  });
});

/**
 *
 * @typedef  {PrincipalCollectionModelEmbedded} principalCollectionModelEmbedded
 * @property {_EmbeddedElements5[]}
 */
export type PrincipalCollectionModelEmbedded = z.infer<typeof principalCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const principalCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(_embeddedElements5Response),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const principalCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(_embeddedElements5Request),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
