// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { userModel, userModelRequest, userModelResponse } from '../../common/user-model';
import {
  placeholderUserModel,
  placeholderUserModelRequest,
  placeholderUserModelResponse,
} from './placeholder-user-model';
import { groupModel, groupModelRequest, groupModelResponse } from '../../common/group-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _embeddedElements5 = z.lazy(() => {
  return z.union([userModel, placeholderUserModel, groupModel]);
});

/**
 *
 * @typedef  {_EmbeddedElements5} _embeddedElements5
 * @property {UserModel}
 * @property {PlaceholderUserModel}
 * @property {GroupModel}
 */
export type _EmbeddedElements5 = z.infer<typeof _embeddedElements5>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements5Response = z.lazy(() => {
  return z.union([userModelResponse, placeholderUserModelResponse, groupModelResponse]);
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements5Request = z.lazy(() => {
  return z.union([userModelRequest, placeholderUserModelRequest, groupModelRequest]);
});
