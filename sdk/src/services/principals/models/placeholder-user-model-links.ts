// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _LinksShowUser2,
  _linksShowUser2,
  _linksShowUser2Request,
  _linksShowUser2Response,
} from './_links-show-user-2';
import { _LinksDelete12, _linksDelete12, _linksDelete12Request, _linksDelete12Response } from './_links-delete-12';
import {
  _LinksUpdateImmediately9,
  _linksUpdateImmediately9,
  _linksUpdateImmediately9Request,
  _linksUpdateImmediately9Response,
} from './_links-update-immediately-9';

/**
 * The shape of the model inside the application code - what the users use
 */
export const placeholderUserModelLinks = z.lazy(() => {
  return z.object({
    showUser: _linksShowUser2,
    delete: _linksDelete12.optional(),
    updateImmediately: _linksUpdateImmediately9.optional(),
  });
});

/**
 * 
 * @typedef  {PlaceholderUserModelLinks} placeholderUserModelLinks   
 * @property {_LinksShowUser2} - A relative path to show the placeholder user in the web application.
 * @property {_LinksDelete12} - An href to delete the placeholder user.

# Conditions:

- `manage_placeholder_user`
 * @property {_LinksUpdateImmediately9} - An href to update the placeholder user.

# Conditions:

- `manage_placeholder_user`

``Resource``: PlaceholderUser
 */
export type PlaceholderUserModelLinks = z.infer<typeof placeholderUserModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const placeholderUserModelLinksResponse = z.lazy(() => {
  return z
    .object({
      showUser: _linksShowUser2Response,
      delete: _linksDelete12Response.optional(),
      updateImmediately: _linksUpdateImmediately9Response.optional(),
    })
    .transform((data) => ({
      showUser: data['showUser'],
      delete: data['delete'],
      updateImmediately: data['updateImmediately'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const placeholderUserModelLinksRequest = z.lazy(() => {
  return z
    .object({
      showUser: _linksShowUser2Request,
      delete: _linksDelete12Request.optional(),
      updateImmediately: _linksUpdateImmediately9Request.optional(),
    })
    .transform((data) => ({
      showUser: data['showUser'],
      delete: data['delete'],
      updateImmediately: data['updateImmediately'],
    }));
});
