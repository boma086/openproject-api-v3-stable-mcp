// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import { PrincipalCollectionModel, principalCollectionModelResponse } from './models/principal-collection-model';
import { ListPlaceholderUsersParams, ListPrincipalsParams } from './request-params';
import { PlaceholderUserCreateModel, placeholderUserCreateModelRequest } from './models/placeholder-user-create-model';
import { PlaceholderUserModel, placeholderUserModelResponse } from './models/placeholder-user-model';

export class PrincipalsService extends BaseService {
  /**
 * List all placeholder users. This can only be accessed if the requesting user has the global permission`manage_placeholder_user` or `manage_members` in any project.
 * @param {string} [params.filters] - JSON specifying filter conditions.
Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/) endpoint.
Currently supported filters are:

- name: filters placeholder users by the name.
- group: filters placeholder by the group it is contained in.
- status: filters placeholder by the status it has.
 * @param {string} [params.select] - Comma separated list of properties to include.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<PrincipalCollectionModel>>} OK
 */
  async listPlaceholderUsers(
    params?: ListPlaceholderUsersParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PrincipalCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/placeholder_users')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: principalCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filters',
        value: params?.filters,
      })
      .addQueryParam({
        key: 'select',
        value: params?.select,
      })
      .build();
    return this.client.call<PrincipalCollectionModel>(request);
  }

  /**
 * Creates a new placeholder user. Only administrators and users with `manage_placeholder_user` global permission areallowed to do so. When calling this endpoint the client provides a single object, containing at least the
properties and links that are required, in the body.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<PlaceholderUserModel>>} Created
 */
  async createPlaceholderUser(
    body: PlaceholderUserCreateModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PlaceholderUserModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api/v3/placeholder_users')
      .setRequestSchema(placeholderUserCreateModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: placeholderUserModelResponse,
        contentType: ContentType.Json,
        status: 201,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<PlaceholderUserModel>(request);
  }

  /**
   * Return the placeholder user resource.
   * @param {string} id - The placeholder user id
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<PlaceholderUserModel>>} OK
   */
  async viewPlaceholderUser(id: string, requestConfig?: RequestConfig): Promise<HttpResponse<PlaceholderUserModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/placeholder_users/{id}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: placeholderUserModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<PlaceholderUserModel>(request);
  }

  /**
 * Updates the placeholder user's writable attributes.When calling this endpoint the client provides a single object, containing at least the properties and links
that are required, in the body.
 * @param {number} id - Placeholder user id
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<PlaceholderUserModel>>} OK
 */
  async updatePlaceholderUser(
    id: number,
    body: PlaceholderUserCreateModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PlaceholderUserModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('PATCH')
      .setPath('/api/v3/placeholder_users/{id}')
      .setRequestSchema(placeholderUserCreateModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: placeholderUserModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<PlaceholderUserModel>(request);
  }

  /**
 * Set the specified placeholder user to deleted status.
 * @param {number} id - Placeholder user id
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<any>>} Returned if the group was marked for deletion.

Note that the response body is empty as of now. In future versions of the API a body
*might* be returned, indicating the progress of deletion.
 */
  async deletePlaceholderUser(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<void>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('DELETE')
      .setPath('/api/v3/placeholder_users/{id}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.undefined(),
        contentType: ContentType.NoContent,
        status: 202,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<void>(request);
  }

  /**
 * List all principals. The client can choose to filter the principals similar to how work packages are filtered. Inaddition to the provided filters, the server will reduce the result set to only contain principals who are members
in projects the client is allowed to see.
 * @param {string} [params.filters] - JSON specifying filter conditions.
Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/) endpoint.
Currently supported filters are:

- type: filters principals by their type (*User*, *Group*, *PlaceholderUser*).
- member: filters principals by the projects they are members in.
- name: filters principals by the user or group name.
- any_name_attribute: filters principals by the user or group first- and last name, email or login.
- status: filters principals by their status number (active = *1*, registered = *2*, locked = *3*, invited = *4*)
 * @param {string} [params.select] - Comma separated list of properties to include.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<PrincipalCollectionModel>>} OK
 */
  async listPrincipals(
    params?: ListPrincipalsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PrincipalCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/principals')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: principalCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filters',
        value: params?.filters,
      })
      .addQueryParam({
        key: 'select',
        value: params?.select,
      })
      .build();
    return this.client.call<PrincipalCollectionModel>(request);
  }
}
