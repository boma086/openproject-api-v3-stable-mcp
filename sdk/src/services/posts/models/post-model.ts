// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { PostModelLinks, postModelLinks, postModelLinksRequest, postModelLinksResponse } from './post-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const postModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    subject: z.string(),
    _links: postModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {PostModel} postModel
 * @property {number} - Identifier of this post
 * @property {string} - The post's subject
 * @property {PostModelLinks}
 */
export type PostModel = z.infer<typeof postModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const postModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      subject: z.string(),
      _links: postModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      subject: data['subject'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const postModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      subject: z.string(),
      _links: postModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      subject: data['subject'],
      _links: data['_links'],
    }));
});
