// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf72, _linksSelf72, _linksSelf72Request, _linksSelf72Response } from './_links-self-72';
import {
  _LinksUpdateImmediately17,
  _linksUpdateImmediately17,
  _linksUpdateImmediately17Request,
  _linksUpdateImmediately17Response,
} from './_links-update-immediately-17';
import { _LinksUpdate11, _linksUpdate11, _linksUpdate11Request, _linksUpdate11Response } from './_links-update-11';
import { _LinksDelete17, _linksDelete17, _linksDelete17Request, _linksDelete17Response } from './_links-delete-17';
import { _LinksSchema5, _linksSchema5, _linksSchema5Request, _linksSchema5Response } from './_links-schema-5';
import { _LinksProject16, _linksProject16, _linksProject16Request, _linksProject16Response } from './_links-project-16';
import {
  _LinksWorkPackage3,
  _linksWorkPackage3,
  _linksWorkPackage3Request,
  _linksWorkPackage3Response,
} from './_links-work-package-3';
import { _LinksUser3, _linksUser3, _linksUser3Request, _linksUser3Response } from './_links-user-3';
import { _LinksActivity2, _linksActivity2, _linksActivity2Request, _linksActivity2Response } from './_links-activity-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const timeEntryModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf72,
    updateImmediately: _linksUpdateImmediately17.optional(),
    update: _linksUpdate11.optional(),
    delete: _linksDelete17.optional(),
    schema: _linksSchema5.optional(),
    project: _linksProject16,
    workPackage: _linksWorkPackage3.optional(),
    user: _linksUser3,
    activity: _linksActivity2,
  });
});

/**
 * 
 * @typedef  {TimeEntryModelLinks} timeEntryModelLinks   
 * @property {_LinksSelf72} - This time entry

``Resource``: TimeEntry
 * @property {_LinksUpdateImmediately17} - Directly perform edits on this time entry

# Conditions

``Permission``: 'edit time entries' or 'edit own time entries' if the time entry belongs to the user
 * @property {_LinksUpdate11} - Form endpoint that aids in preparing and performing edits on a TimeEntry

# Conditions

``Permission``: 'edit time entries' or 'edit own time entries' if the time entry belongs to the user
 * @property {_LinksDelete17} - Delete this time entry

# Conditions

``Permission``: 'edit time entries' or 'edit own time entries' if the time entry belongs to the user
 * @property {_LinksSchema5} - The time entry schema

``Resource``: Schema
 * @property {_LinksProject16} - The project the time entry is bundled in. The project might be different from the work package's project once the workPackage is moved.

``Resource``: Project
 * @property {_LinksWorkPackage3} - The work package the time entry is created on

``Resource``: WorkPackage
 * @property {_LinksUser3} - The user the time entry tracks expenditures for

``Resource``: User
 * @property {_LinksActivity2} - The time entry activity the time entry is categorized as

``Resource``: TimeEntriesActivity
 */
export type TimeEntryModelLinks = z.infer<typeof timeEntryModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const timeEntryModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf72Response,
      updateImmediately: _linksUpdateImmediately17Response.optional(),
      update: _linksUpdate11Response.optional(),
      delete: _linksDelete17Response.optional(),
      schema: _linksSchema5Response.optional(),
      project: _linksProject16Response,
      workPackage: _linksWorkPackage3Response.optional(),
      user: _linksUser3Response,
      activity: _linksActivity2Response,
    })
    .transform((data) => ({
      self: data['self'],
      updateImmediately: data['updateImmediately'],
      update: data['update'],
      delete: data['delete'],
      schema: data['schema'],
      project: data['project'],
      workPackage: data['workPackage'],
      user: data['user'],
      activity: data['activity'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const timeEntryModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf72Request,
      updateImmediately: _linksUpdateImmediately17Request.optional(),
      update: _linksUpdate11Request.optional(),
      delete: _linksDelete17Request.optional(),
      schema: _linksSchema5Request.optional(),
      project: _linksProject16Request,
      workPackage: _linksWorkPackage3Request.optional(),
      user: _linksUser3Request,
      activity: _linksActivity2Request,
    })
    .transform((data) => ({
      self: data['self'],
      updateImmediately: data['updateImmediately'],
      update: data['update'],
      delete: data['delete'],
      schema: data['schema'],
      project: data['project'],
      workPackage: data['workPackage'],
      user: data['user'],
      activity: data['activity'],
    }));
});
