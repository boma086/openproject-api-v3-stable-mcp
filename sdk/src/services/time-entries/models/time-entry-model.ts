// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  TimeEntryModelLinks,
  timeEntryModelLinks,
  timeEntryModelLinksRequest,
  timeEntryModelLinksResponse,
} from './time-entry-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const timeEntryModel = z.lazy(() => {
  return z.object({
    id: z.number().gte(1).optional(),
    comment: z.string().optional(),
    spentOn: z.string().optional(),
    hours: z.string().optional(),
    ongoing: z.boolean().optional(),
    createdAt: z.string().optional(),
    startTime: z.string().optional().nullable(),
    endTime: z.string().optional().nullable(),
    updatedAt: z.string().optional(),
    _links: timeEntryModelLinks.optional(),
  });
});

/**
 * 
 * @typedef  {TimeEntryModel} timeEntryModel   
 * @property {number} - The id of the time entry
 * @property {string} - A comment to the time entry
 * @property {string} - The date the expenditure is booked for
 * @property {string} - The time quantifying the expenditure
 * @property {boolean} - Whether the time entry is actively tracking time
 * @property {string} - The time the time entry was created
 * @property {string} - The time the time entry was started, or null if the time entry does not have a start time.

The time is returned as UTC time, if presented to the user it should be converted to the user's timezone.

This field is only available if the global `allow_tracking_start_and_end_times` setting is enabled.
 * @property {string} - The time the time entry was ended, or null if the time entry does not have a start time.

The time is returned as UTC time, if presented to the user it should be converted to the user's timezone.

This field is only available if the global `allow_tracking_start_and_end_times` setting is enabled.
 * @property {string} - The time the time entry was last updated
 * @property {TimeEntryModelLinks} 
 */
export type TimeEntryModel = z.infer<typeof timeEntryModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const timeEntryModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      comment: z.string().optional(),
      spentOn: z.string().optional(),
      hours: z.string().optional(),
      ongoing: z.boolean().optional(),
      createdAt: z.string().optional(),
      startTime: z.string().optional().nullable(),
      endTime: z.string().optional().nullable(),
      updatedAt: z.string().optional(),
      _links: timeEntryModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      comment: data['comment'],
      spentOn: data['spentOn'],
      hours: data['hours'],
      ongoing: data['ongoing'],
      createdAt: data['createdAt'],
      startTime: data['startTime'],
      endTime: data['endTime'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const timeEntryModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      comment: z.string().optional(),
      spentOn: z.string().optional(),
      hours: z.string().optional(),
      ongoing: z.boolean().optional(),
      createdAt: z.string().optional(),
      startTime: z.string().optional().nullable(),
      endTime: z.string().optional().nullable(),
      updatedAt: z.string().optional(),
      _links: timeEntryModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      comment: data['comment'],
      spentOn: data['spentOn'],
      hours: data['hours'],
      ongoing: data['ongoing'],
      createdAt: data['createdAt'],
      startTime: data['startTime'],
      endTime: data['endTime'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});
