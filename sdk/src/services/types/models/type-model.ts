// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { TypeModelLinks, typeModelLinks, typeModelLinksRequest, typeModelLinksResponse } from './type-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const typeModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    name: z.string().optional(),
    color: z.string().optional(),
    position: z.number().optional(),
    isDefault: z.boolean().optional(),
    isMilestone: z.boolean().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    _links: typeModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {TypeModel} typeModel
 * @property {number} - Type id
 * @property {string} - Type name
 * @property {string} - The color used to represent this type
 * @property {number} - Sort index of the type
 * @property {boolean} - Is this type active by default in new projects?
 * @property {boolean} - Do work packages of this type represent a milestone?
 * @property {string} - Time of creation
 * @property {string} - Time of the most recent change to the user
 * @property {TypeModelLinks}
 */
export type TypeModel = z.infer<typeof typeModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const typeModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().optional(),
      color: z.string().optional(),
      position: z.number().optional(),
      isDefault: z.boolean().optional(),
      isMilestone: z.boolean().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: typeModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      color: data['color'],
      position: data['position'],
      isDefault: data['isDefault'],
      isMilestone: data['isMilestone'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const typeModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().optional(),
      color: z.string().optional(),
      position: z.number().optional(),
      isDefault: z.boolean().optional(),
      isMilestone: z.boolean().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: typeModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      color: data['color'],
      position: data['position'],
      isDefault: data['isDefault'],
      isMilestone: data['isMilestone'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});
