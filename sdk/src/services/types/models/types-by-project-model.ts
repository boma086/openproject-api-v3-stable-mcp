// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { TypesByProjectModelType, typesByProjectModelType } from './types-by-project-model-type';
import {
  TypesByProjectModelLinks,
  typesByProjectModelLinks,
  typesByProjectModelLinksRequest,
  typesByProjectModelLinksResponse,
} from './types-by-project-model-links';
import {
  TypesByProjectModelEmbedded,
  typesByProjectModelEmbedded,
  typesByProjectModelEmbeddedRequest,
  typesByProjectModelEmbeddedResponse,
} from './types-by-project-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const typesByProjectModel = z.lazy(() => {
  return z.object({
    _type: typesByProjectModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: typesByProjectModelLinks,
    _embedded: typesByProjectModelEmbedded,
  });
});

/**
 *
 * @typedef  {TypesByProjectModel} typesByProjectModel
 * @property {TypesByProjectModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {TypesByProjectModelLinks}
 * @property {TypesByProjectModelEmbedded}
 */
export type TypesByProjectModel = z.infer<typeof typesByProjectModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const typesByProjectModelResponse = z.lazy(() => {
  return z
    .object({
      _type: typesByProjectModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: typesByProjectModelLinksResponse,
      _embedded: typesByProjectModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const typesByProjectModelRequest = z.lazy(() => {
  return z
    .object({
      _type: typesByProjectModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: typesByProjectModelLinksRequest,
      _embedded: typesByProjectModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
