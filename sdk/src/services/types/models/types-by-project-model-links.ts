// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf61, _linksSelf61, _linksSelf61Request, _linksSelf61Response } from './_links-self-61';

/**
 * The shape of the model inside the application code - what the users use
 */
export const typesByProjectModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf61,
  });
});

/**
 * 
 * @typedef  {TypesByProjectModelLinks} typesByProjectModelLinks   
 * @property {_LinksSelf61} - The types collection

``Resource``: TypesCollection
 */
export type TypesByProjectModelLinks = z.infer<typeof typesByProjectModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const typesByProjectModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf61Response,
    })
    .transform((data) => ({
      self: data['self'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const typesByProjectModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf61Request,
    })
    .transform((data) => ({
      self: data['self'],
    }));
});
