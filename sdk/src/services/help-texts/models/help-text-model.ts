// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { HelpTextModelType, helpTextModelType } from './help-text-model-type';
import { HelpTextModelScope, helpTextModelScope } from './help-text-model-scope';
import { Formattable, formattable, formattableRequest, formattableResponse } from '../../common/formattable';
import {
  HelpTextModelLinks,
  helpTextModelLinks,
  helpTextModelLinksRequest,
  helpTextModelLinksResponse,
} from './help-text-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const helpTextModel = z.lazy(() => {
  return z.object({
    _type: helpTextModelType,
    id: z.number().gte(1),
    attribute: z.string(),
    scope: helpTextModelScope,
    helpText: formattable,
    _links: helpTextModelLinks,
  });
});

/**
 *
 * @typedef  {HelpTextModel} helpTextModel
 * @property {HelpTextModelType}
 * @property {number}
 * @property {string} - The attribute the help text is assigned to.
 * @property {HelpTextModelScope}
 * @property {Formattable}
 * @property {HelpTextModelLinks}
 */
export type HelpTextModel = z.infer<typeof helpTextModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const helpTextModelResponse = z.lazy(() => {
  return z
    .object({
      _type: helpTextModelType,
      id: z.number().gte(1),
      attribute: z.string(),
      scope: helpTextModelScope,
      helpText: formattableResponse,
      _links: helpTextModelLinksResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      attribute: data['attribute'],
      scope: data['scope'],
      helpText: data['helpText'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const helpTextModelRequest = z.lazy(() => {
  return z
    .object({
      _type: helpTextModelType,
      id: z.number().gte(1),
      attribute: z.string(),
      scope: helpTextModelScope,
      helpText: formattableRequest,
      _links: helpTextModelLinksRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      attribute: data['attribute'],
      scope: data['scope'],
      helpText: data['helpText'],
      _links: data['_links'],
    }));
});
