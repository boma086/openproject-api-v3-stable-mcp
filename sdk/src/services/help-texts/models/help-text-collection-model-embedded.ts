// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { HelpTextModel, helpTextModel, helpTextModelRequest, helpTextModelResponse } from './help-text-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const helpTextCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(helpTextModel),
  });
});

/**
 *
 * @typedef  {HelpTextCollectionModelEmbedded} helpTextCollectionModelEmbedded
 * @property {HelpTextModel[]}
 */
export type HelpTextCollectionModelEmbedded = z.infer<typeof helpTextCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const helpTextCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(helpTextModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const helpTextCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(helpTextModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
