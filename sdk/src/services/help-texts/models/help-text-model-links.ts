// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf37, _linksSelf37, _linksSelf37Request, _linksSelf37Response } from './_links-self-37';
import { EditText, editText, editTextRequest, editTextResponse } from './edit-text';
import {
  _LinksAttachments6,
  _linksAttachments6,
  _linksAttachments6Request,
  _linksAttachments6Response,
} from './_links-attachments-6';
import {
  _LinksAddAttachment5,
  _linksAddAttachment5,
  _linksAddAttachment5Request,
  _linksAddAttachment5Response,
} from './_links-add-attachment-5';

/**
 * The shape of the model inside the application code - what the users use
 */
export const helpTextModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf37,
    editText: editText,
    attachments: _linksAttachments6,
    addAttachment: _linksAddAttachment5,
  });
});

/**
 * 
 * @typedef  {HelpTextModelLinks} helpTextModelLinks   
 * @property {_LinksSelf37} - This help text resource.

``Resource``: HelpText
 * @property {EditText} - Edit the help text entry.

``Resource``: text/html
 * @property {_LinksAttachments6} - The attachment collection of this help text.

``Resource``: AttachmentCollection
 * @property {_LinksAddAttachment5} - Add an attachment to the help text.
 */
export type HelpTextModelLinks = z.infer<typeof helpTextModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const helpTextModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf37Response,
      editText: editTextResponse,
      attachments: _linksAttachments6Response,
      addAttachment: _linksAddAttachment5Response,
    })
    .transform((data) => ({
      self: data['self'],
      editText: data['editText'],
      attachments: data['attachments'],
      addAttachment: data['addAttachment'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const helpTextModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf37Request,
      editText: editTextRequest,
      attachments: _linksAttachments6Request,
      addAttachment: _linksAddAttachment5Request,
    })
    .transform((data) => ({
      self: data['self'],
      editText: data['editText'],
      attachments: data['attachments'],
      addAttachment: data['addAttachment'],
    }));
});
