// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { GroupModel, groupModel, groupModelRequest, groupModelResponse } from '../../common/group-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const groupCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(groupModel),
  });
});

/**
 *
 * @typedef  {GroupCollectionModelEmbedded} groupCollectionModelEmbedded
 * @property {GroupModel[]}
 */
export type GroupCollectionModelEmbedded = z.infer<typeof groupCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const groupCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(groupModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const groupCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(groupModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
