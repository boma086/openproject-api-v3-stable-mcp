// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { GroupCollectionModelType, groupCollectionModelType } from './group-collection-model-type';
import {
  GroupCollectionModelLinks,
  groupCollectionModelLinks,
  groupCollectionModelLinksRequest,
  groupCollectionModelLinksResponse,
} from './group-collection-model-links';
import {
  GroupCollectionModelEmbedded,
  groupCollectionModelEmbedded,
  groupCollectionModelEmbeddedRequest,
  groupCollectionModelEmbeddedResponse,
} from './group-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const groupCollectionModel = z.lazy(() => {
  return z.object({
    _type: groupCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: groupCollectionModelLinks,
    _embedded: groupCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {GroupCollectionModel} groupCollectionModel
 * @property {GroupCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {GroupCollectionModelLinks}
 * @property {GroupCollectionModelEmbedded}
 */
export type GroupCollectionModel = z.infer<typeof groupCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const groupCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: groupCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: groupCollectionModelLinksResponse,
      _embedded: groupCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const groupCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: groupCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: groupCollectionModelLinksRequest,
      _embedded: groupCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
