// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  GroupWriteModelLinks,
  groupWriteModelLinks,
  groupWriteModelLinksRequest,
  groupWriteModelLinksResponse,
} from './group-write-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const groupWriteModel = z.lazy(() => {
  return z.object({
    name: z.string().optional(),
    _links: groupWriteModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {GroupWriteModel} groupWriteModel
 * @property {string} - The new group name.
 * @property {GroupWriteModelLinks}
 */
export type GroupWriteModel = z.infer<typeof groupWriteModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const groupWriteModelResponse = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      _links: groupWriteModelLinksResponse.optional(),
    })
    .transform((data) => ({
      name: data['name'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const groupWriteModelRequest = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      _links: groupWriteModelLinksRequest.optional(),
    })
    .transform((data) => ({
      name: data['name'],
      _links: data['_links'],
    }));
});
