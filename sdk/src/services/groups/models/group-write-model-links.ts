// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksMembers2, _linksMembers2, _linksMembers2Request, _linksMembers2Response } from './_links-members-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const groupWriteModelLinks = z.lazy(() => {
  return z.object({
    members: z.array(_linksMembers2).optional(),
  });
});

/**
 *
 * @typedef  {GroupWriteModelLinks} groupWriteModelLinks
 * @property {_LinksMembers2[]}
 */
export type GroupWriteModelLinks = z.infer<typeof groupWriteModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const groupWriteModelLinksResponse = z.lazy(() => {
  return z
    .object({
      members: z.array(_linksMembers2Response).optional(),
    })
    .transform((data) => ({
      members: data['members'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const groupWriteModelLinksRequest = z.lazy(() => {
  return z
    .object({
      members: z.array(_linksMembers2Request).optional(),
    })
    .transform((data) => ({
      members: data['members'],
    }));
});
