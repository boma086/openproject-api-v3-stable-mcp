// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const groupModelEmbedded = z.lazy(() => {
  return z.object({
    members: z.array(z.any()).optional(),
  });
});

/**
 *
 * @typedef  {GroupModelEmbedded} groupModelEmbedded
 * @property {any[]} - Embedded list of members.
 */
export type GroupModelEmbedded = z.infer<typeof groupModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const groupModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      members: z.array(z.any()).optional(),
    })
    .transform((data) => ({
      members: data['members'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const groupModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      members: z.array(z.any()).optional(),
    })
    .transform((data) => ({
      members: data['members'],
    }));
});
