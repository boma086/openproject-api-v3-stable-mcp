// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ElementsType2, elementsType2 } from './elements-type-2';
import {
  ElementsStatusExplanation,
  elementsStatusExplanation,
  elementsStatusExplanationRequest,
  elementsStatusExplanationResponse,
} from './elements-status-explanation';
import { Formattable, formattable, formattableRequest, formattableResponse } from '../../common/formattable';
import { ElementsLinks4, elementsLinks4, elementsLinks4Request, elementsLinks4Response } from './elements-links-4';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _embeddedElements6 = z.lazy(() => {
  return z.object({
    _type: elementsType2.optional(),
    id: z.number().gte(1).optional(),
    identifier: z.string().optional(),
    name: z.string().optional(),
    active: z.boolean().optional(),
    statusExplanation: elementsStatusExplanation.optional(),
    public: z.boolean().optional(),
    description: formattable.optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    _links: elementsLinks4.optional(),
  });
});

/**
 * Collection of projects
 * @typedef  {_EmbeddedElements6} _embeddedElements6 - Collection of projects - Collection of projects
 * @property {ElementsType2}
 * @property {number} - Projects' id
 * @property {string}
 * @property {string}
 * @property {boolean} - Indicates whether the project is currently active or already archived
 * @property {ElementsStatusExplanation} - A text detailing and explaining why the project has the reported status
 * @property {boolean} - Indicates whether the project is accessible for everybody
 * @property {Formattable}
 * @property {string} - Time of creation. Can be writable by admins with the `apiv3_write_readonly_attributes` setting enabled.
 * @property {string} - Time of the most recent change to the project
 * @property {ElementsLinks4}
 */
export type _EmbeddedElements6 = z.infer<typeof _embeddedElements6>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements6Response = z.lazy(() => {
  return z
    .object({
      _type: elementsType2.optional(),
      id: z.number().gte(1).optional(),
      identifier: z.string().optional(),
      name: z.string().optional(),
      active: z.boolean().optional(),
      statusExplanation: elementsStatusExplanationResponse.optional(),
      public: z.boolean().optional(),
      description: formattableResponse.optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: elementsLinks4Response.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      identifier: data['identifier'],
      name: data['name'],
      active: data['active'],
      statusExplanation: data['statusExplanation'],
      public: data['public'],
      description: data['description'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedElements6Request = z.lazy(() => {
  return z
    .object({
      _type: elementsType2.optional(),
      id: z.number().gte(1).optional(),
      identifier: z.string().optional(),
      name: z.string().optional(),
      active: z.boolean().optional(),
      statusExplanation: elementsStatusExplanationRequest.optional(),
      public: z.boolean().optional(),
      description: formattableRequest.optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: elementsLinks4Request.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      identifier: data['identifier'],
      name: data['name'],
      active: data['active'],
      statusExplanation: data['statusExplanation'],
      public: data['public'],
      description: data['description'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});
