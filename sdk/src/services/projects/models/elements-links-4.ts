// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksUpdate7, _linksUpdate7, _linksUpdate7Request, _linksUpdate7Response } from './_links-update-7';
import {
  _LinksUpdateImmediately10,
  _linksUpdateImmediately10,
  _linksUpdateImmediately10Request,
  _linksUpdateImmediately10Response,
} from './_links-update-immediately-10';
import { _LinksDelete13, _linksDelete13, _linksDelete13Request, _linksDelete13Response } from './_links-delete-13';
import {
  _LinksCreateWorkPackage2,
  _linksCreateWorkPackage2,
  _linksCreateWorkPackage2Request,
  _linksCreateWorkPackage2Response,
} from './_links-create-work-package-2';
import {
  _LinksCreateWorkPackageImmediately2,
  _linksCreateWorkPackageImmediately2,
  _linksCreateWorkPackageImmediately2Request,
  _linksCreateWorkPackageImmediately2Response,
} from './_links-create-work-package-immediately-2';
import { _LinksSelf53, _linksSelf53, _linksSelf53Request, _linksSelf53Response } from './_links-self-53';
import {
  _LinksCategories2,
  _linksCategories2,
  _linksCategories2Request,
  _linksCategories2Response,
} from './_links-categories-2';
import { _LinksTypes3, _linksTypes3, _linksTypes3Request, _linksTypes3Response } from './_links-types-3';
import { _LinksVersions2, _linksVersions2, _linksVersions2Request, _linksVersions2Response } from './_links-versions-2';
import {
  _LinksMemberships3,
  _linksMemberships3,
  _linksMemberships3Request,
  _linksMemberships3Response,
} from './_links-memberships-3';
import {
  _LinksWorkPackages3,
  _linksWorkPackages3,
  _linksWorkPackages3Request,
  _linksWorkPackages3Response,
} from './_links-work-packages-3';
import { _LinksParent5, _linksParent5, _linksParent5Request, _linksParent5Response } from './_links-parent-5';
import { _LinksStatus5, _linksStatus5, _linksStatus5Request, _linksStatus5Response } from './_links-status-5';
import { _LinksStorages2, _linksStorages2, _linksStorages2Request, _linksStorages2Response } from './_links-storages-2';
import {
  _LinksProjectStorages2,
  _linksProjectStorages2,
  _linksProjectStorages2Request,
  _linksProjectStorages2Response,
} from './_links-project-storages-2';
import {
  _LinksAncestors4,
  _linksAncestors4,
  _linksAncestors4Request,
  _linksAncestors4Response,
} from './_links-ancestors-4';

/**
 * The shape of the model inside the application code - what the users use
 */
export const elementsLinks4 = z.lazy(() => {
  return z.object({
    update: _linksUpdate7.optional(),
    updateImmediately: _linksUpdateImmediately10.optional(),
    delete: _linksDelete13.optional(),
    createWorkPackage: _linksCreateWorkPackage2.optional(),
    createWorkPackageImmediately: _linksCreateWorkPackageImmediately2.optional(),
    self: _linksSelf53,
    categories: _linksCategories2,
    types: _linksTypes3,
    versions: _linksVersions2,
    memberships: _linksMemberships3,
    workPackages: _linksWorkPackages3,
    parent: _linksParent5.optional(),
    status: _linksStatus5.optional(),
    storages: z.array(_linksStorages2).optional(),
    projectStorages: _linksProjectStorages2.optional(),
    ancestors: z.array(_linksAncestors4).optional(),
  });
});

/**
 * 
 * @typedef  {ElementsLinks4} elementsLinks4   
 * @property {_LinksUpdate7} - Form endpoint that aids in updating this project

# Conditions

``Permission``: edit project
 * @property {_LinksUpdateImmediately10} - Directly update this project

# Conditions

``Permission``: edit project
 * @property {_LinksDelete13} - Delete this project

# Conditions

``Permission``: admin
 * @property {_LinksCreateWorkPackage2} - Form endpoint that aids in preparing and creating a work package

# Conditions

``Permission``: add work packages
 * @property {_LinksCreateWorkPackageImmediately2} - Directly creates a work package in the project

# Conditions

``Permission``: add work packages
 * @property {_LinksSelf53} - This project

``Resource``: Project
 * @property {_LinksCategories2} - Categories available in this project

``Resource``: Collection
 * @property {_LinksTypes3} - Types available in this project

``Resource``: Collection

# Conditions

``Permission``: view work packages or manage types
 * @property {_LinksVersions2} - Versions available in this project

``Resource``: Collection

# Conditions

``Permission``: view work packages or manage versions
 * @property {_LinksMemberships3} - Memberships in the  project

``Resource``: Collection

# Conditions

``Permission``: view members
 * @property {_LinksWorkPackages3} - Work Packages of this project

``Resource``: Collection
 * @property {_LinksParent5} - Parent project of the project

``Resource``: Project

# Conditions

``Permission`` edit project
 * @property {_LinksStatus5} - Denotes the status of the project, so whether the project is on track, at risk or is having trouble.

``Resource``: ProjectStatus

# Conditions

``Permission`` edit project
 * @property {_LinksStorages2[]} 
 * @property {_LinksProjectStorages2} - The project storage collection of this project.

``Resource``: Collection

# Conditions

``Permission``: view_file_links
 * @property {_LinksAncestors4[]} 
 */
export type ElementsLinks4 = z.infer<typeof elementsLinks4>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks4Response = z.lazy(() => {
  return z
    .object({
      update: _linksUpdate7Response.optional(),
      updateImmediately: _linksUpdateImmediately10Response.optional(),
      delete: _linksDelete13Response.optional(),
      createWorkPackage: _linksCreateWorkPackage2Response.optional(),
      createWorkPackageImmediately: _linksCreateWorkPackageImmediately2Response.optional(),
      self: _linksSelf53Response,
      categories: _linksCategories2Response,
      types: _linksTypes3Response,
      versions: _linksVersions2Response,
      memberships: _linksMemberships3Response,
      workPackages: _linksWorkPackages3Response,
      parent: _linksParent5Response.optional(),
      status: _linksStatus5Response.optional(),
      storages: z.array(_linksStorages2Response).optional(),
      projectStorages: _linksProjectStorages2Response.optional(),
      ancestors: z.array(_linksAncestors4Response).optional(),
    })
    .transform((data) => ({
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      delete: data['delete'],
      createWorkPackage: data['createWorkPackage'],
      createWorkPackageImmediately: data['createWorkPackageImmediately'],
      self: data['self'],
      categories: data['categories'],
      types: data['types'],
      versions: data['versions'],
      memberships: data['memberships'],
      workPackages: data['workPackages'],
      parent: data['parent'],
      status: data['status'],
      storages: data['storages'],
      projectStorages: data['projectStorages'],
      ancestors: data['ancestors'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks4Request = z.lazy(() => {
  return z
    .object({
      update: _linksUpdate7Request.optional(),
      updateImmediately: _linksUpdateImmediately10Request.optional(),
      delete: _linksDelete13Request.optional(),
      createWorkPackage: _linksCreateWorkPackage2Request.optional(),
      createWorkPackageImmediately: _linksCreateWorkPackageImmediately2Request.optional(),
      self: _linksSelf53Request,
      categories: _linksCategories2Request,
      types: _linksTypes3Request,
      versions: _linksVersions2Request,
      memberships: _linksMemberships3Request,
      workPackages: _linksWorkPackages3Request,
      parent: _linksParent5Request.optional(),
      status: _linksStatus5Request.optional(),
      storages: z.array(_linksStorages2Request).optional(),
      projectStorages: _linksProjectStorages2Request.optional(),
      ancestors: z.array(_linksAncestors4Request).optional(),
    })
    .transform((data) => ({
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      delete: data['delete'],
      createWorkPackage: data['createWorkPackage'],
      createWorkPackageImmediately: data['createWorkPackageImmediately'],
      self: data['self'],
      categories: data['categories'],
      types: data['types'],
      versions: data['versions'],
      memberships: data['memberships'],
      workPackages: data['workPackages'],
      parent: data['parent'],
      status: data['status'],
      storages: data['storages'],
      projectStorages: data['projectStorages'],
      ancestors: data['ancestors'],
    }));
});
