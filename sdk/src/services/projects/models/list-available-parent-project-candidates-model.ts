// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  ListAvailableParentProjectCandidatesModelType,
  listAvailableParentProjectCandidatesModelType,
} from './list-available-parent-project-candidates-model-type';
import {
  ListAvailableParentProjectCandidatesModelLinks,
  listAvailableParentProjectCandidatesModelLinks,
  listAvailableParentProjectCandidatesModelLinksRequest,
  listAvailableParentProjectCandidatesModelLinksResponse,
} from './list-available-parent-project-candidates-model-links';
import {
  ListAvailableParentProjectCandidatesModelEmbedded,
  listAvailableParentProjectCandidatesModelEmbedded,
  listAvailableParentProjectCandidatesModelEmbeddedRequest,
  listAvailableParentProjectCandidatesModelEmbeddedResponse,
} from './list-available-parent-project-candidates-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const listAvailableParentProjectCandidatesModel = z.lazy(() => {
  return z.object({
    _type: listAvailableParentProjectCandidatesModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: listAvailableParentProjectCandidatesModelLinks,
    _embedded: listAvailableParentProjectCandidatesModelEmbedded,
  });
});

/**
 *
 * @typedef  {ListAvailableParentProjectCandidatesModel} listAvailableParentProjectCandidatesModel
 * @property {ListAvailableParentProjectCandidatesModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {ListAvailableParentProjectCandidatesModelLinks}
 * @property {ListAvailableParentProjectCandidatesModelEmbedded}
 */
export type ListAvailableParentProjectCandidatesModel = z.infer<typeof listAvailableParentProjectCandidatesModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const listAvailableParentProjectCandidatesModelResponse = z.lazy(() => {
  return z
    .object({
      _type: listAvailableParentProjectCandidatesModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: listAvailableParentProjectCandidatesModelLinksResponse,
      _embedded: listAvailableParentProjectCandidatesModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const listAvailableParentProjectCandidatesModelRequest = z.lazy(() => {
  return z
    .object({
      _type: listAvailableParentProjectCandidatesModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: listAvailableParentProjectCandidatesModelLinksRequest,
      _embedded: listAvailableParentProjectCandidatesModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
