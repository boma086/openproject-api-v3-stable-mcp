// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  OAuthApplicationReadModelType,
  oAuthApplicationReadModelType,
} from '../file-links/models/o-auth-application-read-model-type';
import {
  OAuthApplicationReadModelLinks,
  oAuthApplicationReadModelLinks,
  oAuthApplicationReadModelLinksRequest,
  oAuthApplicationReadModelLinksResponse,
} from '../file-links/models/o-auth-application-read-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const oAuthApplicationReadModel = z.lazy(() => {
  return z.object({
    id: z.number().gte(1),
    _type: oAuthApplicationReadModelType,
    name: z.string(),
    clientId: z.string(),
    clientSecret: z.string().optional(),
    confidential: z.boolean(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    scopes: z.array(z.string()).optional(),
    _links: oAuthApplicationReadModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {OAuthApplicationReadModel} oAuthApplicationReadModel
 * @property {number}
 * @property {OAuthApplicationReadModelType}
 * @property {string} - The name of the OAuth 2 application
 * @property {string} - OAuth 2 client id
 * @property {string} - OAuth 2 client secret. This is only returned when creating a new OAuth application.
 * @property {boolean} - true, if OAuth 2 credentials are confidential, false, if no secret is stored
 * @property {string} - The time the OAuth 2 Application was created at
 * @property {string} - The time the OAuth 2 Application was last updated
 * @property {string[]} - An array of the scopes of the OAuth 2 Application
 * @property {OAuthApplicationReadModelLinks}
 */
export type OAuthApplicationReadModel = z.infer<typeof oAuthApplicationReadModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthApplicationReadModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1),
      _type: oAuthApplicationReadModelType,
      name: z.string(),
      clientId: z.string(),
      clientSecret: z.string().optional(),
      confidential: z.boolean(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      scopes: z.array(z.string()).optional(),
      _links: oAuthApplicationReadModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      _type: data['_type'],
      name: data['name'],
      clientId: data['clientId'],
      clientSecret: data['clientSecret'],
      confidential: data['confidential'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      scopes: data['scopes'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthApplicationReadModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1),
      _type: oAuthApplicationReadModelType,
      name: z.string(),
      clientId: z.string(),
      clientSecret: z.string().optional(),
      confidential: z.boolean(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      scopes: z.array(z.string()).optional(),
      _links: oAuthApplicationReadModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      _type: data['_type'],
      name: data['name'],
      clientId: data['clientId'],
      clientSecret: data['clientSecret'],
      confidential: data['confidential'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      scopes: data['scopes'],
      _links: data['_links'],
    }));
});
