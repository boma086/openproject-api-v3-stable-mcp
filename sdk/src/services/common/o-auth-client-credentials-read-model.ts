// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  OAuthClientCredentialsReadModelType,
  oAuthClientCredentialsReadModelType,
} from '../file-links/models/o-auth-client-credentials-read-model-type';
import {
  OAuthClientCredentialsReadModelLinks,
  oAuthClientCredentialsReadModelLinks,
  oAuthClientCredentialsReadModelLinksRequest,
  oAuthClientCredentialsReadModelLinksResponse,
} from '../file-links/models/o-auth-client-credentials-read-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const oAuthClientCredentialsReadModel = z.lazy(() => {
  return z.object({
    id: z.number().gte(1),
    _type: oAuthClientCredentialsReadModelType,
    clientId: z.string(),
    confidential: z.boolean(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    _links: oAuthClientCredentialsReadModelLinks,
  });
});

/**
 *
 * @typedef  {OAuthClientCredentialsReadModel} oAuthClientCredentialsReadModel
 * @property {number}
 * @property {OAuthClientCredentialsReadModelType}
 * @property {string} - OAuth 2 client id
 * @property {boolean} - true, if OAuth 2 credentials are confidential, false, if no secret is stored
 * @property {string} - The time the OAuth client credentials were created at
 * @property {string} - The time the OAuth client credentials were last updated
 * @property {OAuthClientCredentialsReadModelLinks}
 */
export type OAuthClientCredentialsReadModel = z.infer<typeof oAuthClientCredentialsReadModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthClientCredentialsReadModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1),
      _type: oAuthClientCredentialsReadModelType,
      clientId: z.string(),
      confidential: z.boolean(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: oAuthClientCredentialsReadModelLinksResponse,
    })
    .transform((data) => ({
      id: data['id'],
      _type: data['_type'],
      clientId: data['clientId'],
      confidential: data['confidential'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthClientCredentialsReadModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1),
      _type: oAuthClientCredentialsReadModelType,
      clientId: z.string(),
      confidential: z.boolean(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: oAuthClientCredentialsReadModelLinksRequest,
    })
    .transform((data) => ({
      id: data['id'],
      _type: data['_type'],
      clientId: data['clientId'],
      confidential: data['confidential'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});
