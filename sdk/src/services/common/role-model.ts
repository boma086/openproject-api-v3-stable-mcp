// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { RoleModelType, roleModelType } from '../memberships/models/role-model-type';
import {
  RoleModelLinks,
  roleModelLinks,
  roleModelLinksRequest,
  roleModelLinksResponse,
} from '../memberships/models/role-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const roleModel = z.lazy(() => {
  return z.object({
    _type: roleModelType.optional(),
    id: z.number().gte(1).optional(),
    name: z.string(),
    _links: roleModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {RoleModel} roleModel
 * @property {RoleModelType}
 * @property {number} - Role id
 * @property {string} - Role name
 * @property {RoleModelLinks}
 */
export type RoleModel = z.infer<typeof roleModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const roleModelResponse = z.lazy(() => {
  return z
    .object({
      _type: roleModelType.optional(),
      id: z.number().gte(1).optional(),
      name: z.string(),
      _links: roleModelLinksResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const roleModelRequest = z.lazy(() => {
  return z
    .object({
      _type: roleModelType.optional(),
      id: z.number().gte(1).optional(),
      name: z.string(),
      _links: roleModelLinksRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      _links: data['_links'],
    }));
});
