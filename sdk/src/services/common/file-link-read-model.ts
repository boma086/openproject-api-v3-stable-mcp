// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { FileLinkReadModelType, fileLinkReadModelType } from '../file-links/models/file-link-read-model-type';
import {
  FileLinkOriginDataModel,
  fileLinkOriginDataModel,
  fileLinkOriginDataModelRequest,
  fileLinkOriginDataModelResponse,
} from './file-link-origin-data-model';
import {
  FileLinkReadModelEmbedded,
  fileLinkReadModelEmbedded,
  fileLinkReadModelEmbeddedRequest,
  fileLinkReadModelEmbeddedResponse,
} from '../file-links/models/file-link-read-model-embedded';
import {
  FileLinkReadModelLinks,
  fileLinkReadModelLinks,
  fileLinkReadModelLinksRequest,
  fileLinkReadModelLinksResponse,
} from '../file-links/models/file-link-read-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const fileLinkReadModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    _type: fileLinkReadModelType.optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    originData: fileLinkOriginDataModel.optional(),
    _embedded: fileLinkReadModelEmbedded.optional(),
    _links: fileLinkReadModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {FileLinkReadModel} fileLinkReadModel
 * @property {number} - File link id
 * @property {FileLinkReadModelType}
 * @property {string} - Time of creation
 * @property {string} - Time of the most recent change to the file link
 * @property {FileLinkOriginDataModel}
 * @property {FileLinkReadModelEmbedded}
 * @property {FileLinkReadModelLinks}
 */
export type FileLinkReadModel = z.infer<typeof fileLinkReadModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkReadModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      _type: fileLinkReadModelType.optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      originData: fileLinkOriginDataModelResponse.optional(),
      _embedded: fileLinkReadModelEmbeddedResponse.optional(),
      _links: fileLinkReadModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      _type: data['_type'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      originData: data['originData'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkReadModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      _type: fileLinkReadModelType.optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      originData: fileLinkOriginDataModelRequest.optional(),
      _embedded: fileLinkReadModelEmbeddedRequest.optional(),
      _links: fileLinkReadModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      _type: data['_type'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      originData: data['originData'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});
