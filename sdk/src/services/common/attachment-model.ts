// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  AttachmentModelDescription,
  attachmentModelDescription,
  attachmentModelDescriptionRequest,
  attachmentModelDescriptionResponse,
} from '../activities/models/attachment-model-description';
import {
  AttachmentModelLinks,
  attachmentModelLinks,
  attachmentModelLinksRequest,
  attachmentModelLinksResponse,
} from '../activities/models/attachment-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const attachmentModel = z.lazy(() => {
  return z.object({
    id: z.number().gte(1).optional(),
    title: z.string(),
    fileName: z.string(),
    fileSize: z.number().gte(0).optional(),
    description: attachmentModelDescription,
    contentType: z.string(),
    digest: z.string(),
    createdAt: z.string(),
    _links: attachmentModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {AttachmentModel} attachmentModel
 * @property {number} - Attachment's id
 * @property {string} - The name of the file
 * @property {string} - The name of the uploaded file
 * @property {number} - The size of the uploaded file in Bytes
 * @property {AttachmentModelDescription} - A user provided description of the file
 * @property {string} - The files MIME-Type as determined by the server
 * @property {string} - A checksum for the files content
 * @property {string} - Time of creation
 * @property {AttachmentModelLinks}
 */
export type AttachmentModel = z.infer<typeof attachmentModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const attachmentModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      title: z.string(),
      fileName: z.string(),
      fileSize: z.number().gte(0).optional(),
      description: attachmentModelDescriptionResponse,
      contentType: z.string(),
      digest: z.string(),
      createdAt: z.string(),
      _links: attachmentModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      title: data['title'],
      fileName: data['fileName'],
      fileSize: data['fileSize'],
      description: data['description'],
      contentType: data['contentType'],
      digest: data['digest'],
      createdAt: data['createdAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const attachmentModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().gte(1).optional(),
      title: z.string(),
      fileName: z.string(),
      fileSize: z.number().gte(0).optional(),
      description: attachmentModelDescriptionRequest,
      contentType: z.string(),
      digest: z.string(),
      createdAt: z.string(),
      _links: attachmentModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      title: data['title'],
      fileName: data['fileName'],
      fileSize: data['fileSize'],
      description: data['description'],
      contentType: data['contentType'],
      digest: data['digest'],
      createdAt: data['createdAt'],
      _links: data['_links'],
    }));
});
