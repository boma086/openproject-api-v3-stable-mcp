// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { AttachmentsModelType, attachmentsModelType } from '../activities/models/attachments-model-type';
import {
  AttachmentsModelLinks,
  attachmentsModelLinks,
  attachmentsModelLinksRequest,
  attachmentsModelLinksResponse,
} from '../activities/models/attachments-model-links';
import {
  AttachmentsModelEmbedded,
  attachmentsModelEmbedded,
  attachmentsModelEmbeddedRequest,
  attachmentsModelEmbeddedResponse,
} from '../activities/models/attachments-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const attachmentsModel = z.lazy(() => {
  return z.object({
    _type: attachmentsModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: attachmentsModelLinks,
    _embedded: attachmentsModelEmbedded,
  });
});

/**
 *
 * @typedef  {AttachmentsModel} attachmentsModel
 * @property {AttachmentsModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {AttachmentsModelLinks}
 * @property {AttachmentsModelEmbedded}
 */
export type AttachmentsModel = z.infer<typeof attachmentsModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const attachmentsModelResponse = z.lazy(() => {
  return z
    .object({
      _type: attachmentsModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: attachmentsModelLinksResponse,
      _embedded: attachmentsModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const attachmentsModelRequest = z.lazy(() => {
  return z
    .object({
      _type: attachmentsModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: attachmentsModelLinksRequest,
      _embedded: attachmentsModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
