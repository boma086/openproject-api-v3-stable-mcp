// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { GroupModelType, groupModelType } from '../groups/models/group-model-type';
import {
  GroupModelLinks,
  groupModelLinks,
  groupModelLinksRequest,
  groupModelLinksResponse,
} from '../groups/models/group-model-links';
import {
  GroupModelEmbedded,
  groupModelEmbedded,
  groupModelEmbeddedRequest,
  groupModelEmbeddedResponse,
} from '../groups/models/group-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const groupModel = z.lazy(() => {
  return z.object({
    _type: groupModelType,
    id: z.number().gte(1),
    name: z.string(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    _links: groupModelLinks,
    _embedded: groupModelEmbedded,
  });
});

/**
 *
 * @typedef  {GroupModel} groupModel
 * @property {GroupModelType}
 * @property {number} - The principal's unique identifier.
 * @property {string} - The principal's display name, layout depends on instance settings.
 * @property {string} - Time of creation
 * @property {string} - Time of the most recent change to the principal
 * @property {GroupModelLinks}
 * @property {GroupModelEmbedded}
 */
export type GroupModel = z.infer<typeof groupModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const groupModelResponse = z.lazy(() => {
  return z
    .object({
      _type: groupModelType,
      id: z.number().gte(1),
      name: z.string(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: groupModelLinksResponse,
      _embedded: groupModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const groupModelRequest = z.lazy(() => {
  return z
    .object({
      _type: groupModelType,
      id: z.number().gte(1),
      name: z.string(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      _links: groupModelLinksRequest,
      _embedded: groupModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      name: data['name'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
