// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const schemaPropertyModel = z.lazy(() => {
  return z.object({
    type: z.string(),
    name: z.string(),
    required: z.boolean(),
    hasDefault: z.boolean(),
    writable: z.boolean(),
    object: z.any().optional(),
    location: z.string().optional(),
    _links: z.any().optional(),
  });
});

/**
 *
 * @typedef  {SchemaPropertyModel} schemaPropertyModel
 * @property {string} - The resource type for this property.
 * @property {string} - The name of the property.
 * @property {boolean} - Indicates, if the property is required for submitting a request of this schema.
 * @property {boolean} - Indicates, if the property has a default.
 * @property {boolean} - Indicates, if the property is writable when sending a request of this schema.
 * @property {any} - Additional options for the property.
 * @property {string} - Defines the json path where the property is located in the payload.
 * @property {any} - Useful links for this property (e.g. an endpoint to fetch allowed values)
 */
export type SchemaPropertyModel = z.infer<typeof schemaPropertyModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaPropertyModelResponse = z.lazy(() => {
  return z
    .object({
      type: z.string(),
      name: z.string(),
      required: z.boolean(),
      hasDefault: z.boolean(),
      writable: z.boolean(),
      object: z.any().optional(),
      location: z.string().optional(),
      _links: z.any().optional(),
    })
    .transform((data) => ({
      type: data['type'],
      name: data['name'],
      required: data['required'],
      hasDefault: data['hasDefault'],
      writable: data['writable'],
      object: data['object'],
      location: data['location'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaPropertyModelRequest = z.lazy(() => {
  return z
    .object({
      type: z.string(),
      name: z.string(),
      required: z.boolean(),
      hasDefault: z.boolean(),
      writable: z.boolean(),
      object: z.any().optional(),
      location: z.string().optional(),
      _links: z.any().optional(),
    })
    .transform((data) => ({
      type: data['type'],
      name: data['name'],
      required: data['required'],
      hasDefault: data['hasDefault'],
      writable: data['writable'],
      object: data['object'],
      location: data['location'],
      _links: data['_links'],
    }));
});
