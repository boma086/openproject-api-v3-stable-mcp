// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  QueryFilterInstanceSchemaModelLinks,
  queryFilterInstanceSchemaModelLinks,
  queryFilterInstanceSchemaModelLinksRequest,
  queryFilterInstanceSchemaModelLinksResponse,
} from '../queries/models/query-filter-instance-schema-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const queryFilterInstanceSchemaModel = z.lazy(() => {
  return z.object({
    name: z.string(),
    filter: z.string(),
    _links: queryFilterInstanceSchemaModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {QueryFilterInstanceSchemaModel} queryFilterInstanceSchemaModel
 * @property {string} - Describes the name attribute
 * @property {string} - QuerySortBy name
 * @property {QueryFilterInstanceSchemaModelLinks}
 */
export type QueryFilterInstanceSchemaModel = z.infer<typeof queryFilterInstanceSchemaModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const queryFilterInstanceSchemaModelResponse = z.lazy(() => {
  return z
    .object({
      name: z.string(),
      filter: z.string(),
      _links: queryFilterInstanceSchemaModelLinksResponse.optional(),
    })
    .transform((data) => ({
      name: data['name'],
      filter: data['filter'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const queryFilterInstanceSchemaModelRequest = z.lazy(() => {
  return z
    .object({
      name: z.string(),
      filter: z.string(),
      _links: queryFilterInstanceSchemaModelLinksRequest.optional(),
    })
    .transform((data) => ({
      name: data['name'],
      filter: data['filter'],
      _links: data['_links'],
    }));
});
