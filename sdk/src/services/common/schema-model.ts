// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { SchemaModelType, schemaModelType } from '../notifications/models/schema-model-type';
import {
  SchemaModelLinks,
  schemaModelLinks,
  schemaModelLinksRequest,
  schemaModelLinksResponse,
} from '../notifications/models/schema-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const schemaModel = z.lazy(() => {
  return z.object({
    _type: schemaModelType,
    _dependencies: z.array(z.string()).optional(),
    _links: schemaModelLinks,
  });
});

/**
 *
 * @typedef  {SchemaModel} schemaModel
 * @property {SchemaModelType}
 * @property {string[]} - A list of dependencies between one property's value and another property
 * @property {SchemaModelLinks}
 */
export type SchemaModel = z.infer<typeof schemaModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaModelResponse = z.lazy(() => {
  return z
    .object({
      _type: schemaModelType,
      _dependencies: z.array(z.string()).optional(),
      _links: schemaModelLinksResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      _dependencies: data['_dependencies'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaModelRequest = z.lazy(() => {
  return z
    .object({
      _type: schemaModelType,
      _dependencies: z.array(z.string()).optional(),
      _links: schemaModelLinksRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      _dependencies: data['_dependencies'],
      _links: data['_links'],
    }));
});
