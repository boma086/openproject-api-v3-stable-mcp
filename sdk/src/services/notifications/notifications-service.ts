// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import {
  NotificationCollectionModel,
  notificationCollectionModelResponse,
} from './models/notification-collection-model';
import { ListNotificationsParams, ReadNotificationsParams, UnreadNotificationsParams } from './request-params';
import { NotificationModel, notificationModelResponse } from './models/notification-model';
import { ValuesPropertyModel, valuesPropertyModelResponse } from './models/values-property-model';

export class NotificationsService extends BaseService {
  /**
 * Returns the collection of available in-app notifications. The notifications returned depend on the providedparameters and also on the requesting user's permissions.

Contrary to most collections, this one also links to and embeds schemas for the `details` properties of the notifications returned.
This is an optimization. Clients will receive the information necessary to display the various types of details that a notification
can carry.
 * @param {number} [params.offset] - Page number inside the requested collection.
 * @param {number} [params.pageSize] - Number of elements to display per page.
 * @param {string} [params.sortBy] - JSON specifying sort criteria.
Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/) endpoint. Currently supported sorts are:

+ id: Sort by primary key

+ reason: Sort by notification reason

+ readIAN: Sort by read status
 * @param {string} [params.groupBy] - string specifying group_by criteria.

+ reason: Group by notification reason

+ project: Sort by associated project
 * @param {string} [params.filters] - JSON specifying filter conditions.
Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/) endpoint. Currently supported filters are:

+ id: Filter by primary key

+ project: Filter by the project the notification was created in

+ readIAN: Filter by read status

+ reason: Filter by the reason, e.g. 'mentioned' or 'assigned' the notification was created because of

+ resourceId: Filter by the id of the resource the notification was created for. Ideally used together with the `resourceType` filter.

+ resourceType: Filter by the type of the resource the notification was created for. Ideally used together with the `resourceId` filter.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<NotificationCollectionModel>>} OK
 */
  async listNotifications(
    params?: ListNotificationsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<NotificationCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/notifications')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: notificationCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'offset',
        value: params?.offset,
      })
      .addQueryParam({
        key: 'pageSize',
        value: params?.pageSize,
      })
      .addQueryParam({
        key: 'sortBy',
        value: params?.sortBy,
      })
      .addQueryParam({
        key: 'groupBy',
        value: params?.groupBy,
      })
      .addQueryParam({
        key: 'filters',
        value: params?.filters,
      })
      .build();
    return this.client.call<NotificationCollectionModel>(request);
  }

  /**
 * Marks the whole notification collection as read. The collection contains only elements the authenticated user cansee, and can be further reduced with filters.
 * @param {string} [params.filters] - JSON specifying filter conditions.
Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/)
endpoint. Currently supported filters are:

+ id: Filter by primary key

+ project: Filter by the project the notification was created in

+ reason: Filter by the reason, e.g. 'mentioned' or 'assigned' the notification was created because of

+ resourceId: Filter by the id of the resource the notification was created for. Ideally used together with the
  `resourceType` filter.

+ resourceType: Filter by the type of the resource the notification was created for. Ideally used together with
  the `resourceId` filter.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async readNotifications(
    params?: ReadNotificationsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<void>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api/v3/notifications/read_ian')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.undefined(),
        contentType: ContentType.NoContent,
        status: 204,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filters',
        value: params?.filters,
      })
      .build();
    return this.client.call<void>(request);
  }

  /**
 * Marks the whole notification collection as unread. The collection contains only elements the authenticated user cansee, and can be further reduced with filters.
 * @param {string} [params.filters] - JSON specifying filter conditions.
Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/)
endpoint. Currently supported filters are:

+ id: Filter by primary key

+ project: Filter by the project the notification was created in

+ reason: Filter by the reason, e.g. 'mentioned' or 'assigned' the notification was created because of

+ resourceId: Filter by the id of the resource the notification was created for. Ideally used together with the
  `resourceType` filter.

+ resourceType: Filter by the type of the resource the notification was created for. Ideally used together with
  the `resourceId` filter.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async unreadNotifications(
    params?: UnreadNotificationsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<void>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api/v3/notifications/unread_ian')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.undefined(),
        contentType: ContentType.NoContent,
        status: 204,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filters',
        value: params?.filters,
      })
      .build();
    return this.client.call<void>(request);
  }

  /**
   * Returns the notification identified by the notification id.
   * @param {number} id - notification id
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<NotificationModel>>} OK
   */
  async viewNotification(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<NotificationModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/notifications/{id}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: notificationModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<NotificationModel>(request);
  }

  /**
   * Returns an individual detail of a notification identified by the notification id and the id of the detail.
   * @param {number} notificationId - notification id
   * @param {number} id - detail id
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<ValuesPropertyModel>>} OK
   */
  async viewNotificationDetail(
    notificationId: number,
    id: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ValuesPropertyModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/notifications/{notification_id}/details/{id}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: valuesPropertyModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'notification_id',
        value: notificationId,
      })
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<ValuesPropertyModel>(request);
  }

  /**
   * Marks the given notification as read.
   * @param {number} id - notification id
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} OK
   */
  async readNotification(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<void>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api/v3/notifications/{id}/read_ian')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.undefined(),
        contentType: ContentType.NoContent,
        status: 204,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<void>(request);
  }

  /**
   * Marks the given notification as unread.
   * @param {number} id - notification id
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} OK
   */
  async unreadNotification(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<void>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api/v3/notifications/{id}/unread_ian')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.undefined(),
        contentType: ContentType.NoContent,
        status: 204,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<void>(request);
  }
}
