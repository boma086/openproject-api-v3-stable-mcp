// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf48, _linksSelf48, _linksSelf48Request, _linksSelf48Response } from './_links-self-48';
import { ReadIan, readIan, readIanRequest, readIanResponse } from './read-ian';
import { UnreadIan, unreadIan, unreadIanRequest, unreadIanResponse } from './unread-ian';
import { _LinksProject12, _linksProject12, _linksProject12Request, _linksProject12Response } from './_links-project-12';
import { Actor, actor, actorRequest, actorResponse } from './actor';
import { Resource, resource, resourceRequest, resourceResponse } from './resource';
import { _LinksActivity1, _linksActivity1, _linksActivity1Request, _linksActivity1Response } from './_links-activity-1';
import { _LinksDetails, _linksDetails, _linksDetailsRequest, _linksDetailsResponse } from './_links-details';

/**
 * The shape of the model inside the application code - what the users use
 */
export const notificationModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf48,
    readIan: readIan.optional(),
    unreadIan: unreadIan.optional(),
    project: _linksProject12,
    actor: actor,
    resource: resource,
    activity: _linksActivity1,
    details: z.array(_linksDetails),
  });
});

/**
 * 
 * @typedef  {NotificationModelLinks} notificationModelLinks   
 * @property {_LinksSelf48} - This notification

``Resource``: Notification
 * @property {ReadIan} - Request to mark the notification as read. Only available if the notification is currently unread.
 * @property {UnreadIan} - Request to mark the notification as unread. Only available if the notification is currently read.
 * @property {_LinksProject12} - The project the notification originated in

``Resource``: Project
 * @property {Actor} - The user that caused the notification. This might be null in
case no user triggered the notification.

``Resource``: User
 * @property {Resource} - The linked resource of the notification, if any.

``Resource``: Polymorphic
 * @property {_LinksActivity1} - The journal activity, if the notification originated from a journal entry. This might be null in
case no activity triggered the notification.

``Resource``: Activity
 * @property {_LinksDetails[]} 
 */
export type NotificationModelLinks = z.infer<typeof notificationModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf48Response,
      readIAN: readIanResponse.optional(),
      unreadIAN: unreadIanResponse.optional(),
      project: _linksProject12Response,
      actor: actorResponse,
      resource: resourceResponse,
      activity: _linksActivity1Response,
      details: z.array(_linksDetailsResponse),
    })
    .transform((data) => ({
      self: data['self'],
      readIan: data['readIAN'],
      unreadIan: data['unreadIAN'],
      project: data['project'],
      actor: data['actor'],
      resource: data['resource'],
      activity: data['activity'],
      details: data['details'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf48Request,
      readIan: readIanRequest.optional(),
      unreadIan: unreadIanRequest.optional(),
      project: _linksProject12Request,
      actor: actorRequest,
      resource: resourceRequest,
      activity: _linksActivity1Request,
      details: z.array(_linksDetailsRequest),
    })
    .transform((data) => ({
      self: data['self'],
      readIAN: data['readIan'],
      unreadIAN: data['unreadIan'],
      project: data['project'],
      actor: data['actor'],
      resource: data['resource'],
      activity: data['activity'],
      details: data['details'],
    }));
});
