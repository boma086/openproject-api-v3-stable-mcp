// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { UserModel, userModel, userModelRequest, userModelResponse } from '../../common/user-model';
import { ProjectModel, projectModel, projectModelRequest, projectModelResponse } from '../../common/project-model';
import { ActivityModel, activityModel, activityModelRequest, activityModelResponse } from '../../common/activity-model';
import {
  WorkPackageModel,
  workPackageModel,
  workPackageModelRequest,
  workPackageModelResponse,
} from '../../common/work-package-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const notificationModelEmbedded = z.lazy(() => {
  return z.object({
    actor: userModel.optional(),
    project: projectModel,
    activity: activityModel.optional(),
    resource: workPackageModel,
  });
});

/**
 *
 * @typedef  {NotificationModelEmbedded} notificationModelEmbedded
 * @property {UserModel}
 * @property {ProjectModel}
 * @property {ActivityModel}
 * @property {WorkPackageModel}
 */
export type NotificationModelEmbedded = z.infer<typeof notificationModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      actor: userModelResponse.optional(),
      project: projectModelResponse,
      activity: activityModelResponse.optional(),
      resource: workPackageModelResponse,
    })
    .transform((data) => ({
      actor: data['actor'],
      project: data['project'],
      activity: data['activity'],
      resource: data['resource'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      actor: userModelRequest.optional(),
      project: projectModelRequest,
      activity: activityModelRequest.optional(),
      resource: workPackageModelRequest,
    })
    .transform((data) => ({
      actor: data['actor'],
      project: data['project'],
      activity: data['activity'],
      resource: data['resource'],
    }));
});
