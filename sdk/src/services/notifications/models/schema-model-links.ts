// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf49, _linksSelf49, _linksSelf49Request, _linksSelf49Response } from './_links-self-49';

/**
 * The shape of the model inside the application code - what the users use
 */
export const schemaModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf49.optional(),
  });
});

/**
 * 
 * @typedef  {SchemaModelLinks} schemaModelLinks   
 * @property {_LinksSelf49} - This schema

``Resource``: Schema
 */
export type SchemaModelLinks = z.infer<typeof schemaModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf49Response.optional(),
    })
    .transform((data) => ({
      self: data['self'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf49Request.optional(),
    })
    .transform((data) => ({
      self: data['self'],
    }));
});
