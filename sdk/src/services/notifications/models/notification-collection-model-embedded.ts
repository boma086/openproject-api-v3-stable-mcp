// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  NotificationModel,
  notificationModel,
  notificationModelRequest,
  notificationModelResponse,
} from './notification-model';
import { SchemaModel, schemaModel, schemaModelRequest, schemaModelResponse } from '../../common/schema-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const notificationCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(notificationModel),
    detailsSchemas: z.array(schemaModel),
  });
});

/**
 *
 * @typedef  {NotificationCollectionModelEmbedded} notificationCollectionModelEmbedded
 * @property {NotificationModel[]}
 * @property {SchemaModel[]}
 */
export type NotificationCollectionModelEmbedded = z.infer<typeof notificationCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(notificationModelResponse),
      detailsSchemas: z.array(schemaModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
      detailsSchemas: data['detailsSchemas'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(notificationModelRequest),
      detailsSchemas: z.array(schemaModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
      detailsSchemas: data['detailsSchemas'],
    }));
});
