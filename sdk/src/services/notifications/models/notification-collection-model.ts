// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { NotificationCollectionModelType, notificationCollectionModelType } from './notification-collection-model-type';
import {
  NotificationCollectionModelLinks,
  notificationCollectionModelLinks,
  notificationCollectionModelLinksRequest,
  notificationCollectionModelLinksResponse,
} from './notification-collection-model-links';
import {
  NotificationCollectionModelEmbedded,
  notificationCollectionModelEmbedded,
  notificationCollectionModelEmbeddedRequest,
  notificationCollectionModelEmbeddedResponse,
} from './notification-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const notificationCollectionModel = z.lazy(() => {
  return z.object({
    _type: notificationCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: notificationCollectionModelLinks,
    _embedded: notificationCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {NotificationCollectionModel} notificationCollectionModel
 * @property {NotificationCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {NotificationCollectionModelLinks}
 * @property {NotificationCollectionModelEmbedded}
 */
export type NotificationCollectionModel = z.infer<typeof notificationCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: notificationCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: notificationCollectionModelLinksResponse,
      _embedded: notificationCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: notificationCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: notificationCollectionModelLinksRequest,
      _embedded: notificationCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
