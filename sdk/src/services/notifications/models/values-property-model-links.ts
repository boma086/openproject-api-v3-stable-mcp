// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf47, _linksSelf47, _linksSelf47Request, _linksSelf47Response } from './_links-self-47';
import { _LinksSchema4, _linksSchema4, _linksSchema4Request, _linksSchema4Response } from './_links-schema-4';

/**
 * The shape of the model inside the application code - what the users use
 */
export const valuesPropertyModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf47,
    schema: _linksSchema4,
  });
});

/**
 * 
 * @typedef  {ValuesPropertyModelLinks} valuesPropertyModelLinks   
 * @property {_LinksSelf47} - This key - value pair.

``Resource``: Storage
 * @property {_LinksSchema4} - The schema describing the key - value pair.

``Resource``: Schema
 */
export type ValuesPropertyModelLinks = z.infer<typeof valuesPropertyModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const valuesPropertyModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf47Response,
      schema: _linksSchema4Response,
    })
    .transform((data) => ({
      self: data['self'],
      schema: data['schema'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const valuesPropertyModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf47Request,
      schema: _linksSchema4Request,
    })
    .transform((data) => ({
      self: data['self'],
      schema: data['schema'],
    }));
});
