// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ValuesPropertyModelType, valuesPropertyModelType } from './values-property-model-type';
import {
  ValuesPropertyModelLinks,
  valuesPropertyModelLinks,
  valuesPropertyModelLinksRequest,
  valuesPropertyModelLinksResponse,
} from './values-property-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const valuesPropertyModel = z.lazy(() => {
  return z.object({
    _type: valuesPropertyModelType,
    property: z.string(),
    value: z.string(),
    _links: valuesPropertyModelLinks,
  });
});

/**
 *
 * @typedef  {ValuesPropertyModel} valuesPropertyModel
 * @property {ValuesPropertyModelType}
 * @property {string} - The key of the key - value pair represented by the Values::Property
 * @property {string} - The value of the key - value pair represented by the Values::Property
 * @property {ValuesPropertyModelLinks}
 */
export type ValuesPropertyModel = z.infer<typeof valuesPropertyModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const valuesPropertyModelResponse = z.lazy(() => {
  return z
    .object({
      _type: valuesPropertyModelType,
      property: z.string(),
      value: z.string(),
      _links: valuesPropertyModelLinksResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      property: data['property'],
      value: data['value'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const valuesPropertyModelRequest = z.lazy(() => {
  return z
    .object({
      _type: valuesPropertyModelType,
      property: z.string(),
      value: z.string(),
      _links: valuesPropertyModelLinksRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      property: data['property'],
      value: data['value'],
      _links: data['_links'],
    }));
});
