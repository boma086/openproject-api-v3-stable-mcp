// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const configurationModel = z.lazy(() => {
  return z.object({
    maximumAttachmentFileSize: z.number().optional(),
    hostName: z.string().optional(),
    perPageOptions: z.array(z.number()).optional(),
    durationFormat: z.string().optional(),
    activeFeatureFlags: z.array(z.string()).optional(),
  });
});

/**
 *
 * @typedef  {ConfigurationModel} configurationModel
 * @property {number} - The maximum allowed size of an attachment in Bytes
 * @property {string} - The host name configured for the system
 * @property {number[]} - Page size steps to be offered in paginated list UI
 * @property {string} - The format used to display Work, Remaining Work, and Spent time durations
 * @property {string[]} - The list of all feature flags that are active
 */
export type ConfigurationModel = z.infer<typeof configurationModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const configurationModelResponse = z.lazy(() => {
  return z
    .object({
      maximumAttachmentFileSize: z.number().optional(),
      hostName: z.string().optional(),
      perPageOptions: z.array(z.number()).optional(),
      durationFormat: z.string().optional(),
      activeFeatureFlags: z.array(z.string()).optional(),
    })
    .transform((data) => ({
      maximumAttachmentFileSize: data['maximumAttachmentFileSize'],
      hostName: data['hostName'],
      perPageOptions: data['perPageOptions'],
      durationFormat: data['durationFormat'],
      activeFeatureFlags: data['activeFeatureFlags'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const configurationModelRequest = z.lazy(() => {
  return z
    .object({
      maximumAttachmentFileSize: z.number().optional(),
      hostName: z.string().optional(),
      perPageOptions: z.array(z.number()).optional(),
      durationFormat: z.string().optional(),
      activeFeatureFlags: z.array(z.string()).optional(),
    })
    .transform((data) => ({
      maximumAttachmentFileSize: data['maximumAttachmentFileSize'],
      hostName: data['hostName'],
      perPageOptions: data['perPageOptions'],
      durationFormat: data['durationFormat'],
      activeFeatureFlags: data['activeFeatureFlags'],
    }));
});
