// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf41, _linksSelf41, _linksSelf41Request, _linksSelf41Response } from './_links-self-41';
import { _LinksSchema3, _linksSchema3, _linksSchema3Request, _linksSchema3Response } from './_links-schema-3';
import { _LinksUpdate6, _linksUpdate6, _linksUpdate6Request, _linksUpdate6Response } from './_links-update-6';
import {
  _LinksUpdateImmediately7,
  _linksUpdateImmediately7,
  _linksUpdateImmediately7Request,
  _linksUpdateImmediately7Response,
} from './_links-update-immediately-7';
import { _LinksProject8, _linksProject8, _linksProject8Request, _linksProject8Response } from './_links-project-8';
import {
  _LinksPrincipal1,
  _linksPrincipal1,
  _linksPrincipal1Request,
  _linksPrincipal1Response,
} from './_links-principal-1';
import { _LinksRoles1, _linksRoles1, _linksRoles1Request, _linksRoles1Response } from './_links-roles-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const membershipReadModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf41,
    schema: _linksSchema3,
    update: _linksUpdate6.optional(),
    updateImmediately: _linksUpdateImmediately7.optional(),
    project: _linksProject8,
    principal: _linksPrincipal1,
    roles: z.array(_linksRoles1),
  });
});

/**
 * 
 * @typedef  {MembershipReadModelLinks} membershipReadModelLinks   
 * @property {_LinksSelf41} - This membership.

``Resource``: Membership
 * @property {_LinksSchema3} - This membership schema.

``Resource``: Schema
 * @property {_LinksUpdate6} - The endpoint for updating the membership.

# Conditions

``Permission``: manage_members
 * @property {_LinksUpdateImmediately7} - The endpoint for updating the membership without form validation.

# Conditions

``Permission``: manage_members
 * @property {_LinksProject8} - The project the membership is related to.

``Resource``: Project
 * @property {_LinksPrincipal1} - The principal the membership is related to.

``Resource``: Principal
 * @property {_LinksRoles1[]} 
 */
export type MembershipReadModelLinks = z.infer<typeof membershipReadModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipReadModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf41Response,
      schema: _linksSchema3Response,
      update: _linksUpdate6Response.optional(),
      updateImmediately: _linksUpdateImmediately7Response.optional(),
      project: _linksProject8Response,
      principal: _linksPrincipal1Response,
      roles: z.array(_linksRoles1Response),
    })
    .transform((data) => ({
      self: data['self'],
      schema: data['schema'],
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      project: data['project'],
      principal: data['principal'],
      roles: data['roles'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipReadModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf41Request,
      schema: _linksSchema3Request,
      update: _linksUpdate6Request.optional(),
      updateImmediately: _linksUpdateImmediately7Request.optional(),
      project: _linksProject8Request,
      principal: _linksPrincipal1Request,
      roles: z.array(_linksRoles1Request),
    })
    .transform((data) => ({
      self: data['self'],
      schema: data['schema'],
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      project: data['project'],
      principal: data['principal'],
      roles: data['roles'],
    }));
});
