// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { MembershipCollectionModelType, membershipCollectionModelType } from './membership-collection-model-type';
import {
  MembershipCollectionModelLinks,
  membershipCollectionModelLinks,
  membershipCollectionModelLinksRequest,
  membershipCollectionModelLinksResponse,
} from './membership-collection-model-links';
import {
  MembershipCollectionModelEmbedded,
  membershipCollectionModelEmbedded,
  membershipCollectionModelEmbeddedRequest,
  membershipCollectionModelEmbeddedResponse,
} from './membership-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const membershipCollectionModel = z.lazy(() => {
  return z.object({
    _type: membershipCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: membershipCollectionModelLinks,
    pageSize: z.number().gte(0),
    offset: z.number().gte(1),
    _embedded: membershipCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {MembershipCollectionModel} membershipCollectionModel
 * @property {MembershipCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {MembershipCollectionModelLinks}
 * @property {number} - Amount of elements that a response will hold.
 * @property {number} - The page number that is requested from paginated collection.
 * @property {MembershipCollectionModelEmbedded}
 */
export type MembershipCollectionModel = z.infer<typeof membershipCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: membershipCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: membershipCollectionModelLinksResponse,
      pageSize: z.number().gte(0),
      offset: z.number().gte(1),
      _embedded: membershipCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      pageSize: data['pageSize'],
      offset: data['offset'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: membershipCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: membershipCollectionModelLinksRequest,
      pageSize: z.number().gte(0),
      offset: z.number().gte(1),
      _embedded: membershipCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      pageSize: data['pageSize'],
      offset: data['offset'],
      _embedded: data['_embedded'],
    }));
});
