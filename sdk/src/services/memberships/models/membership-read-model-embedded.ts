// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ProjectModel, projectModel, projectModelRequest, projectModelResponse } from '../../common/project-model';
import {
  _EmbeddedPrincipal,
  _embeddedPrincipal,
  _embeddedPrincipalRequest,
  _embeddedPrincipalResponse,
} from './_embedded-principal';
import { RoleModel, roleModel, roleModelRequest, roleModelResponse } from '../../common/role-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const membershipReadModelEmbedded = z.lazy(() => {
  return z.object({
    project: projectModel.optional(),
    principal: _embeddedPrincipal.optional(),
    roles: z.array(roleModel).optional(),
  });
});

/**
 *
 * @typedef  {MembershipReadModelEmbedded} membershipReadModelEmbedded
 * @property {ProjectModel}
 * @property {_EmbeddedPrincipal}
 * @property {RoleModel[]}
 */
export type MembershipReadModelEmbedded = z.infer<typeof membershipReadModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipReadModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      project: projectModelResponse.optional(),
      principal: _embeddedPrincipalResponse.optional(),
      roles: z.array(roleModelResponse).optional(),
    })
    .transform((data) => ({
      project: data['project'],
      principal: data['principal'],
      roles: data['roles'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipReadModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      project: projectModelRequest.optional(),
      principal: _embeddedPrincipalRequest.optional(),
      roles: z.array(roleModelRequest).optional(),
    })
    .transform((data) => ({
      project: data['project'],
      principal: data['principal'],
      roles: data['roles'],
    }));
});
