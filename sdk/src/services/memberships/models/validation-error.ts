// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ErrorResponse, errorResponse, errorResponseRequest, errorResponseResponse } from './error-response';

/**
 * The shape of the model inside the application code - what the users use
 */
export const validationError = z.lazy(() => {
  return z.object({
    base: errorResponse.optional(),
    principal: errorResponse.optional(),
    roles: errorResponse.optional(),
  });
});

/**
 *
 * @typedef  {ValidationError} validationError
 * @property {ErrorResponse}
 * @property {ErrorResponse}
 * @property {ErrorResponse}
 */
export type ValidationError = z.infer<typeof validationError>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const validationErrorResponse = z.lazy(() => {
  return z
    .object({
      base: errorResponseResponse.optional(),
      principal: errorResponseResponse.optional(),
      roles: errorResponseResponse.optional(),
    })
    .transform((data) => ({
      base: data['base'],
      principal: data['principal'],
      roles: data['roles'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const validationErrorRequest = z.lazy(() => {
  return z
    .object({
      base: errorResponseRequest.optional(),
      principal: errorResponseRequest.optional(),
      roles: errorResponseRequest.optional(),
    })
    .transform((data) => ({
      base: data['base'],
      principal: data['principal'],
      roles: data['roles'],
    }));
});
