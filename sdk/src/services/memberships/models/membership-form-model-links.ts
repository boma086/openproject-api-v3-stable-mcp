// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf44, _linksSelf44, _linksSelf44Request, _linksSelf44Response } from './_links-self-44';
import { _LinksValidate1, _linksValidate1, _linksValidate1Request, _linksValidate1Response } from './_links-validate-1';
import { Commit, commit, commitRequest, commitResponse } from './commit';

/**
 * The shape of the model inside the application code - what the users use
 */
export const membershipFormModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf44,
    validate: z.array(_linksValidate1),
    commit: commit,
  });
});

/**
 * 
 * @typedef  {MembershipFormModelLinks} membershipFormModelLinks   
 * @property {_LinksSelf44} - This form request.

``Resource``: Form
 * @property {_LinksValidate1[]} 
 * @property {Commit} - The endpoint to create the membership with the same payload, as sent to the form.

``Resource``: Membership
 */
export type MembershipFormModelLinks = z.infer<typeof membershipFormModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipFormModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf44Response,
      validate: z.array(_linksValidate1Response),
      commit: commitResponse,
    })
    .transform((data) => ({
      self: data['self'],
      validate: data['validate'],
      commit: data['commit'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipFormModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf44Request,
      validate: z.array(_linksValidate1Request),
      commit: commitRequest,
    })
    .transform((data) => ({
      self: data['self'],
      validate: data['validate'],
      commit: data['commit'],
    }));
});
