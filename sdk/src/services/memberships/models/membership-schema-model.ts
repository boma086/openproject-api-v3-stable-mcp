// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { MembershipSchemaModelType, membershipSchemaModelType } from './membership-schema-model-type';
import {
  MembershipSchemaModelLinks,
  membershipSchemaModelLinks,
  membershipSchemaModelLinksRequest,
  membershipSchemaModelLinksResponse,
} from './membership-schema-model-links';
import {
  SchemaPropertyModel,
  schemaPropertyModel,
  schemaPropertyModelRequest,
  schemaPropertyModelResponse,
} from '../../common/schema-property-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const membershipSchemaModel = z.lazy(() => {
  return z.object({
    _type: membershipSchemaModelType,
    _dependencies: z.array(z.string()).optional(),
    _links: membershipSchemaModelLinks,
    id: schemaPropertyModel,
    createdAt: schemaPropertyModel,
    updatedAt: schemaPropertyModel,
    notificationMessage: schemaPropertyModel,
    project: schemaPropertyModel,
    principal: schemaPropertyModel,
    roles: schemaPropertyModel,
  });
});

/**
 *
 * @typedef  {MembershipSchemaModel} membershipSchemaModel
 * @property {MembershipSchemaModelType}
 * @property {string[]} - A list of dependencies between one property's value and another property
 * @property {MembershipSchemaModelLinks}
 * @property {SchemaPropertyModel}
 * @property {SchemaPropertyModel}
 * @property {SchemaPropertyModel}
 * @property {SchemaPropertyModel}
 * @property {SchemaPropertyModel}
 * @property {SchemaPropertyModel}
 * @property {SchemaPropertyModel}
 */
export type MembershipSchemaModel = z.infer<typeof membershipSchemaModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipSchemaModelResponse = z.lazy(() => {
  return z
    .object({
      _type: membershipSchemaModelType,
      _dependencies: z.array(z.string()).optional(),
      _links: membershipSchemaModelLinksResponse,
      id: schemaPropertyModelResponse,
      createdAt: schemaPropertyModelResponse,
      updatedAt: schemaPropertyModelResponse,
      notificationMessage: schemaPropertyModelResponse,
      project: schemaPropertyModelResponse,
      principal: schemaPropertyModelResponse,
      roles: schemaPropertyModelResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      _dependencies: data['_dependencies'],
      _links: data['_links'],
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      notificationMessage: data['notificationMessage'],
      project: data['project'],
      principal: data['principal'],
      roles: data['roles'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipSchemaModelRequest = z.lazy(() => {
  return z
    .object({
      _type: membershipSchemaModelType,
      _dependencies: z.array(z.string()).optional(),
      _links: membershipSchemaModelLinksRequest,
      id: schemaPropertyModelRequest,
      createdAt: schemaPropertyModelRequest,
      updatedAt: schemaPropertyModelRequest,
      notificationMessage: schemaPropertyModelRequest,
      project: schemaPropertyModelRequest,
      principal: schemaPropertyModelRequest,
      roles: schemaPropertyModelRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      _dependencies: data['_dependencies'],
      _links: data['_links'],
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      notificationMessage: data['notificationMessage'],
      project: data['project'],
      principal: data['principal'],
      roles: data['roles'],
    }));
});
