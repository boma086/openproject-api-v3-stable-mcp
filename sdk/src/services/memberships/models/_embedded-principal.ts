// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { userModel, userModelRequest, userModelResponse } from '../../common/user-model';
import { groupModel, groupModelRequest, groupModelResponse } from '../../common/group-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _embeddedPrincipal = z.lazy(() => {
  return z.union([userModel, groupModel]);
});

/**
 *
 * @typedef  {_EmbeddedPrincipal} _embeddedPrincipal
 * @property {UserModel}
 * @property {GroupModel}
 */
export type _EmbeddedPrincipal = z.infer<typeof _embeddedPrincipal>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedPrincipalResponse = z.lazy(() => {
  return z.union([userModelResponse, groupModelResponse]);
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _embeddedPrincipalRequest = z.lazy(() => {
  return z.union([userModelRequest, groupModelRequest]);
});
