// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _LinksPrincipal2,
  _linksPrincipal2,
  _linksPrincipal2Request,
  _linksPrincipal2Response,
} from './_links-principal-2';
import { _LinksRoles2, _linksRoles2, _linksRoles2Request, _linksRoles2Response } from './_links-roles-2';
import { _LinksProject9, _linksProject9, _linksProject9Request, _linksProject9Response } from './_links-project-9';

/**
 * The shape of the model inside the application code - what the users use
 */
export const membershipWriteModelLinks = z.lazy(() => {
  return z.object({
    principal: _linksPrincipal2.optional(),
    roles: z.array(_linksRoles2).optional(),
    project: _linksProject9.optional(),
  });
});

/**
 * 
 * @typedef  {MembershipWriteModelLinks} membershipWriteModelLinks   
 * @property {_LinksPrincipal2} - The principal that is to get a membership.

``Resource``: Principal
 * @property {_LinksRoles2[]} 
 * @property {_LinksProject9} - The project that is to get a membership. If no project is given, the principal's membership is supposed
to be global.

``Resource``: Project
 */
export type MembershipWriteModelLinks = z.infer<typeof membershipWriteModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipWriteModelLinksResponse = z.lazy(() => {
  return z
    .object({
      principal: _linksPrincipal2Response.optional(),
      roles: z.array(_linksRoles2Response).optional(),
      project: _linksProject9Response.optional(),
    })
    .transform((data) => ({
      principal: data['principal'],
      roles: data['roles'],
      project: data['project'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipWriteModelLinksRequest = z.lazy(() => {
  return z
    .object({
      principal: _linksPrincipal2Request.optional(),
      roles: z.array(_linksRoles2Request).optional(),
      project: _linksProject9Request.optional(),
    })
    .transform((data) => ({
      principal: data['principal'],
      roles: data['roles'],
      project: data['project'],
    }));
});
