// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksUpdate5, _linksUpdate5, _linksUpdate5Request, _linksUpdate5Response } from './_links-update-5';
import {
  _LinksUpdateImmediately5,
  _linksUpdateImmediately5,
  _linksUpdateImmediately5Request,
  _linksUpdateImmediately5Response,
} from './_links-update-immediately-5';
import { _LinksDelete9, _linksDelete9, _linksDelete9Request, _linksDelete9Response } from './_links-delete-9';
import {
  _LinksCreateWorkPackage1,
  _linksCreateWorkPackage1,
  _linksCreateWorkPackage1Request,
  _linksCreateWorkPackage1Response,
} from './_links-create-work-package-1';
import {
  _LinksCreateWorkPackageImmediately1,
  _linksCreateWorkPackageImmediately1,
  _linksCreateWorkPackageImmediately1Request,
  _linksCreateWorkPackageImmediately1Response,
} from './_links-create-work-package-immediately-1';
import { _LinksSelf39, _linksSelf39, _linksSelf39Request, _linksSelf39Response } from './_links-self-39';
import {
  _LinksCategories1,
  _linksCategories1,
  _linksCategories1Request,
  _linksCategories1Response,
} from './_links-categories-1';
import { _LinksTypes2, _linksTypes2, _linksTypes2Request, _linksTypes2Response } from './_links-types-2';
import { _LinksVersions1, _linksVersions1, _linksVersions1Request, _linksVersions1Response } from './_links-versions-1';
import {
  _LinksMemberships2,
  _linksMemberships2,
  _linksMemberships2Request,
  _linksMemberships2Response,
} from './_links-memberships-2';
import {
  _LinksWorkPackages2,
  _linksWorkPackages2,
  _linksWorkPackages2Request,
  _linksWorkPackages2Response,
} from './_links-work-packages-2';
import { _LinksParent4, _linksParent4, _linksParent4Request, _linksParent4Response } from './_links-parent-4';
import { _LinksStatus4, _linksStatus4, _linksStatus4Request, _linksStatus4Response } from './_links-status-4';
import { _LinksStorages1, _linksStorages1, _linksStorages1Request, _linksStorages1Response } from './_links-storages-1';
import {
  _LinksProjectStorages1,
  _linksProjectStorages1,
  _linksProjectStorages1Request,
  _linksProjectStorages1Response,
} from './_links-project-storages-1';
import {
  _LinksAncestors3,
  _linksAncestors3,
  _linksAncestors3Request,
  _linksAncestors3Response,
} from './_links-ancestors-3';

/**
 * The shape of the model inside the application code - what the users use
 */
export const projectModelLinks = z.lazy(() => {
  return z.object({
    update: _linksUpdate5.optional(),
    updateImmediately: _linksUpdateImmediately5.optional(),
    delete: _linksDelete9.optional(),
    createWorkPackage: _linksCreateWorkPackage1.optional(),
    createWorkPackageImmediately: _linksCreateWorkPackageImmediately1.optional(),
    self: _linksSelf39,
    categories: _linksCategories1,
    types: _linksTypes2,
    versions: _linksVersions1,
    memberships: _linksMemberships2,
    workPackages: _linksWorkPackages2,
    parent: _linksParent4.optional(),
    status: _linksStatus4.optional(),
    storages: z.array(_linksStorages1).optional(),
    projectStorages: _linksProjectStorages1.optional(),
    ancestors: z.array(_linksAncestors3).optional(),
  });
});

/**
 * 
 * @typedef  {ProjectModelLinks} projectModelLinks   
 * @property {_LinksUpdate5} - Form endpoint that aids in updating this project

# Conditions

``Permission``: edit project
 * @property {_LinksUpdateImmediately5} - Directly update this project

# Conditions

``Permission``: edit project
 * @property {_LinksDelete9} - Delete this project

# Conditions

``Permission``: admin
 * @property {_LinksCreateWorkPackage1} - Form endpoint that aids in preparing and creating a work package

# Conditions

``Permission``: add work packages
 * @property {_LinksCreateWorkPackageImmediately1} - Directly creates a work package in the project

# Conditions

``Permission``: add work packages
 * @property {_LinksSelf39} - This project

``Resource``: Project
 * @property {_LinksCategories1} - Categories available in this project

``Resource``: Collection
 * @property {_LinksTypes2} - Types available in this project

``Resource``: Collection

# Conditions

``Permission``: view work packages or manage types
 * @property {_LinksVersions1} - Versions available in this project

``Resource``: Collection

# Conditions

``Permission``: view work packages or manage versions
 * @property {_LinksMemberships2} - Memberships in the  project

``Resource``: Collection

# Conditions

``Permission``: view members
 * @property {_LinksWorkPackages2} - Work Packages of this project

``Resource``: Collection
 * @property {_LinksParent4} - Parent project of the project

``Resource``: Project

# Conditions

``Permission`` edit project
 * @property {_LinksStatus4} - Denotes the status of the project, so whether the project is on track, at risk or is having trouble.

``Resource``: ProjectStatus

# Conditions

``Permission`` edit project
 * @property {_LinksStorages1[]} 
 * @property {_LinksProjectStorages1} - The project storage collection of this project.

``Resource``: Collection

# Conditions

``Permission``: view_file_links
 * @property {_LinksAncestors3[]} 
 */
export type ProjectModelLinks = z.infer<typeof projectModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const projectModelLinksResponse = z.lazy(() => {
  return z
    .object({
      update: _linksUpdate5Response.optional(),
      updateImmediately: _linksUpdateImmediately5Response.optional(),
      delete: _linksDelete9Response.optional(),
      createWorkPackage: _linksCreateWorkPackage1Response.optional(),
      createWorkPackageImmediately: _linksCreateWorkPackageImmediately1Response.optional(),
      self: _linksSelf39Response,
      categories: _linksCategories1Response,
      types: _linksTypes2Response,
      versions: _linksVersions1Response,
      memberships: _linksMemberships2Response,
      workPackages: _linksWorkPackages2Response,
      parent: _linksParent4Response.optional(),
      status: _linksStatus4Response.optional(),
      storages: z.array(_linksStorages1Response).optional(),
      projectStorages: _linksProjectStorages1Response.optional(),
      ancestors: z.array(_linksAncestors3Response).optional(),
    })
    .transform((data) => ({
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      delete: data['delete'],
      createWorkPackage: data['createWorkPackage'],
      createWorkPackageImmediately: data['createWorkPackageImmediately'],
      self: data['self'],
      categories: data['categories'],
      types: data['types'],
      versions: data['versions'],
      memberships: data['memberships'],
      workPackages: data['workPackages'],
      parent: data['parent'],
      status: data['status'],
      storages: data['storages'],
      projectStorages: data['projectStorages'],
      ancestors: data['ancestors'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const projectModelLinksRequest = z.lazy(() => {
  return z
    .object({
      update: _linksUpdate5Request.optional(),
      updateImmediately: _linksUpdateImmediately5Request.optional(),
      delete: _linksDelete9Request.optional(),
      createWorkPackage: _linksCreateWorkPackage1Request.optional(),
      createWorkPackageImmediately: _linksCreateWorkPackageImmediately1Request.optional(),
      self: _linksSelf39Request,
      categories: _linksCategories1Request,
      types: _linksTypes2Request,
      versions: _linksVersions1Request,
      memberships: _linksMemberships2Request,
      workPackages: _linksWorkPackages2Request,
      parent: _linksParent4Request.optional(),
      status: _linksStatus4Request.optional(),
      storages: z.array(_linksStorages1Request).optional(),
      projectStorages: _linksProjectStorages1Request.optional(),
      ancestors: z.array(_linksAncestors3Request).optional(),
    })
    .transform((data) => ({
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      delete: data['delete'],
      createWorkPackage: data['createWorkPackage'],
      createWorkPackageImmediately: data['createWorkPackageImmediately'],
      self: data['self'],
      categories: data['categories'],
      types: data['types'],
      versions: data['versions'],
      memberships: data['memberships'],
      workPackages: data['workPackages'],
      parent: data['parent'],
      status: data['status'],
      storages: data['storages'],
      projectStorages: data['projectStorages'],
      ancestors: data['ancestors'],
    }));
});
