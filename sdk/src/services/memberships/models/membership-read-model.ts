// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { MembershipReadModelType, membershipReadModelType } from './membership-read-model-type';
import {
  MembershipReadModelEmbedded,
  membershipReadModelEmbedded,
  membershipReadModelEmbeddedRequest,
  membershipReadModelEmbeddedResponse,
} from './membership-read-model-embedded';
import {
  MembershipReadModelLinks,
  membershipReadModelLinks,
  membershipReadModelLinksRequest,
  membershipReadModelLinksResponse,
} from './membership-read-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const membershipReadModel = z.lazy(() => {
  return z.object({
    _type: membershipReadModelType,
    id: z.number().gte(1),
    createdAt: z.string(),
    updatedAt: z.string(),
    _embedded: membershipReadModelEmbedded.optional(),
    _links: membershipReadModelLinks,
  });
});

/**
 *
 * @typedef  {MembershipReadModel} membershipReadModel
 * @property {MembershipReadModelType}
 * @property {number} - The membership's id
 * @property {string} - The time the membership was created.
 * @property {string} - The time the membership was last updated.
 * @property {MembershipReadModelEmbedded}
 * @property {MembershipReadModelLinks}
 */
export type MembershipReadModel = z.infer<typeof membershipReadModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipReadModelResponse = z.lazy(() => {
  return z
    .object({
      _type: membershipReadModelType,
      id: z.number().gte(1),
      createdAt: z.string(),
      updatedAt: z.string(),
      _embedded: membershipReadModelEmbeddedResponse.optional(),
      _links: membershipReadModelLinksResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipReadModelRequest = z.lazy(() => {
  return z
    .object({
      _type: membershipReadModelType,
      id: z.number().gte(1),
      createdAt: z.string(),
      updatedAt: z.string(),
      _embedded: membershipReadModelEmbeddedRequest.optional(),
      _links: membershipReadModelLinksRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});
