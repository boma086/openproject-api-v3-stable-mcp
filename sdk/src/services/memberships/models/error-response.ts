// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  ErrorResponseEmbedded,
  errorResponseEmbedded,
  errorResponseEmbeddedRequest,
  errorResponseEmbeddedResponse,
} from './error-response-embedded';
import { ErrorResponseType, errorResponseType } from './error-response-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const errorResponse = z.lazy(() => {
  return z.object({
    _embedded: errorResponseEmbedded.optional(),
    _type: errorResponseType,
    errorIdentifier: z.string(),
    message: z.string(),
  });
});

/**
 *
 * @typedef  {ErrorResponse} errorResponse
 * @property {ErrorResponseEmbedded}
 * @property {ErrorResponseType}
 * @property {string}
 * @property {string}
 */
export type ErrorResponse = z.infer<typeof errorResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const errorResponseResponse = z.lazy(() => {
  return z
    .object({
      _embedded: errorResponseEmbeddedResponse.optional(),
      _type: errorResponseType,
      errorIdentifier: z.string(),
      message: z.string(),
    })
    .transform((data) => ({
      _embedded: data['_embedded'],
      _type: data['_type'],
      errorIdentifier: data['errorIdentifier'],
      message: data['message'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const errorResponseRequest = z.lazy(() => {
  return z
    .object({
      _embedded: errorResponseEmbeddedRequest.optional(),
      _type: errorResponseType,
      errorIdentifier: z.string(),
      message: z.string(),
    })
    .transform((data) => ({
      _embedded: data['_embedded'],
      _type: data['_type'],
      errorIdentifier: data['errorIdentifier'],
      message: data['message'],
    }));
});
