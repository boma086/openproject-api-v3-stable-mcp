// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  MembershipWriteModel,
  membershipWriteModel,
  membershipWriteModelRequest,
  membershipWriteModelResponse,
} from './membership-write-model';
import {
  MembershipSchemaModel,
  membershipSchemaModel,
  membershipSchemaModelRequest,
  membershipSchemaModelResponse,
} from './membership-schema-model';
import { ValidationError, validationError, validationErrorRequest, validationErrorResponse } from './validation-error';

/**
 * The shape of the model inside the application code - what the users use
 */
export const membershipFormModelEmbedded = z.lazy(() => {
  return z.object({
    payload: membershipWriteModel,
    schema: membershipSchemaModel,
    validationError: validationError,
  });
});

/**
 *
 * @typedef  {MembershipFormModelEmbedded} membershipFormModelEmbedded
 * @property {MembershipWriteModel}
 * @property {MembershipSchemaModel}
 * @property {ValidationError}
 */
export type MembershipFormModelEmbedded = z.infer<typeof membershipFormModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipFormModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      payload: membershipWriteModelResponse,
      schema: membershipSchemaModelResponse,
      validationError: validationErrorResponse,
    })
    .transform((data) => ({
      payload: data['payload'],
      schema: data['schema'],
      validationError: data['validationError'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipFormModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      payload: membershipWriteModelRequest,
      schema: membershipSchemaModelRequest,
      validationError: validationErrorRequest,
    })
    .transform((data) => ({
      payload: data['payload'],
      schema: data['schema'],
      validationError: data['validationError'],
    }));
});
