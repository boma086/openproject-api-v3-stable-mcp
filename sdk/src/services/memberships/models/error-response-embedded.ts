// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _EmbeddedDetails,
  _embeddedDetails,
  _embeddedDetailsRequest,
  _embeddedDetailsResponse,
} from './_embedded-details';

/**
 * The shape of the model inside the application code - what the users use
 */
export const errorResponseEmbedded = z.lazy(() => {
  return z.object({
    details: _embeddedDetails.optional(),
  });
});

/**
 *
 * @typedef  {ErrorResponseEmbedded} errorResponseEmbedded
 * @property {_EmbeddedDetails}
 */
export type ErrorResponseEmbedded = z.infer<typeof errorResponseEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const errorResponseEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      details: _embeddedDetailsResponse.optional(),
    })
    .transform((data) => ({
      details: data['details'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const errorResponseEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      details: _embeddedDetailsRequest.optional(),
    })
    .transform((data) => ({
      details: data['details'],
    }));
});
