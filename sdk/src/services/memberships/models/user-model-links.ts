// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  _LinksShowUser1,
  _linksShowUser1,
  _linksShowUser1Request,
  _linksShowUser1Response,
} from './_links-show-user-1';
import {
  _LinksUpdateImmediately6,
  _linksUpdateImmediately6,
  _linksUpdateImmediately6Request,
  _linksUpdateImmediately6Response,
} from './_links-update-immediately-6';
import { _LinksLock1, _linksLock1, _linksLock1Request, _linksLock1Response } from './_links-lock-1';
import { _LinksUnlock1, _linksUnlock1, _linksUnlock1Request, _linksUnlock1Response } from './_links-unlock-1';
import { _LinksDelete10, _linksDelete10, _linksDelete10Request, _linksDelete10Response } from './_links-delete-10';
import {
  _LinksAuthSource1,
  _linksAuthSource1,
  _linksAuthSource1Request,
  _linksAuthSource1Response,
} from './_links-auth-source-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const userModelLinks = z.lazy(() => {
  return z.object({
    showUser: _linksShowUser1.optional(),
    updateImmediately: _linksUpdateImmediately6.optional(),
    lock: _linksLock1.optional(),
    unlock: _linksUnlock1.optional(),
    delete: _linksDelete10.optional(),
    authSource: _linksAuthSource1.optional(),
  });
});

/**
 * 
 * @typedef  {UserModelLinks} userModelLinks   
 * @property {_LinksShowUser1} - A relative path to show the user in the web application.

# Condition

- User is not a new record
- User is not `locked`
 * @property {_LinksUpdateImmediately6} - A link to update the user resource.

# Conditions

- `admin`
 * @property {_LinksLock1} - Restrict the user from logging in and performing any actions.

# Conditions

- User is not locked
- `admin`
 * @property {_LinksUnlock1} - Allow a locked user to login and act again.

# Conditions

- User is not locked
- `admin`
 * @property {_LinksDelete10} - Permanently remove a user from the instance

# Conditions

either:
  - `admin`
  - Setting `users_deletable_by_admin` is set
or:
  - User is self
  - Setting `users_deletable_by_self` is set
 * @property {_LinksAuthSource1} - Permanently remove a user from the instance

# Conditions

- LDAP authentication configured
- `admin`
 */
export type UserModelLinks = z.infer<typeof userModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const userModelLinksResponse = z.lazy(() => {
  return z
    .object({
      showUser: _linksShowUser1Response.optional(),
      updateImmediately: _linksUpdateImmediately6Response.optional(),
      lock: _linksLock1Response.optional(),
      unlock: _linksUnlock1Response.optional(),
      delete: _linksDelete10Response.optional(),
      authSource: _linksAuthSource1Response.optional(),
    })
    .transform((data) => ({
      showUser: data['showUser'],
      updateImmediately: data['updateImmediately'],
      lock: data['lock'],
      unlock: data['unlock'],
      delete: data['delete'],
      authSource: data['authSource'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const userModelLinksRequest = z.lazy(() => {
  return z
    .object({
      showUser: _linksShowUser1Request.optional(),
      updateImmediately: _linksUpdateImmediately6Request.optional(),
      lock: _linksLock1Request.optional(),
      unlock: _linksUnlock1Request.optional(),
      delete: _linksDelete10Request.optional(),
      authSource: _linksAuthSource1Request.optional(),
    })
    .transform((data) => ({
      showUser: data['showUser'],
      updateImmediately: data['updateImmediately'],
      lock: data['lock'],
      unlock: data['unlock'],
      delete: data['delete'],
      authSource: data['authSource'],
    }));
});
