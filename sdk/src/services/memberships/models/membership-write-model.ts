// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  MembershipWriteModelLinks,
  membershipWriteModelLinks,
  membershipWriteModelLinksRequest,
  membershipWriteModelLinksResponse,
} from './membership-write-model-links';
import { _Meta, _meta, _metaRequest, _metaResponse } from './_meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const membershipWriteModel = z.lazy(() => {
  return z.object({
    _links: membershipWriteModelLinks,
    _meta: _meta.optional(),
  });
});

/**
 *
 * @typedef  {MembershipWriteModel} membershipWriteModel
 * @property {MembershipWriteModelLinks}
 * @property {_Meta}
 */
export type MembershipWriteModel = z.infer<typeof membershipWriteModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipWriteModelResponse = z.lazy(() => {
  return z
    .object({
      _links: membershipWriteModelLinksResponse,
      _meta: _metaResponse.optional(),
    })
    .transform((data) => ({
      _links: data['_links'],
      _meta: data['_meta'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const membershipWriteModelRequest = z.lazy(() => {
  return z
    .object({
      _links: membershipWriteModelLinksRequest,
      _meta: _metaRequest.optional(),
    })
    .transform((data) => ({
      _links: data['_links'],
      _meta: data['_meta'],
    }));
});
