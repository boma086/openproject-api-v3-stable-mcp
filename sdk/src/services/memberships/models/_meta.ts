// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  NotificationMessage,
  notificationMessage,
  notificationMessageRequest,
  notificationMessageResponse,
} from './notification-message';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _meta = z.lazy(() => {
  return z.object({
    notificationMessage: notificationMessage.optional(),
    sendNotification: z.boolean().optional(),
  });
});

/**
 *
 * @typedef  {_Meta} _meta
 * @property {NotificationMessage} - A customised notification message, which will overwrite the standard notification.
 * @property {boolean} - Set to false, if no notification should get sent.
 */
export type _Meta = z.infer<typeof _meta>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _metaResponse = z.lazy(() => {
  return z
    .object({
      notificationMessage: notificationMessageResponse.optional(),
      sendNotification: z.boolean().optional(),
    })
    .transform((data) => ({
      notificationMessage: data['notificationMessage'],
      sendNotification: data['sendNotification'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _metaRequest = z.lazy(() => {
  return z
    .object({
      notificationMessage: notificationMessageRequest.optional(),
      sendNotification: z.boolean().optional(),
    })
    .transform((data) => ({
      notificationMessage: data['notificationMessage'],
      sendNotification: data['sendNotification'],
    }));
});
