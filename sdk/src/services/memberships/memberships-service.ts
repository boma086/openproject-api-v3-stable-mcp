// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import { MembershipCollectionModel, membershipCollectionModelResponse } from './models/membership-collection-model';
import { ListMembershipsParams } from './request-params';
import { MembershipWriteModel, membershipWriteModelRequest } from './models/membership-write-model';
import { MembershipReadModel, membershipReadModelResponse } from './models/membership-read-model';
import { ProjectCollectionModel, projectCollectionModelResponse } from '../common/project-collection-model';
import { MembershipFormModel, membershipFormModelResponse } from './models/membership-form-model';
import { MembershipSchemaModel, membershipSchemaModelResponse } from './models/membership-schema-model';

export class MembershipsService extends BaseService {
  /**
 * Returns a collection of memberships. The client can choose to filterthe memberships similar to how work packages are filtered. In addition to the
provided filters, the server will reduce the result set to only contain memberships,
for which the requesting client has sufficient permissions (*view_members*, *manage_members*).
 * @param {string} [params.filters] - JSON specifying filter conditions.
Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/)
endpoint. Currently supported filters are:

+ any_name_attribute: filters memberships based on the name of the principal. All possible name variants
  (and also email and login) are searched.
+ blocked: reduces the result set to all memberships that are temporarily blocked or that are not blocked
  temporarily.
+ group: filters memberships based on the name of a group. The group however is not the principal used for
  filtering. Rather, the memberships of the group are used as the filter values.
+ name: filters memberships based on the name of the principal. Note that only the name is used which depends
  on a setting in the OpenProject instance.
+ principal: filters memberships based on the id of the principal.
+ project: filters memberships based on the id of the project.
+ role: filters memberships based on the id of any role assigned to the membership.
+ status: filters memberships based on the status of the principal.
+ created_at: filters memberships based on the time the membership was created.
+ updated_at: filters memberships based on the time the membership was updated last.
 * @param {string} [params.sortBy] - JSON specifying sort criteria.
Accepts the same format as returned by the [queries](https://www.openproject.org/docs/api/endpoints/queries/)
endpoint. Currently supported sorts are:

+ id: Sort by primary key
+ name: Sort by the name of the principal. Note that this depends on the setting for how the name is to be
  displayed at least for users.
+ email: Sort by the email address of the principal. Groups and principal users, which do not have an email,
  are sorted last.
+ status: Sort by the status of the principal. Groups and principal users, which do not have a status, are
  sorted together with the active users.
+ created_at: Sort by membership creation datetime
+ updated_at: Sort by the time the membership was updated last
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<MembershipCollectionModel>>} OK
 */
  async listMemberships(
    params?: ListMembershipsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MembershipCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/memberships')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: membershipCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'filters',
        value: params?.filters,
      })
      .addQueryParam({
        key: 'sortBy',
        value: params?.sortBy,
      })
      .build();
    return this.client.call<MembershipCollectionModel>(request);
  }

  /**
 * Creates a new membership applying the attributes provided in the body.
You can use the form and schema to retrieve the valid attribute values and by that be guided towards successful
creation.

By providing a `notificationMessage` within the `_meta` block of the payload, the client can include a customized
message to the user of the newly created membership. In case of a group, the message will be sent to every user
belonging to the group.

By including `{ "sendNotifications": false }` within the `_meta` block of the payload, no notifications is send
out at all.
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<MembershipReadModel>>} Created
 */
  async createMembership(
    body: MembershipWriteModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MembershipReadModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api/v3/memberships')
      .setRequestSchema(membershipWriteModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: membershipReadModelResponse,
        contentType: ContentType.Json,
        status: 201,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<MembershipReadModel>(request);
  }

  /**
   * Gets a list of projects in which a membership can be created in. The list contains all projects in which the userissuing the request has the manage members permissions.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<ProjectCollectionModel>>} OK
   */
  async getMembershipsAvailableProjects(requestConfig?: RequestConfig): Promise<HttpResponse<ProjectCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/memberships/available_projects')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: projectCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<ProjectCollectionModel>(request);
  }

  /**
   * Requests and validates the creation form for memberships. The request payload, if sent, is validated. The formendpoint itself does not create a membership.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<MembershipFormModel>>} OK
   */
  async formCreateMembership(
    body: MembershipWriteModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MembershipFormModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api/v3/memberships/form')
      .setRequestSchema(membershipWriteModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: membershipFormModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<MembershipFormModel>(request);
  }

  /**
   * Retrieves the schema for the membership resource object.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<MembershipSchemaModel>>} OK
   */
  async getMembershipSchema(requestConfig?: RequestConfig): Promise<HttpResponse<MembershipSchemaModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/memberships/schema')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: membershipSchemaModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<MembershipSchemaModel>(request);
  }

  /**
   * Retrieves a membership resource identified by the given id.
   * @param {number} id - Membership id
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<MembershipReadModel>>} OK
   */
  async getMembership(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<MembershipReadModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/memberships/{id}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: membershipReadModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<MembershipReadModel>(request);
  }

  /**
 * Updates the given membership by applying the attributes provided in the body.
By providing a `notificationMessage` within the `_meta` block of the payload, the client can include a customized message to the user
of the updated membership. In case of a group, the message will be sent to every user belonging to the group.

By including `{ "sendNotifications": false }` within the `_meta` block of the payload, no notifications is send out at all.
 * @param {number} id - Membership id
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<MembershipReadModel>>} OK
 */
  async updateMembership(
    id: number,
    body: MembershipWriteModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MembershipReadModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('PATCH')
      .setPath('/api/v3/memberships/{id}')
      .setRequestSchema(membershipWriteModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: membershipReadModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<MembershipReadModel>(request);
  }

  /**
   * Deletes the membership.
   * @param {number} id - Membership id
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<any>>} Returned if the membership was successfully deleted
   */
  async deleteMembership(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<void>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('DELETE')
      .setPath('/api/v3/memberships/{id}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.undefined(),
        contentType: ContentType.NoContent,
        status: 204,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<void>(request);
  }

  /**
   * Requests and validates the update form for a membership identified by the given id. The request payload, if sent,is validated. The form endpoint itself does not change the membership.
   * @param {number} id - Membership id
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<MembershipReadModel>>} OK
   */
  async formUpdateMembership(
    id: number,
    body: MembershipWriteModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MembershipReadModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api/v3/memberships/{id}/form')
      .setRequestSchema(membershipWriteModelRequest)
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: membershipReadModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<MembershipReadModel>(request);
  }
}
