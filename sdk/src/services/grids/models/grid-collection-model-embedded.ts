// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { GridReadModel, gridReadModel, gridReadModelRequest, gridReadModelResponse } from './grid-read-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gridCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(gridReadModel),
  });
});

/**
 *
 * @typedef  {GridCollectionModelEmbedded} gridCollectionModelEmbedded
 * @property {GridReadModel[]}
 */
export type GridCollectionModelEmbedded = z.infer<typeof gridCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gridCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(gridReadModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gridCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(gridReadModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
