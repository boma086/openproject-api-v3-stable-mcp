// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { GridWidgetModelType, gridWidgetModelType } from './grid-widget-model-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gridWidgetModel = z.lazy(() => {
  return z.object({
    _type: gridWidgetModelType,
    id: z.number().gte(1).nullable(),
    identifier: z.string(),
    startRow: z.number().gte(1),
    endRow: z.number().gte(1),
    startColumn: z.number().gte(1),
    endColumn: z.number().gte(1),
    options: z.any().optional(),
  });
});

/**
 *
 * @typedef  {GridWidgetModel} gridWidgetModel
 * @property {GridWidgetModelType}
 * @property {number} - The grid widget's unique identifier. Can be null, if a new widget is created within a grid.
 * @property {string} - An alternative, human legible, and unique identifier.
 * @property {number} - The index of the starting row of the widget. The row is inclusive.
 * @property {number} - The index of the ending row of the widget. The row is exclusive.
 * @property {number} - The index of the starting column of the widget. The column is inclusive.
 * @property {number} - The index of the ending column of the widget. The column is exclusive.
 * @property {any}
 */
export type GridWidgetModel = z.infer<typeof gridWidgetModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gridWidgetModelResponse = z.lazy(() => {
  return z
    .object({
      _type: gridWidgetModelType,
      id: z.number().gte(1).nullable(),
      identifier: z.string(),
      startRow: z.number().gte(1),
      endRow: z.number().gte(1),
      startColumn: z.number().gte(1),
      endColumn: z.number().gte(1),
      options: z.any().optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      identifier: data['identifier'],
      startRow: data['startRow'],
      endRow: data['endRow'],
      startColumn: data['startColumn'],
      endColumn: data['endColumn'],
      options: data['options'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gridWidgetModelRequest = z.lazy(() => {
  return z
    .object({
      _type: gridWidgetModelType,
      id: z.number().gte(1).nullable(),
      identifier: z.string(),
      startRow: z.number().gte(1),
      endRow: z.number().gte(1),
      startColumn: z.number().gte(1),
      endColumn: z.number().gte(1),
      options: z.any().optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      identifier: data['identifier'],
      startRow: data['startRow'],
      endRow: data['endRow'],
      startColumn: data['startColumn'],
      endColumn: data['endColumn'],
      options: data['options'],
    }));
});
