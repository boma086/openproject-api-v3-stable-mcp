// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { GridWidgetModel, gridWidgetModel, gridWidgetModelRequest, gridWidgetModelResponse } from './grid-widget-model';
import {
  GridWriteModelLinks,
  gridWriteModelLinks,
  gridWriteModelLinksRequest,
  gridWriteModelLinksResponse,
} from './grid-write-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gridWriteModel = z.lazy(() => {
  return z.object({
    rowCount: z.number().gte(1).optional(),
    columnCount: z.number().gte(1).optional(),
    widgets: z.array(gridWidgetModel).optional(),
    _links: gridWriteModelLinks.optional(),
  });
});

/**
 * 
 * @typedef  {GridWriteModel} gridWriteModel   
 * @property {number} - The number of rows the grid has
 * @property {number} - The number of columns the grid has
 * @property {GridWidgetModel[]} - The set of `GridWidget`s selected for the grid.

# Conditions

- The widgets must not overlap.
 * @property {GridWriteModelLinks} 
 */
export type GridWriteModel = z.infer<typeof gridWriteModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gridWriteModelResponse = z.lazy(() => {
  return z
    .object({
      rowCount: z.number().gte(1).optional(),
      columnCount: z.number().gte(1).optional(),
      widgets: z.array(gridWidgetModelResponse).optional(),
      _links: gridWriteModelLinksResponse.optional(),
    })
    .transform((data) => ({
      rowCount: data['rowCount'],
      columnCount: data['columnCount'],
      widgets: data['widgets'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gridWriteModelRequest = z.lazy(() => {
  return z
    .object({
      rowCount: z.number().gte(1).optional(),
      columnCount: z.number().gte(1).optional(),
      widgets: z.array(gridWidgetModelRequest).optional(),
      _links: gridWriteModelLinksRequest.optional(),
    })
    .transform((data) => ({
      rowCount: data['rowCount'],
      columnCount: data['columnCount'],
      widgets: data['widgets'],
      _links: data['_links'],
    }));
});
