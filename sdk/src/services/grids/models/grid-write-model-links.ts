// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksScope2, _linksScope2, _linksScope2Request, _linksScope2Response } from './_links-scope-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gridWriteModelLinks = z.lazy(() => {
  return z.object({
    scope: _linksScope2.optional(),
  });
});

/**
 *
 * @typedef  {GridWriteModelLinks} gridWriteModelLinks
 * @property {_LinksScope2} - The location where this grid is used, usually represented as a relative URL.
 */
export type GridWriteModelLinks = z.infer<typeof gridWriteModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gridWriteModelLinksResponse = z.lazy(() => {
  return z
    .object({
      scope: _linksScope2Response.optional(),
    })
    .transform((data) => ({
      scope: data['scope'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gridWriteModelLinksRequest = z.lazy(() => {
  return z
    .object({
      scope: _linksScope2Request.optional(),
    })
    .transform((data) => ({
      scope: data['scope'],
    }));
});
