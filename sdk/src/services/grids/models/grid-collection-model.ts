// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { GridCollectionModelType, gridCollectionModelType } from './grid-collection-model-type';
import {
  GridCollectionModelLinks,
  gridCollectionModelLinks,
  gridCollectionModelLinksRequest,
  gridCollectionModelLinksResponse,
} from './grid-collection-model-links';
import {
  GridCollectionModelEmbedded,
  gridCollectionModelEmbedded,
  gridCollectionModelEmbeddedRequest,
  gridCollectionModelEmbeddedResponse,
} from './grid-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gridCollectionModel = z.lazy(() => {
  return z.object({
    _type: gridCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: gridCollectionModelLinks,
    pageSize: z.number().gte(0),
    offset: z.number().gte(1),
    _embedded: gridCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {GridCollectionModel} gridCollectionModel
 * @property {GridCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {GridCollectionModelLinks}
 * @property {number} - Amount of elements that a response will hold.
 * @property {number} - The page number that is requested from paginated collection.
 * @property {GridCollectionModelEmbedded}
 */
export type GridCollectionModel = z.infer<typeof gridCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gridCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: gridCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: gridCollectionModelLinksResponse,
      pageSize: z.number().gte(0),
      offset: z.number().gte(1),
      _embedded: gridCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      pageSize: data['pageSize'],
      offset: data['offset'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gridCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: gridCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: gridCollectionModelLinksRequest,
      pageSize: z.number().gte(0),
      offset: z.number().gte(1),
      _embedded: gridCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      pageSize: data['pageSize'],
      offset: data['offset'],
      _embedded: data['_embedded'],
    }));
});
