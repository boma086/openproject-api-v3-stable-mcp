// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { Message, message, messageRequest, messageResponse } from './message';
import {
  RevisionModelLinks,
  revisionModelLinks,
  revisionModelLinksRequest,
  revisionModelLinksResponse,
} from './revision-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const revisionModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    identifier: z.string(),
    formattedIdentifier: z.string(),
    authorName: z.string(),
    message: message,
    createdAt: z.string(),
    _links: revisionModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {RevisionModel} revisionModel
 * @property {number} - Revision's id, assigned by OpenProject
 * @property {string} - The raw SCM identifier of the revision (e.g. full SHA hash)
 * @property {string} - The SCM identifier of the revision, formatted (e.g. shortened unambiguous SHA hash). May be identical to identifier in many cases
 * @property {string} - The name of the author that committed this revision. Note that this name is retrieved from the repository and does not identify a user in OpenProject.
 * @property {Message} - The commit message of the revision
 * @property {string} - The time this revision was committed to the repository
 * @property {RevisionModelLinks}
 */
export type RevisionModel = z.infer<typeof revisionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const revisionModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      identifier: z.string(),
      formattedIdentifier: z.string(),
      authorName: z.string(),
      message: messageResponse,
      createdAt: z.string(),
      _links: revisionModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      identifier: data['identifier'],
      formattedIdentifier: data['formattedIdentifier'],
      authorName: data['authorName'],
      message: data['message'],
      createdAt: data['createdAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const revisionModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      identifier: z.string(),
      formattedIdentifier: z.string(),
      authorName: z.string(),
      message: messageRequest,
      createdAt: z.string(),
      _links: revisionModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      identifier: data['identifier'],
      formattedIdentifier: data['formattedIdentifier'],
      authorName: data['authorName'],
      message: data['message'],
      createdAt: data['createdAt'],
      _links: data['_links'],
    }));
});
