// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf69, _linksSelf69, _linksSelf69Request, _linksSelf69Response } from './_links-self-69';
import { _LinksProject15, _linksProject15, _linksProject15Request, _linksProject15Response } from './_links-project-15';
import { _LinksAuthor8, _linksAuthor8, _linksAuthor8Request, _linksAuthor8Response } from './_links-author-8';
import { ShowRevision, showRevision, showRevisionRequest, showRevisionResponse } from './show-revision';

/**
 * The shape of the model inside the application code - what the users use
 */
export const revisionModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf69,
    project: _linksProject15,
    author: _linksAuthor8.optional(),
    showRevision: showRevision,
  });
});

/**
 * 
 * @typedef  {RevisionModelLinks} revisionModelLinks   
 * @property {_LinksSelf69} - This revision

``Resource``: Revision
 * @property {_LinksProject15} - The project to which the revision belongs

``Resource``: Project
 * @property {_LinksAuthor8} - The user that added this revision, if the authorName was mapped to a user in OpenProject

``Resource``: User
 * @property {ShowRevision} - A URL to the repository view (outside APIv3) showing this revision

``Resource``: -
 */
export type RevisionModelLinks = z.infer<typeof revisionModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const revisionModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf69Response,
      project: _linksProject15Response,
      author: _linksAuthor8Response.optional(),
      showRevision: showRevisionResponse,
    })
    .transform((data) => ({
      self: data['self'],
      project: data['project'],
      author: data['author'],
      showRevision: data['showRevision'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const revisionModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf69Request,
      project: _linksProject15Request,
      author: _linksAuthor8Request.optional(),
      showRevision: showRevisionRequest,
    })
    .transform((data) => ({
      self: data['self'],
      project: data['project'],
      author: data['author'],
      showRevision: data['showRevision'],
    }));
});
