// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  HierarchyItemReadModel,
  hierarchyItemReadModel,
  hierarchyItemReadModelRequest,
  hierarchyItemReadModelResponse,
} from './hierarchy-item-read-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const hierarchyItemCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(hierarchyItemReadModel),
  });
});

/**
 *
 * @typedef  {HierarchyItemCollectionModelEmbedded} hierarchyItemCollectionModelEmbedded
 * @property {HierarchyItemReadModel[]}
 */
export type HierarchyItemCollectionModelEmbedded = z.infer<typeof hierarchyItemCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const hierarchyItemCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(hierarchyItemReadModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const hierarchyItemCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(hierarchyItemReadModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
