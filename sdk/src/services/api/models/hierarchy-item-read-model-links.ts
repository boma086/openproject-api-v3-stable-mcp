// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf15, _linksSelf15, _linksSelf15Request, _linksSelf15Response } from './_links-self-15';
import { _LinksParent2, _linksParent2, _linksParent2Request, _linksParent2Response } from './_links-parent-2';
import { _LinksChildren2, _linksChildren2, _linksChildren2Request, _linksChildren2Response } from './_links-children-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const hierarchyItemReadModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf15.optional(),
    parent: _linksParent2.optional(),
    children: z.array(_linksChildren2).optional(),
  });
});

/**
 * 
 * @typedef  {HierarchyItemReadModelLinks} hierarchyItemReadModelLinks   
 * @property {_LinksSelf15} - This hierarchy item

``Resource``: HierarchyItem
 * @property {_LinksParent2} - The hierarchy item that is the parent of the current hierarchy item

``Resource``: HierarchyItem
 * @property {_LinksChildren2[]} 
 */
export type HierarchyItemReadModelLinks = z.infer<typeof hierarchyItemReadModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const hierarchyItemReadModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf15Response.optional(),
      parent: _linksParent2Response.optional(),
      children: z.array(_linksChildren2Response).optional(),
    })
    .transform((data) => ({
      self: data['self'],
      parent: data['parent'],
      children: data['children'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const hierarchyItemReadModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf15Request.optional(),
      parent: _linksParent2Request.optional(),
      children: z.array(_linksChildren2Request).optional(),
    })
    .transform((data) => ({
      self: data['self'],
      parent: data['parent'],
      children: data['children'],
    }));
});
