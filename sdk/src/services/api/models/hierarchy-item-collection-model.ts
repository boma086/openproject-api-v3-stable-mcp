// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  HierarchyItemCollectionModelType,
  hierarchyItemCollectionModelType,
} from './hierarchy-item-collection-model-type';
import {
  HierarchyItemCollectionModelLinks,
  hierarchyItemCollectionModelLinks,
  hierarchyItemCollectionModelLinksRequest,
  hierarchyItemCollectionModelLinksResponse,
} from './hierarchy-item-collection-model-links';
import {
  HierarchyItemCollectionModelEmbedded,
  hierarchyItemCollectionModelEmbedded,
  hierarchyItemCollectionModelEmbeddedRequest,
  hierarchyItemCollectionModelEmbeddedResponse,
} from './hierarchy-item-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const hierarchyItemCollectionModel = z.lazy(() => {
  return z.object({
    _type: hierarchyItemCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: hierarchyItemCollectionModelLinks,
    _embedded: hierarchyItemCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {HierarchyItemCollectionModel} hierarchyItemCollectionModel
 * @property {HierarchyItemCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {HierarchyItemCollectionModelLinks}
 * @property {HierarchyItemCollectionModelEmbedded}
 */
export type HierarchyItemCollectionModel = z.infer<typeof hierarchyItemCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const hierarchyItemCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: hierarchyItemCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: hierarchyItemCollectionModelLinksResponse,
      _embedded: hierarchyItemCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const hierarchyItemCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: hierarchyItemCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: hierarchyItemCollectionModelLinksRequest,
      _embedded: hierarchyItemCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
