// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { HierarchyItemReadModelType, hierarchyItemReadModelType } from './hierarchy-item-read-model-type';
import {
  HierarchyItemReadModelLinks,
  hierarchyItemReadModelLinks,
  hierarchyItemReadModelLinksRequest,
  hierarchyItemReadModelLinksResponse,
} from './hierarchy-item-read-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const hierarchyItemReadModel = z.lazy(() => {
  return z.object({
    _type: hierarchyItemReadModelType.optional(),
    id: z.number().optional(),
    label: z.string().optional(),
    short: z.string().optional(),
    depth: z.number().optional(),
    _links: hierarchyItemReadModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {HierarchyItemReadModel} hierarchyItemReadModel
 * @property {HierarchyItemReadModelType}
 * @property {number} - Hierarchy item identifier
 * @property {string} - The label of the hierarchy item
 * @property {string} - The short name of the hierarchy item
 * @property {number} - The hierarchy depth. The root item has a depth of 0.
 * @property {HierarchyItemReadModelLinks}
 */
export type HierarchyItemReadModel = z.infer<typeof hierarchyItemReadModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const hierarchyItemReadModelResponse = z.lazy(() => {
  return z
    .object({
      _type: hierarchyItemReadModelType.optional(),
      id: z.number().optional(),
      label: z.string().optional(),
      short: z.string().optional(),
      depth: z.number().optional(),
      _links: hierarchyItemReadModelLinksResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      label: data['label'],
      short: data['short'],
      depth: data['depth'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const hierarchyItemReadModelRequest = z.lazy(() => {
  return z
    .object({
      _type: hierarchyItemReadModelType.optional(),
      id: z.number().optional(),
      label: z.string().optional(),
      short: z.string().optional(),
      depth: z.number().optional(),
      _links: hierarchyItemReadModelLinksRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      label: data['label'],
      short: data['short'],
      depth: data['depth'],
      _links: data['_links'],
    }));
});
