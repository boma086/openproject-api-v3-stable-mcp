// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import {
  HierarchyItemCollectionModel,
  hierarchyItemCollectionModelResponse,
} from './models/hierarchy-item-collection-model';
import { GetCustomFieldItemsParams } from './request-params';
import { HierarchyItemReadModel, hierarchyItemReadModelResponse } from './models/hierarchy-item-read-model';

export class ApiService extends BaseService {
  /**
 * Retrieves the hierarchy of custom fields.
The hierarchy is a tree structure of hierarchy items. It is represented as a flat list of items, where each item
has a reference to its parent and children. The list is ordered in a depth-first manner. The first item is the
requested parent. If parent was unset, the root item is returned as first element.

Passing the `depth` query parameter allows to limit the depth of the hierarchy. If the depth is unset, the full
hierarchy tree is returned. If the depth is set to `0`, only the requested parent is returned. Any other positive
integer will return the number of children levels specified by this value.

This endpoint only returns, if the custom field is of type `hierarchy`.
 * @param {number} id - The custom field's unique identifier
 * @param {number} [params.parent] - The identifier of the parent hierarchy item
 * @param {number} [params.depth] - The level of hierarchy depth
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<HierarchyItemCollectionModel>>} OK
 */
  async getCustomFieldItems(
    id: number,
    params?: GetCustomFieldItemsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<HierarchyItemCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/custom_fields/{id}/items')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: hierarchyItemCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .addQueryParam({
        key: 'parent',
        value: params?.parent,
      })
      .addQueryParam({
        key: 'depth',
        value: params?.depth,
      })
      .build();
    return this.client.call<HierarchyItemCollectionModel>(request);
  }

  /**
   * Retrieves a single custom field item specified by its unique identifier.
   * @param {number} id - The custom field item's unique identifier
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<HierarchyItemReadModel>>} OK
   */
  async getCustomFieldItem(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<HierarchyItemReadModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/custom_field_items/{id}')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: hierarchyItemReadModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<HierarchyItemReadModel>(request);
  }

  /**
 * Retrieves the branch of a single custom field item specified by its unique identifier.
A branch is list of all ancestors, starting with the root item and finishing with the item itself.
 * @param {number} id - The custom field item's unique identifier
 * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
 * @returns {Promise<HttpResponse<HierarchyItemCollectionModel>>} OK
 */
  async getCustomFieldItemBranch(
    id: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<HierarchyItemCollectionModel>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api/v3/custom_field_items/{id}/branch')
      .setRequestSchema(z.any())
      .addBasicAuth(this.config.username, this.config.password)
      .addApiKeyAuth(this.config.apiKey, 'api-key-sample')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: hierarchyItemCollectionModelResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<HierarchyItemCollectionModel>(request);
  }
}
