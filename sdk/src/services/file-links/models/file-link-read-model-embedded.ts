// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  StorageReadModel,
  storageReadModel,
  storageReadModelRequest,
  storageReadModelResponse,
} from './storage-read-model';
import {
  WorkPackageModel,
  workPackageModel,
  workPackageModelRequest,
  workPackageModelResponse,
} from '../../common/work-package-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const fileLinkReadModelEmbedded = z.lazy(() => {
  return z.object({
    storage: storageReadModel,
    container: workPackageModel,
  });
});

/**
 *
 * @typedef  {FileLinkReadModelEmbedded} fileLinkReadModelEmbedded
 * @property {StorageReadModel}
 * @property {WorkPackageModel}
 */
export type FileLinkReadModelEmbedded = z.infer<typeof fileLinkReadModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkReadModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      storage: storageReadModelResponse,
      container: workPackageModelResponse,
    })
    .transform((data) => ({
      storage: data['storage'],
      container: data['container'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const fileLinkReadModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      storage: storageReadModelRequest,
      container: workPackageModelRequest,
    })
    .transform((data) => ({
      storage: data['storage'],
      container: data['container'],
    }));
});
