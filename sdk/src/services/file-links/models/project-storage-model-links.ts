// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf28, _linksSelf28, _linksSelf28Request, _linksSelf28Response } from './_links-self-28';
import { _LinksCreator2, _linksCreator2, _linksCreator2Request, _linksCreator2Response } from './_links-creator-2';
import { _LinksStorage2, _linksStorage2, _linksStorage2Request, _linksStorage2Response } from './_links-storage-2';
import { _LinksProject6, _linksProject6, _linksProject6Request, _linksProject6Response } from './_links-project-6';
import { ProjectFolder, projectFolder, projectFolderRequest, projectFolderResponse } from './project-folder';
import { _LinksOpen2, _linksOpen2, _linksOpen2Request, _linksOpen2Response } from './_links-open-2';
import {
  OpenWithConnectionEnsured,
  openWithConnectionEnsured,
  openWithConnectionEnsuredRequest,
  openWithConnectionEnsuredResponse,
} from './open-with-connection-ensured';

/**
 * The shape of the model inside the application code - what the users use
 */
export const projectStorageModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf28,
    creator: _linksCreator2,
    storage: _linksStorage2,
    project: _linksProject6,
    projectFolder: projectFolder.optional(),
    open: _linksOpen2.optional(),
    openWithConnectionEnsured: openWithConnectionEnsured.optional(),
  });
});

/**
 * 
 * @typedef  {ProjectStorageModelLinks} projectStorageModelLinks   
 * @property {_LinksSelf28} - This project storage.

``Resource``: ProjectStorage
 * @property {_LinksCreator2} - The user who created the project storage.

``Resource``: User
 * @property {_LinksStorage2} - The storage resource, that is linked to a project with this project storage.

``Resource``: Storage
 * @property {_LinksProject6} - The project resource, that is linked to a storage with this project storage.

``Resource``: Project
 * @property {ProjectFolder} - The directory on the storage that is used as a project folder.

``Resource``: StorageFile

# Conditions

Only provided, if the `projectFolderMode` is `manual` or `automatic`.
 * @property {_LinksOpen2} - A link to OpenProject strorage.
 * @property {OpenWithConnectionEnsured} - A link to OpenProject storage with making sure user has access to it.

# Conditions

If the storage has not been configured(oauth client is missing, for instance), then the link is null.
 */
export type ProjectStorageModelLinks = z.infer<typeof projectStorageModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const projectStorageModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf28Response,
      creator: _linksCreator2Response,
      storage: _linksStorage2Response,
      project: _linksProject6Response,
      projectFolder: projectFolderResponse.optional(),
      open: _linksOpen2Response.optional(),
      openWithConnectionEnsured: openWithConnectionEnsuredResponse.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      creator: data['creator'],
      storage: data['storage'],
      project: data['project'],
      projectFolder: data['projectFolder'],
      open: data['open'],
      openWithConnectionEnsured: data['openWithConnectionEnsured'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const projectStorageModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf28Request,
      creator: _linksCreator2Request,
      storage: _linksStorage2Request,
      project: _linksProject6Request,
      projectFolder: projectFolderRequest.optional(),
      open: _linksOpen2Request.optional(),
      openWithConnectionEnsured: openWithConnectionEnsuredRequest.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      creator: data['creator'],
      storage: data['storage'],
      project: data['project'],
      projectFolder: data['projectFolder'],
      open: data['open'],
      openWithConnectionEnsured: data['openWithConnectionEnsured'],
    }));
});
