// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf33, _linksSelf33, _linksSelf33Request, _linksSelf33Response } from './_links-self-33';
import { Destination, destination, destinationRequest, destinationResponse } from './destination';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageFileUploadLinkModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf33,
    destination: destination,
  });
});

/**
 * 
 * @typedef  {StorageFileUploadLinkModelLinks} storageFileUploadLinkModelLinks   
 * @property {_LinksSelf33} - The resource link of the upload link resource.

As the upload link is a temporal object, and cannot be retrieved again, the
self link usually is `urn:openproject-org:api:v3:storages:upload_link:no_link_provided`.

``Resource``: UploadLink
 * @property {Destination} - The direct upload link.

``Resource``: N/A
 */
export type StorageFileUploadLinkModelLinks = z.infer<typeof storageFileUploadLinkModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageFileUploadLinkModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf33Response,
      destination: destinationResponse,
    })
    .transform((data) => ({
      self: data['self'],
      destination: data['destination'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageFileUploadLinkModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf33Request,
      destination: destinationRequest,
    })
    .transform((data) => ({
      self: data['self'],
      destination: data['destination'],
    }));
});
