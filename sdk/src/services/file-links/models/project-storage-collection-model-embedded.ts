// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  ProjectStorageModel,
  projectStorageModel,
  projectStorageModelRequest,
  projectStorageModelResponse,
} from './project-storage-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const projectStorageCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(projectStorageModel),
  });
});

/**
 *
 * @typedef  {ProjectStorageCollectionModelEmbedded} projectStorageCollectionModelEmbedded
 * @property {ProjectStorageModel[]}
 */
export type ProjectStorageCollectionModelEmbedded = z.infer<typeof projectStorageCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const projectStorageCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(projectStorageModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const projectStorageCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(projectStorageModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
