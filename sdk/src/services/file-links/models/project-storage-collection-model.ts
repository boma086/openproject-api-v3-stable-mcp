// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  ProjectStorageCollectionModelType,
  projectStorageCollectionModelType,
} from './project-storage-collection-model-type';
import {
  ProjectStorageCollectionModelLinks,
  projectStorageCollectionModelLinks,
  projectStorageCollectionModelLinksRequest,
  projectStorageCollectionModelLinksResponse,
} from './project-storage-collection-model-links';
import {
  ProjectStorageCollectionModelEmbedded,
  projectStorageCollectionModelEmbedded,
  projectStorageCollectionModelEmbeddedRequest,
  projectStorageCollectionModelEmbeddedResponse,
} from './project-storage-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const projectStorageCollectionModel = z.lazy(() => {
  return z.object({
    _type: projectStorageCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: projectStorageCollectionModelLinks,
    _embedded: projectStorageCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {ProjectStorageCollectionModel} projectStorageCollectionModel
 * @property {ProjectStorageCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {ProjectStorageCollectionModelLinks}
 * @property {ProjectStorageCollectionModelEmbedded}
 */
export type ProjectStorageCollectionModel = z.infer<typeof projectStorageCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const projectStorageCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: projectStorageCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: projectStorageCollectionModelLinksResponse,
      _embedded: projectStorageCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const projectStorageCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: projectStorageCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: projectStorageCollectionModelLinksRequest,
      _embedded: projectStorageCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
