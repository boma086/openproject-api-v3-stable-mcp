// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { StorageCollectionModelType, storageCollectionModelType } from './storage-collection-model-type';
import {
  StorageCollectionModelLinks,
  storageCollectionModelLinks,
  storageCollectionModelLinksRequest,
  storageCollectionModelLinksResponse,
} from './storage-collection-model-links';
import {
  StorageCollectionModelEmbedded,
  storageCollectionModelEmbedded,
  storageCollectionModelEmbeddedRequest,
  storageCollectionModelEmbeddedResponse,
} from './storage-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageCollectionModel = z.lazy(() => {
  return z.object({
    _type: storageCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: storageCollectionModelLinks,
    _embedded: storageCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {StorageCollectionModel} storageCollectionModel
 * @property {StorageCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {StorageCollectionModelLinks}
 * @property {StorageCollectionModelEmbedded}
 */
export type StorageCollectionModel = z.infer<typeof storageCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: storageCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: storageCollectionModelLinksResponse,
      _embedded: storageCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: storageCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: storageCollectionModelLinksRequest,
      _embedded: storageCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
