// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const oAuthClientCredentialsWriteModel = z.lazy(() => {
  return z.object({
    clientId: z.string(),
    clientSecret: z.string(),
  });
});

/**
 *
 * @typedef  {OAuthClientCredentialsWriteModel} oAuthClientCredentialsWriteModel
 * @property {string} - OAuth 2 client id
 * @property {string} - OAuth 2 client secret
 */
export type OAuthClientCredentialsWriteModel = z.infer<typeof oAuthClientCredentialsWriteModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthClientCredentialsWriteModelResponse = z.lazy(() => {
  return z
    .object({
      clientId: z.string(),
      clientSecret: z.string(),
    })
    .transform((data) => ({
      clientId: data['clientId'],
      clientSecret: data['clientSecret'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthClientCredentialsWriteModelRequest = z.lazy(() => {
  return z
    .object({
      clientId: z.string(),
      clientSecret: z.string(),
    })
    .transform((data) => ({
      clientId: data['clientId'],
      clientSecret: data['clientSecret'],
    }));
});
