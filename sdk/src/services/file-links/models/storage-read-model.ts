// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { StorageReadModelType, storageReadModelType } from './storage-read-model-type';
import {
  StorageReadModelEmbedded,
  storageReadModelEmbedded,
  storageReadModelEmbeddedRequest,
  storageReadModelEmbeddedResponse,
} from './storage-read-model-embedded';
import {
  StorageReadModelLinks,
  storageReadModelLinks,
  storageReadModelLinksRequest,
  storageReadModelLinksResponse,
} from './storage-read-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageReadModel = z.lazy(() => {
  return z.object({
    id: z.number(),
    _type: storageReadModelType,
    name: z.string(),
    storageAudience: z.string().optional(),
    tenantId: z.string().optional(),
    driveId: z.string().optional(),
    hasApplicationPassword: z.boolean().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    configured: z.boolean().optional(),
    _embedded: storageReadModelEmbedded.optional(),
    _links: storageReadModelLinks,
  });
});

/**
 * 
 * @typedef  {StorageReadModel} storageReadModel   
 * @property {number} - Storage id
 * @property {StorageReadModelType} 
 * @property {string} - Storage name
 * @property {string} - The audience that the storage expects in tokens for requests to it,
usually the storage's client ID at the identity provider.

This is only required for authentication through single-sign-on and so far
only supported for provider type Nextcloud.
 * @property {string} - The tenant id of a file storage of type OneDrive/SharePoint.

Ignored if the provider type is not OneDrive/SharePoint.
 * @property {string} - The drive id of a file storage of type OneDrive/SharePoint.

Ignored if the provider type is not OneDrive/SharePoint.
 * @property {boolean} - Whether the storage has the application password to use for the Nextcloud storage.

Ignored if the provider type is not Nextcloud.
 * @property {string} - Time of creation
 * @property {string} - Time of the most recent change to the storage
 * @property {boolean} - Indication, if the storage is fully configured
 * @property {StorageReadModelEmbedded} 
 * @property {StorageReadModelLinks} 
 */
export type StorageReadModel = z.infer<typeof storageReadModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageReadModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number(),
      _type: storageReadModelType,
      name: z.string(),
      storageAudience: z.string().optional(),
      tenantId: z.string().optional(),
      driveId: z.string().optional(),
      hasApplicationPassword: z.boolean().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      configured: z.boolean().optional(),
      _embedded: storageReadModelEmbeddedResponse.optional(),
      _links: storageReadModelLinksResponse,
    })
    .transform((data) => ({
      id: data['id'],
      _type: data['_type'],
      name: data['name'],
      storageAudience: data['storageAudience'],
      tenantId: data['tenantId'],
      driveId: data['driveId'],
      hasApplicationPassword: data['hasApplicationPassword'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      configured: data['configured'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageReadModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number(),
      _type: storageReadModelType,
      name: z.string(),
      storageAudience: z.string().optional(),
      tenantId: z.string().optional(),
      driveId: z.string().optional(),
      hasApplicationPassword: z.boolean().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      configured: z.boolean().optional(),
      _embedded: storageReadModelEmbeddedRequest.optional(),
      _links: storageReadModelLinksRequest,
    })
    .transform((data) => ({
      id: data['id'],
      _type: data['_type'],
      name: data['name'],
      storageAudience: data['storageAudience'],
      tenantId: data['tenantId'],
      driveId: data['driveId'],
      hasApplicationPassword: data['hasApplicationPassword'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      configured: data['configured'],
      _embedded: data['_embedded'],
      _links: data['_links'],
    }));
});
