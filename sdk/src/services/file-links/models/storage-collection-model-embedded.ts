// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  StorageReadModel,
  storageReadModel,
  storageReadModelRequest,
  storageReadModelResponse,
} from './storage-read-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(storageReadModel),
  });
});

/**
 *
 * @typedef  {StorageCollectionModelEmbedded} storageCollectionModelEmbedded
 * @property {StorageReadModel[]}
 */
export type StorageCollectionModelEmbedded = z.infer<typeof storageCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(storageReadModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(storageReadModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
