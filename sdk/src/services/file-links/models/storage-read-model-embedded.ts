// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  OAuthApplicationReadModel,
  oAuthApplicationReadModel,
  oAuthApplicationReadModelRequest,
  oAuthApplicationReadModelResponse,
} from '../../common/o-auth-application-read-model';
import {
  OAuthClientCredentialsReadModel,
  oAuthClientCredentialsReadModel,
  oAuthClientCredentialsReadModelRequest,
  oAuthClientCredentialsReadModelResponse,
} from '../../common/o-auth-client-credentials-read-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageReadModelEmbedded = z.lazy(() => {
  return z.object({
    oauthApplication: oAuthApplicationReadModel.optional(),
    oauthClientCredentials: oAuthClientCredentialsReadModel.optional(),
  });
});

/**
 *
 * @typedef  {StorageReadModelEmbedded} storageReadModelEmbedded
 * @property {OAuthApplicationReadModel}
 * @property {OAuthClientCredentialsReadModel}
 */
export type StorageReadModelEmbedded = z.infer<typeof storageReadModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageReadModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      oauthApplication: oAuthApplicationReadModelResponse.optional(),
      oauthClientCredentials: oAuthClientCredentialsReadModelResponse.optional(),
    })
    .transform((data) => ({
      oauthApplication: data['oauthApplication'],
      oauthClientCredentials: data['oauthClientCredentials'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageReadModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      oauthApplication: oAuthApplicationReadModelRequest.optional(),
      oauthClientCredentials: oAuthClientCredentialsReadModelRequest.optional(),
    })
    .transform((data) => ({
      oauthApplication: data['oauthApplication'],
      oauthClientCredentials: data['oauthClientCredentials'],
    }));
});
