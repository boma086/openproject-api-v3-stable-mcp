// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf24, _linksSelf24, _linksSelf24Request, _linksSelf24Response } from './_links-self-24';
import { _LinksType2, _linksType2, _linksType2Request, _linksType2Response } from './_links-type-2';
import {
  _LinksAuthenticationMethod1,
  _linksAuthenticationMethod1,
  _linksAuthenticationMethod1Request,
  _linksAuthenticationMethod1Response,
} from './_links-authentication-method-1';
import { _LinksOrigin1, _linksOrigin1, _linksOrigin1Request, _linksOrigin1Response } from './_links-origin-1';
import { _LinksOpen1, _linksOpen1, _linksOpen1Request, _linksOpen1Response } from './_links-open-1';
import {
  AuthorizationState,
  authorizationState,
  authorizationStateRequest,
  authorizationStateResponse,
} from './authorization-state';
import { Authorize, authorize, authorizeRequest, authorizeResponse } from './authorize';
import {
  OauthApplication,
  oauthApplication,
  oauthApplicationRequest,
  oauthApplicationResponse,
} from './oauth-application';
import {
  OauthClientCredentials,
  oauthClientCredentials,
  oauthClientCredentialsRequest,
  oauthClientCredentialsResponse,
} from './oauth-client-credentials';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageReadModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf24,
    type: _linksType2,
    authenticationMethod: _linksAuthenticationMethod1.optional(),
    origin: _linksOrigin1.optional(),
    open: _linksOpen1,
    authorizationState: authorizationState,
    authorize: authorize.optional(),
    oauthApplication: oauthApplication.optional(),
    oauthClientCredentials: oauthClientCredentials.optional(),
  });
});

/**
 * 
 * @typedef  {StorageReadModelLinks} storageReadModelLinks   
 * @property {_LinksSelf24} - This storage resource. Contains the user defined storage name as title.

``Resource``: Storage
 * @property {_LinksType2} - The urn of the storage type. Currently Nextcloud and OneDrive storages are supported.

- urn:openproject-org:api:v3:storages:Nextcloud
- urn:openproject-org:api:v3:storages:OneDrive

``Resource``: N/A
 * @property {_LinksAuthenticationMethod1} - The urn of the authentication method. Currently only Nextcloud storages support this setting.

- urn:openproject-org:api:v3:storages:authenticationMethod:TwoWayOAuth2 (default)
- urn:openproject-org:api:v3:storages:authenticationMethod:OAuth2SSO

``Resource``: N/A
 * @property {_LinksOrigin1} - Web URI of the storage instance. This link is ignored, if the storage is hosted in a cloud and has no own
URL, like file storages of type OneDrive/SharePoint.

``Resource``: N/A
 * @property {_LinksOpen1} - URI of the file storage location, from where the user usually starts browsing files.

``Resource``: N/A
 * @property {AuthorizationState} - The urn of the storage connection state. Can be one of:

- urn:openproject-org:api:v3:storages:authorization:Connected
- urn:openproject-org:api:v3:storages:authorization:FailedAuthorization
- urn:openproject-org:api:v3:storages:authorization:Error

``Resource``: N/A
 * @property {Authorize} - The link to the starting point of the authorization cycle for a configured storage provider.

# Conditions

`authorizationState` is:

- urn:openproject-org:api:v3:storages:authorization:FailedAuthorization

``Resource``: N/A
 * @property {OauthApplication} - The OAuth 2 provider application linked to the storage.

# Conditions

- User has role `admin`

``Resource``: OAuthApplication
 * @property {OauthClientCredentials} - The OAuth 2 credentials resource linked to the storage.

# Conditions

- User has role `admin`

``Resource``: OAuthClientCredentials
 */
export type StorageReadModelLinks = z.infer<typeof storageReadModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageReadModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf24Response,
      type: _linksType2Response,
      authenticationMethod: _linksAuthenticationMethod1Response.optional(),
      origin: _linksOrigin1Response.optional(),
      open: _linksOpen1Response,
      authorizationState: authorizationStateResponse,
      authorize: authorizeResponse.optional(),
      oauthApplication: oauthApplicationResponse.optional(),
      oauthClientCredentials: oauthClientCredentialsResponse.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      type: data['type'],
      authenticationMethod: data['authenticationMethod'],
      origin: data['origin'],
      open: data['open'],
      authorizationState: data['authorizationState'],
      authorize: data['authorize'],
      oauthApplication: data['oauthApplication'],
      oauthClientCredentials: data['oauthClientCredentials'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageReadModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf24Request,
      type: _linksType2Request,
      authenticationMethod: _linksAuthenticationMethod1Request.optional(),
      origin: _linksOrigin1Request.optional(),
      open: _linksOpen1Request,
      authorizationState: authorizationStateRequest,
      authorize: authorizeRequest.optional(),
      oauthApplication: oauthApplicationRequest.optional(),
      oauthClientCredentials: oauthClientCredentialsRequest.optional(),
    })
    .transform((data) => ({
      self: data['self'],
      type: data['type'],
      authenticationMethod: data['authenticationMethod'],
      origin: data['origin'],
      open: data['open'],
      authorizationState: data['authorizationState'],
      authorize: data['authorize'],
      oauthApplication: data['oauthApplication'],
      oauthClientCredentials: data['oauthClientCredentials'],
    }));
});
