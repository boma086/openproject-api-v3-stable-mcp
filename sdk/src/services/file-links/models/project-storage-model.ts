// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ProjectStorageModelType, projectStorageModelType } from './project-storage-model-type';
import { ProjectFolderMode, projectFolderMode } from './project-folder-mode';
import {
  ProjectStorageModelLinks,
  projectStorageModelLinks,
  projectStorageModelLinksRequest,
  projectStorageModelLinksResponse,
} from './project-storage-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const projectStorageModel = z.lazy(() => {
  return z.object({
    _type: projectStorageModelType,
    id: z.number().gte(1),
    projectFolderMode: projectFolderMode,
    createdAt: z.string(),
    updatedAt: z.string(),
    _links: projectStorageModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {ProjectStorageModel} projectStorageModel
 * @property {ProjectStorageModelType}
 * @property {number} - The project storage's id
 * @property {ProjectFolderMode}
 * @property {string} - Time of creation
 * @property {string} - Time of the most recent change to the project storage
 * @property {ProjectStorageModelLinks}
 */
export type ProjectStorageModel = z.infer<typeof projectStorageModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const projectStorageModelResponse = z.lazy(() => {
  return z
    .object({
      _type: projectStorageModelType,
      id: z.number().gte(1),
      projectFolderMode: projectFolderMode,
      createdAt: z.string(),
      updatedAt: z.string(),
      _links: projectStorageModelLinksResponse.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      projectFolderMode: data['projectFolderMode'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const projectStorageModelRequest = z.lazy(() => {
  return z
    .object({
      _type: projectStorageModelType,
      id: z.number().gte(1),
      projectFolderMode: projectFolderMode,
      createdAt: z.string(),
      updatedAt: z.string(),
      _links: projectStorageModelLinksRequest.optional(),
    })
    .transform((data) => ({
      _type: data['_type'],
      id: data['id'],
      projectFolderMode: data['projectFolderMode'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});
