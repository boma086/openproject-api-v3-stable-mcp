// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf23, _linksSelf23, _linksSelf23Request, _linksSelf23Response } from './_links-self-23';
import {
  _LinksIntegration2,
  _linksIntegration2,
  _linksIntegration2Request,
  _linksIntegration2Response,
} from './_links-integration-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const oAuthClientCredentialsReadModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf23,
    integration: _linksIntegration2,
  });
});

/**
 * 
 * @typedef  {OAuthClientCredentialsReadModelLinks} oAuthClientCredentialsReadModelLinks   
 * @property {_LinksSelf23} - This OAuth Client Credentials object

``Resource``: OAuthClientCredentials
 * @property {_LinksIntegration2} - The resource that integrates this OAuth client credentials. Currently, only `Storage` resources are
able to contain OAuth client credentials.

``Resource``: Storage
 */
export type OAuthClientCredentialsReadModelLinks = z.infer<typeof oAuthClientCredentialsReadModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthClientCredentialsReadModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf23Response,
      integration: _linksIntegration2Response,
    })
    .transform((data) => ({
      self: data['self'],
      integration: data['integration'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthClientCredentialsReadModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf23Request,
      integration: _linksIntegration2Request,
    })
    .transform((data) => ({
      self: data['self'],
      integration: data['integration'],
    }));
});
