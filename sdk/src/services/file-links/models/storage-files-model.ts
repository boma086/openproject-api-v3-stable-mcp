// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { StorageFilesModelType, storageFilesModelType } from './storage-files-model-type';
import {
  StorageFileModel,
  storageFileModel,
  storageFileModelRequest,
  storageFileModelResponse,
} from './storage-file-model';
import {
  StorageFilesModelParent,
  storageFilesModelParent,
  storageFilesModelParentRequest,
  storageFilesModelParentResponse,
} from './storage-files-model-parent';
import {
  StorageFilesModelLinks,
  storageFilesModelLinks,
  storageFilesModelLinksRequest,
  storageFilesModelLinksResponse,
} from './storage-files-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageFilesModel = z.lazy(() => {
  return z.object({
    _type: storageFilesModelType,
    files: z.array(storageFileModel),
    parent: storageFilesModelParent,
    ancestors: z.array(storageFileModel),
    _links: storageFilesModelLinks,
  });
});

/**
 *
 * @typedef  {StorageFilesModel} storageFilesModel
 * @property {StorageFilesModelType}
 * @property {StorageFileModel[]} - List of files provided by the selected storage.
 * @property {StorageFilesModelParent} - File of the currently selected parent directory.
 * @property {StorageFileModel[]} - List of ancestors of the parent directory. Can be empty, if parent directory was root directory.
 * @property {StorageFilesModelLinks}
 */
export type StorageFilesModel = z.infer<typeof storageFilesModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageFilesModelResponse = z.lazy(() => {
  return z
    .object({
      _type: storageFilesModelType,
      files: z.array(storageFileModelResponse),
      parent: storageFilesModelParentResponse,
      ancestors: z.array(storageFileModelResponse),
      _links: storageFilesModelLinksResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      files: data['files'],
      parent: data['parent'],
      ancestors: data['ancestors'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageFilesModelRequest = z.lazy(() => {
  return z
    .object({
      _type: storageFilesModelType,
      files: z.array(storageFileModelRequest),
      parent: storageFilesModelParentRequest,
      ancestors: z.array(storageFileModelRequest),
      _links: storageFilesModelLinksRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      files: data['files'],
      parent: data['parent'],
      ancestors: data['ancestors'],
      _links: data['_links'],
    }));
});
