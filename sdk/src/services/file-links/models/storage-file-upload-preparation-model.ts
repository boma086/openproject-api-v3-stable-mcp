// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageFileUploadPreparationModel = z.lazy(() => {
  return z.object({
    projectId: z.number().gte(1),
    fileName: z.string(),
    parent: z.string(),
  });
});

/**
 * 
 * @typedef  {StorageFileUploadPreparationModel} storageFileUploadPreparationModel   
 * @property {number} - The project identifier, from where a user starts uploading a file.
 * @property {string} - The file name.
 * @property {string} - The directory to which the file is to be uploaded. For root directories, the value `/` must
be provided.
 */
export type StorageFileUploadPreparationModel = z.infer<typeof storageFileUploadPreparationModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageFileUploadPreparationModelResponse = z.lazy(() => {
  return z
    .object({
      projectId: z.number().gte(1),
      fileName: z.string(),
      parent: z.string(),
    })
    .transform((data) => ({
      projectId: data['projectId'],
      fileName: data['fileName'],
      parent: data['parent'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageFileUploadPreparationModelRequest = z.lazy(() => {
  return z
    .object({
      projectId: z.number().gte(1),
      fileName: z.string(),
      parent: z.string(),
    })
    .transform((data) => ({
      projectId: data['projectId'],
      fileName: data['fileName'],
      parent: data['parent'],
    }));
});
