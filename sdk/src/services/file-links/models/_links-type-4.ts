// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const _linksType4 = z.lazy(() => {
  return z.object({
    href: z.string().nullable(),
    title: z.string().optional(),
    templated: z.boolean().optional(),
    method: z.string().optional(),
    payload: z.any().optional(),
    identifier: z.string().optional(),
    type: z.string().optional(),
  });
});

/**
 * The urn of the storage type. Currently Nextcloud and OneDrive storages are supported.

- urn:openproject-org:api:v3:storages:Nextcloud
- urn:openproject-org:api:v3:storages:OneDrive

**Resource**: N/A
 * @typedef  {_LinksType4} _linksType4 - The urn of the storage type. Currently Nextcloud and OneDrive storages are supported.

- urn:openproject-org:api:v3:storages:Nextcloud
- urn:openproject-org:api:v3:storages:OneDrive

**Resource**: N/A - The urn of the storage type. Currently Nextcloud and OneDrive storages are supported.

- urn:openproject-org:api:v3:storages:Nextcloud
- urn:openproject-org:api:v3:storages:OneDrive

**Resource**: N/A
 * @property {string} - URL to the referenced resource (might be relative)
 * @property {string} - Representative label for the resource
 * @property {boolean} - If true the href contains parts that need to be replaced by the client
 * @property {string} - The HTTP verb to use when requesting the resource
 * @property {any} - The payload to send in the request to achieve the desired result
 * @property {string} - An optional unique identifier to the link object
 * @property {string} - The MIME-Type of the returned resource.
 */
export type _LinksType4 = z.infer<typeof _linksType4>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const _linksType4Response = z.lazy(() => {
  return z
    .object({
      href: z.string().nullable(),
      title: z.string().optional(),
      templated: z.boolean().optional(),
      method: z.string().optional(),
      payload: z.any().optional(),
      identifier: z.string().optional(),
      type: z.string().optional(),
    })
    .transform((data) => ({
      href: data['href'],
      title: data['title'],
      templated: data['templated'],
      method: data['method'],
      payload: data['payload'],
      identifier: data['identifier'],
      type: data['type'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const _linksType4Request = z.lazy(() => {
  return z
    .object({
      href: z.string().nullable(),
      title: z.string().optional(),
      templated: z.boolean().optional(),
      method: z.string().optional(),
      payload: z.any().optional(),
      identifier: z.string().optional(),
      type: z.string().optional(),
    })
    .transform((data) => ({
      href: data['href'],
      title: data['title'],
      templated: data['templated'],
      method: data['method'],
      payload: data['payload'],
      identifier: data['identifier'],
      type: data['type'],
    }));
});
