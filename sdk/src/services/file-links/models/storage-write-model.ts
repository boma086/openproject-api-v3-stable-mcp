// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  StorageWriteModelLinks,
  storageWriteModelLinks,
  storageWriteModelLinksRequest,
  storageWriteModelLinksResponse,
} from './storage-write-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageWriteModel = z.lazy(() => {
  return z.object({
    name: z.string().optional(),
    storageAudience: z.string().optional(),
    applicationPassword: z.string().optional().nullable(),
    _links: storageWriteModelLinks.optional(),
  });
});

/**
 * 
 * @typedef  {StorageWriteModel} storageWriteModel   
 * @property {string} - Storage name, if not provided, falls back to a default.
 * @property {string} - The audience that the storage expects in tokens for requests to it,
usually the storage's client ID at the identity provider.

This is only required for authentication through single-sign-on and so far
only supported for provider type Nextcloud.
 * @property {string} - The application password to use for the Nextcloud storage. Ignored if the provider type is not Nextcloud.

If a string is provided, the password is set and automatic management is enabled for the storage.
If null is provided, the password is unset and automatic management is disabled for the storage.
 * @property {StorageWriteModelLinks} 
 */
export type StorageWriteModel = z.infer<typeof storageWriteModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageWriteModelResponse = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      storageAudience: z.string().optional(),
      applicationPassword: z.string().optional().nullable(),
      _links: storageWriteModelLinksResponse.optional(),
    })
    .transform((data) => ({
      name: data['name'],
      storageAudience: data['storageAudience'],
      applicationPassword: data['applicationPassword'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageWriteModelRequest = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      storageAudience: z.string().optional(),
      applicationPassword: z.string().optional().nullable(),
      _links: storageWriteModelLinksRequest.optional(),
    })
    .transform((data) => ({
      name: data['name'],
      storageAudience: data['storageAudience'],
      applicationPassword: data['applicationPassword'],
      _links: data['_links'],
    }));
});
