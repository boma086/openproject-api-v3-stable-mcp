// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf22, _linksSelf22, _linksSelf22Request, _linksSelf22Response } from './_links-self-22';
import { Owner, owner, ownerRequest, ownerResponse } from './owner';
import {
  _LinksIntegration1,
  _linksIntegration1,
  _linksIntegration1Request,
  _linksIntegration1Response,
} from './_links-integration-1';
import { RedirectUri, redirectUri, redirectUriRequest, redirectUriResponse } from './redirect-uri';

/**
 * The shape of the model inside the application code - what the users use
 */
export const oAuthApplicationReadModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf22,
    owner: owner,
    integration: _linksIntegration1.optional(),
    redirectUri: z.array(redirectUri),
  });
});

/**
 * 
 * @typedef  {OAuthApplicationReadModelLinks} oAuthApplicationReadModelLinks   
 * @property {_LinksSelf22} - This OAuth application

``Resource``: OAuthApplication
 * @property {Owner} - The user that created the OAuth application.

``Resource``: User
 * @property {_LinksIntegration1} - The resource that integrates this OAuth application into itself. Currently, only `Storage` resources are
able to create and maintain own OAuth application.

``Resource``: Storage
 * @property {RedirectUri[]} 
 */
export type OAuthApplicationReadModelLinks = z.infer<typeof oAuthApplicationReadModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthApplicationReadModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf22Response,
      owner: ownerResponse,
      integration: _linksIntegration1Response.optional(),
      redirectUri: z.array(redirectUriResponse),
    })
    .transform((data) => ({
      self: data['self'],
      owner: data['owner'],
      integration: data['integration'],
      redirectUri: data['redirectUri'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const oAuthApplicationReadModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf22Request,
      owner: ownerRequest,
      integration: _linksIntegration1Request.optional(),
      redirectUri: z.array(redirectUriRequest),
    })
    .transform((data) => ({
      self: data['self'],
      owner: data['owner'],
      integration: data['integration'],
      redirectUri: data['redirectUri'],
    }));
});
