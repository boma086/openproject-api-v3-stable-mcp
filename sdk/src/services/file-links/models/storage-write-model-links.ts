// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksOrigin2, _linksOrigin2, _linksOrigin2Request, _linksOrigin2Response } from './_links-origin-2';
import { _LinksType4, _linksType4, _linksType4Request, _linksType4Response } from './_links-type-4';
import {
  _LinksAuthenticationMethod2,
  _linksAuthenticationMethod2,
  _linksAuthenticationMethod2Request,
  _linksAuthenticationMethod2Response,
} from './_links-authentication-method-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const storageWriteModelLinks = z.lazy(() => {
  return z.object({
    origin: _linksOrigin2,
    type: _linksType4,
    authenticationMethod: _linksAuthenticationMethod2.optional(),
  });
});

/**
 * 
 * @typedef  {StorageWriteModelLinks} storageWriteModelLinks   
 * @property {_LinksOrigin2} - The storage's host URL.

``Resource``: N/A
 * @property {_LinksType4} - The urn of the storage type. Currently Nextcloud and OneDrive storages are supported.

- urn:openproject-org:api:v3:storages:Nextcloud
- urn:openproject-org:api:v3:storages:OneDrive

``Resource``: N/A
 * @property {_LinksAuthenticationMethod2} - The urn of the authentication method. Currently only Nextcloud storages support this setting.

- urn:openproject-org:api:v3:storages:authenticationMethod:TwoWayOAuth2 (default)
- urn:openproject-org:api:v3:storages:authenticationMethod:OAuth2SSO

``Resource``: N/A
 */
export type StorageWriteModelLinks = z.infer<typeof storageWriteModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const storageWriteModelLinksResponse = z.lazy(() => {
  return z
    .object({
      origin: _linksOrigin2Response,
      type: _linksType4Response,
      authenticationMethod: _linksAuthenticationMethod2Response.optional(),
    })
    .transform((data) => ({
      origin: data['origin'],
      type: data['type'],
      authenticationMethod: data['authenticationMethod'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const storageWriteModelLinksRequest = z.lazy(() => {
  return z
    .object({
      origin: _linksOrigin2Request,
      type: _linksType4Request,
      authenticationMethod: _linksAuthenticationMethod2Request.optional(),
    })
    .transform((data) => ({
      origin: data['origin'],
      type: data['type'],
      authenticationMethod: data['authenticationMethod'],
    }));
});
