// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { RootModelType, rootModelType } from './root-model-type';
import { RootModelLinks, rootModelLinks, rootModelLinksRequest, rootModelLinksResponse } from './root-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const rootModel = z.lazy(() => {
  return z.object({
    _type: rootModelType,
    instanceName: z.string(),
    coreVersion: z.string().optional(),
    _links: rootModelLinks,
  });
});

/**
 * 
 * @typedef  {RootModel} rootModel   
 * @property {RootModelType} 
 * @property {string} - The name of the OpenProject instance
 * @property {string} - The OpenProject core version number for the instance

# Conditions

``Permission`` requires admin privileges
 * @property {RootModelLinks} 
 */
export type RootModel = z.infer<typeof rootModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const rootModelResponse = z.lazy(() => {
  return z
    .object({
      _type: rootModelType,
      instanceName: z.string(),
      coreVersion: z.string().optional(),
      _links: rootModelLinksResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      instanceName: data['instanceName'],
      coreVersion: data['coreVersion'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const rootModelRequest = z.lazy(() => {
  return z
    .object({
      _type: rootModelType,
      instanceName: z.string(),
      coreVersion: z.string().optional(),
      _links: rootModelLinksRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      instanceName: data['instanceName'],
      coreVersion: data['coreVersion'],
      _links: data['_links'],
    }));
});
