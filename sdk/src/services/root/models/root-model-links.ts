// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf1, _linksSelf1, _linksSelf1Request, _linksSelf1Response } from './_links-self-1';
import { Configuration, configuration, configurationRequest, configurationResponse } from './configuration';
import {
  _LinksMemberships1,
  _linksMemberships1,
  _linksMemberships1Request,
  _linksMemberships1Response,
} from './_links-memberships-1';
import { Priorities, priorities, prioritiesRequest, prioritiesResponse } from './priorities';
import {
  _LinksRelations1,
  _linksRelations1,
  _linksRelations1Request,
  _linksRelations1Response,
} from './_links-relations-1';
import { Statuses, statuses, statusesRequest, statusesResponse } from './statuses';
import {
  _LinksTimeEntries1,
  _linksTimeEntries1,
  _linksTimeEntries1Request,
  _linksTimeEntries1Response,
} from './_links-time-entries-1';
import { _LinksTypes1, _linksTypes1, _linksTypes1Request, _linksTypes1Response } from './_links-types-1';
import { _LinksUser1, _linksUser1, _linksUser1Request, _linksUser1Response } from './_links-user-1';
import { UserPreferences, userPreferences, userPreferencesRequest, userPreferencesResponse } from './user-preferences';
import {
  _LinksWorkPackages1,
  _linksWorkPackages1,
  _linksWorkPackages1Request,
  _linksWorkPackages1Response,
} from './_links-work-packages-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const rootModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf1,
    configuration: configuration,
    memberships: _linksMemberships1,
    priorities: priorities,
    relations: _linksRelations1,
    statuses: statuses,
    timeEntries: _linksTimeEntries1,
    types: _linksTypes1,
    user: _linksUser1,
    userPreferences: userPreferences,
    workPackages: _linksWorkPackages1,
  });
});

/**
 * 
 * @typedef  {RootModelLinks} rootModelLinks   
 * @property {_LinksSelf1} - This root information object.

``Resource``: Root
 * @property {Configuration} - The configuration resource.

``Resource``: Configuration
 * @property {_LinksMemberships1} - The collection of memberships.

``Resource``: Collection
 * @property {Priorities} - The collection of priorities.

``Resource``: Collection
 * @property {_LinksRelations1} - The collection of relations.

``Resource``: Collection
 * @property {Statuses} - The collection of statuses.

``Resource``: Collection
 * @property {_LinksTimeEntries1} - The collection of time entries.

``Resource``: Collection
 * @property {_LinksTypes1} - The collection of types.

``Resource``: Collection
 * @property {_LinksUser1} - The current user resource.

``Resource``: User
 * @property {UserPreferences} - The current user preferences resource.

``Resource``: UserPreferences
 * @property {_LinksWorkPackages1} - The work package collection.

``Resource``: Collection
 */
export type RootModelLinks = z.infer<typeof rootModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const rootModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf1Response,
      configuration: configurationResponse,
      memberships: _linksMemberships1Response,
      priorities: prioritiesResponse,
      relations: _linksRelations1Response,
      statuses: statusesResponse,
      time_entries: _linksTimeEntries1Response,
      types: _linksTypes1Response,
      user: _linksUser1Response,
      userPreferences: userPreferencesResponse,
      workPackages: _linksWorkPackages1Response,
    })
    .transform((data) => ({
      self: data['self'],
      configuration: data['configuration'],
      memberships: data['memberships'],
      priorities: data['priorities'],
      relations: data['relations'],
      statuses: data['statuses'],
      timeEntries: data['time_entries'],
      types: data['types'],
      user: data['user'],
      userPreferences: data['userPreferences'],
      workPackages: data['workPackages'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const rootModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf1Request,
      configuration: configurationRequest,
      memberships: _linksMemberships1Request,
      priorities: prioritiesRequest,
      relations: _linksRelations1Request,
      statuses: statusesRequest,
      timeEntries: _linksTimeEntries1Request,
      types: _linksTypes1Request,
      user: _linksUser1Request,
      userPreferences: userPreferencesRequest,
      workPackages: _linksWorkPackages1Request,
    })
    .transform((data) => ({
      self: data['self'],
      configuration: data['configuration'],
      memberships: data['memberships'],
      priorities: data['priorities'],
      relations: data['relations'],
      statuses: data['statuses'],
      time_entries: data['timeEntries'],
      types: data['types'],
      user: data['user'],
      userPreferences: data['userPreferences'],
      workPackages: data['workPackages'],
    }));
});
