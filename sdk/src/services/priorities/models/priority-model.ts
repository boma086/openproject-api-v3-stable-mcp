// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  PriorityModelLinks,
  priorityModelLinks,
  priorityModelLinksRequest,
  priorityModelLinksResponse,
} from './priority-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const priorityModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    name: z.string().min(1).optional(),
    position: z.number().optional(),
    isDefault: z.boolean().optional(),
    isActive: z.boolean().optional(),
    _links: priorityModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {PriorityModel} priorityModel
 * @property {number} - Priority id
 * @property {string} - Priority name
 * @property {number} - Sort index of the priority
 * @property {boolean} - Indicates whether this is the default value
 * @property {boolean} - Indicates whether the priority is available
 * @property {PriorityModelLinks}
 */
export type PriorityModel = z.infer<typeof priorityModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const priorityModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().min(1).optional(),
      position: z.number().optional(),
      isDefault: z.boolean().optional(),
      isActive: z.boolean().optional(),
      _links: priorityModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      position: data['position'],
      isDefault: data['isDefault'],
      isActive: data['isActive'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const priorityModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().min(1).optional(),
      position: z.number().optional(),
      isDefault: z.boolean().optional(),
      isActive: z.boolean().optional(),
      _links: priorityModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      position: data['position'],
      isDefault: data['isDefault'],
      isActive: data['isActive'],
      _links: data['_links'],
    }));
});
