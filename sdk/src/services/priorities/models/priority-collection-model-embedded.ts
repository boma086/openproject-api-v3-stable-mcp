// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { PriorityModel, priorityModel, priorityModelRequest, priorityModelResponse } from './priority-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const priorityCollectionModelEmbedded = z.lazy(() => {
  return z.object({
    elements: z.array(priorityModel),
  });
});

/**
 *
 * @typedef  {PriorityCollectionModelEmbedded} priorityCollectionModelEmbedded
 * @property {PriorityModel[]}
 */
export type PriorityCollectionModelEmbedded = z.infer<typeof priorityCollectionModelEmbedded>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const priorityCollectionModelEmbeddedResponse = z.lazy(() => {
  return z
    .object({
      elements: z.array(priorityModelResponse),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const priorityCollectionModelEmbeddedRequest = z.lazy(() => {
  return z
    .object({
      elements: z.array(priorityModelRequest),
    })
    .transform((data) => ({
      elements: data['elements'],
    }));
});
