// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { PriorityCollectionModelType, priorityCollectionModelType } from './priority-collection-model-type';
import {
  PriorityCollectionModelLinks,
  priorityCollectionModelLinks,
  priorityCollectionModelLinksRequest,
  priorityCollectionModelLinksResponse,
} from './priority-collection-model-links';
import {
  PriorityCollectionModelEmbedded,
  priorityCollectionModelEmbedded,
  priorityCollectionModelEmbeddedRequest,
  priorityCollectionModelEmbeddedResponse,
} from './priority-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const priorityCollectionModel = z.lazy(() => {
  return z.object({
    _type: priorityCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: priorityCollectionModelLinks,
    _embedded: priorityCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {PriorityCollectionModel} priorityCollectionModel
 * @property {PriorityCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {PriorityCollectionModelLinks}
 * @property {PriorityCollectionModelEmbedded}
 */
export type PriorityCollectionModel = z.infer<typeof priorityCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const priorityCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: priorityCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: priorityCollectionModelLinksResponse,
      _embedded: priorityCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const priorityCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: priorityCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: priorityCollectionModelLinksRequest,
      _embedded: priorityCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
