// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { Star, star, starRequest, starResponse } from './star';
import { Unstar, unstar, unstarRequest, unstarResponse } from './unstar';
import { _LinksUpdate8, _linksUpdate8, _linksUpdate8Request, _linksUpdate8Response } from './_links-update-8';
import {
  _LinksUpdateImmediately11,
  _linksUpdateImmediately11,
  _linksUpdateImmediately11Request,
  _linksUpdateImmediately11Response,
} from './_links-update-immediately-11';

/**
 * The shape of the model inside the application code - what the users use
 */
export const queryModelLinks = z.lazy(() => {
  return z.object({
    star: star.optional(),
    unstar: unstar.optional(),
    update: _linksUpdate8.optional(),
    updateImmediately: _linksUpdateImmediately11.optional(),
  });
});

/**
 * 
 * @typedef  {QueryModelLinks} queryModelLinks   
 * @property {Star} - Elevates the query to the status of 'starred'

# Conditions

``Permission``: save queries for own queries, manage public queries for public queries; Only present if query is not yet starred
 * @property {Unstar} - Removes the 'starred' status

# Conditions

``Permission``: save queries for own queries, manage public queries for public queries; Only present if query is starred
 * @property {_LinksUpdate8} - Use the Form based process to verify the query before persisting

# Conditions

``Permission``: view work packages
 * @property {_LinksUpdateImmediately11} - Persist the query without using a Form based process for guidance

# Conditions

``Permission``: save queries for own queries, manage public queries for public queries;
 */
export type QueryModelLinks = z.infer<typeof queryModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const queryModelLinksResponse = z.lazy(() => {
  return z
    .object({
      star: starResponse.optional(),
      unstar: unstarResponse.optional(),
      update: _linksUpdate8Response.optional(),
      updateImmediately: _linksUpdateImmediately11Response.optional(),
    })
    .transform((data) => ({
      star: data['star'],
      unstar: data['unstar'],
      update: data['update'],
      updateImmediately: data['updateImmediately'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const queryModelLinksRequest = z.lazy(() => {
  return z
    .object({
      star: starRequest.optional(),
      unstar: unstarRequest.optional(),
      update: _linksUpdate8Request.optional(),
      updateImmediately: _linksUpdateImmediately11Request.optional(),
    })
    .transform((data) => ({
      star: data['star'],
      unstar: data['unstar'],
      update: data['update'],
      updateImmediately: data['updateImmediately'],
    }));
});
