// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksSelf54, _linksSelf54, _linksSelf54Request, _linksSelf54Response } from './_links-self-54';
import { Filter, filter, filterRequest, filterResponse } from './filter';

/**
 * The shape of the model inside the application code - what the users use
 */
export const queryFilterInstanceSchemaModelLinks = z.lazy(() => {
  return z.object({
    self: _linksSelf54,
    filter: filter,
  });
});

/**
 * 
 * @typedef  {QueryFilterInstanceSchemaModelLinks} queryFilterInstanceSchemaModelLinks   
 * @property {_LinksSelf54} - This QueryFilterInstanceSchema (same as for schema)

``Resource``: QueryFilterInstanceSchema
 * @property {Filter} - The filter for which this schema is specific

``Resource``: Filter
 */
export type QueryFilterInstanceSchemaModelLinks = z.infer<typeof queryFilterInstanceSchemaModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const queryFilterInstanceSchemaModelLinksResponse = z.lazy(() => {
  return z
    .object({
      self: _linksSelf54Response,
      filter: filterResponse,
    })
    .transform((data) => ({
      self: data['self'],
      filter: data['filter'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const queryFilterInstanceSchemaModelLinksRequest = z.lazy(() => {
  return z
    .object({
      self: _linksSelf54Request,
      filter: filterRequest,
    })
    .transform((data) => ({
      self: data['self'],
      filter: data['filter'],
    }));
});
