// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  QueryFilterInstanceSchemaModel,
  queryFilterInstanceSchemaModel,
  queryFilterInstanceSchemaModelRequest,
  queryFilterInstanceSchemaModelResponse,
} from '../../common/query-filter-instance-schema-model';
import { QueryModelLinks, queryModelLinks, queryModelLinksRequest, queryModelLinksResponse } from './query-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const queryModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    name: z.string().optional(),
    filters: z.array(queryFilterInstanceSchemaModel).optional(),
    sums: z.boolean().optional(),
    timelineVisible: z.boolean().optional(),
    timelineLabels: z.array(z.string()).optional(),
    timelineZoomLevel: z.string().optional(),
    timestamps: z.array(z.any()).optional(),
    highlightingMode: z.string().optional(),
    showHierarchies: z.boolean().optional(),
    hidden: z.boolean().optional(),
    public: z.boolean().optional(),
    starred: z.boolean().optional(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _links: queryModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {QueryModel} queryModel
 * @property {number} - Query id
 * @property {string} - Query name
 * @property {QueryFilterInstanceSchemaModel[]} - A set of QueryFilters which will be applied to the work packages to determine the resulting work packages
 * @property {boolean} - Should sums (of supported properties) be shown?
 * @property {boolean} - Should the timeline mode be shown?
 * @property {string[]} - Which labels are shown in the timeline, empty when default
 * @property {string} - Which zoom level should the timeline be rendered in?
 * @property {any[]} - Timestamps to filter by when showing changed attributes on work packages.
 * @property {string} - Which highlighting mode should the table have?
 * @property {boolean} - Should the hierarchy mode be enabled?
 * @property {boolean} - Should the query be hidden from the query list?
 * @property {boolean} - Can users besides the owner see the query?
 * @property {boolean} - Should the query be highlighted to the user?
 * @property {string} - Time of creation
 * @property {string} - Time of the most recent change to the query
 * @property {QueryModelLinks}
 */
export type QueryModel = z.infer<typeof queryModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const queryModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().optional(),
      filters: z.array(queryFilterInstanceSchemaModelResponse).optional(),
      sums: z.boolean().optional(),
      timelineVisible: z.boolean().optional(),
      timelineLabels: z.array(z.string()).optional(),
      timelineZoomLevel: z.string().optional(),
      timestamps: z.array(z.any()).optional(),
      highlightingMode: z.string().optional(),
      showHierarchies: z.boolean().optional(),
      hidden: z.boolean().optional(),
      public: z.boolean().optional(),
      starred: z.boolean().optional(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _links: queryModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      filters: data['filters'],
      sums: data['sums'],
      timelineVisible: data['timelineVisible'],
      timelineLabels: data['timelineLabels'],
      timelineZoomLevel: data['timelineZoomLevel'],
      timestamps: data['timestamps'],
      highlightingMode: data['highlightingMode'],
      showHierarchies: data['showHierarchies'],
      hidden: data['hidden'],
      public: data['public'],
      starred: data['starred'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const queryModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string().optional(),
      filters: z.array(queryFilterInstanceSchemaModelRequest).optional(),
      sums: z.boolean().optional(),
      timelineVisible: z.boolean().optional(),
      timelineLabels: z.array(z.string()).optional(),
      timelineZoomLevel: z.string().optional(),
      timestamps: z.array(z.any()).optional(),
      highlightingMode: z.string().optional(),
      showHierarchies: z.boolean().optional(),
      hidden: z.boolean().optional(),
      public: z.boolean().optional(),
      starred: z.boolean().optional(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _links: queryModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      filters: data['filters'],
      sums: data['sums'],
      timelineVisible: data['timelineVisible'],
      timelineLabels: data['timelineLabels'],
      timelineZoomLevel: data['timelineZoomLevel'],
      timestamps: data['timestamps'],
      highlightingMode: data['highlightingMode'],
      showHierarchies: data['showHierarchies'],
      hidden: data['hidden'],
      public: data['public'],
      starred: data['starred'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});
