// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  CustomOptionModelLinks,
  customOptionModelLinks,
  customOptionModelLinksRequest,
  customOptionModelLinksResponse,
} from './custom-option-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const customOptionModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    value: z.string().optional(),
    _links: customOptionModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {CustomOptionModel} customOptionModel
 * @property {number} - The identifier
 * @property {string} - The value defined for this custom option
 * @property {CustomOptionModelLinks}
 */
export type CustomOptionModel = z.infer<typeof customOptionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const customOptionModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      value: z.string().optional(),
      _links: customOptionModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      value: data['value'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const customOptionModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      value: z.string().optional(),
      _links: customOptionModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      value: data['value'],
      _links: data['_links'],
    }));
});
