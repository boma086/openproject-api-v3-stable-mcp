// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const userCreateModel = z.lazy(() => {
  return z.object({
    admin: z.boolean(),
    email: z.string().max(60),
    login: z.string().max(256),
    password: z.string().optional(),
    firstName: z.string().max(30),
    lastName: z.string().max(30),
    status: z.string().optional(),
    language: z.string(),
  });
});

/**
 * 
 * @typedef  {UserCreateModel} userCreateModel   
 * @property {boolean} 
 * @property {string} 
 * @property {string} 
 * @property {string} - The users password.

`Conditions:`

Only writable on creation, not on update.
 * @property {string} 
 * @property {string} 
 * @property {string} - The current activation status of the user.

`Conditions:`

Only writable on creation, not on update.
 * @property {string} 
 */
export type UserCreateModel = z.infer<typeof userCreateModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const userCreateModelResponse = z.lazy(() => {
  return z
    .object({
      admin: z.boolean(),
      email: z.string().max(60),
      login: z.string().max(256),
      password: z.string().optional(),
      firstName: z.string().max(30),
      lastName: z.string().max(30),
      status: z.string().optional(),
      language: z.string(),
    })
    .transform((data) => ({
      admin: data['admin'],
      email: data['email'],
      login: data['login'],
      password: data['password'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      status: data['status'],
      language: data['language'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const userCreateModelRequest = z.lazy(() => {
  return z
    .object({
      admin: z.boolean(),
      email: z.string().max(60),
      login: z.string().max(256),
      password: z.string().optional(),
      firstName: z.string().max(30),
      lastName: z.string().max(30),
      status: z.string().optional(),
      language: z.string(),
    })
    .transform((data) => ({
      admin: data['admin'],
      email: data['email'],
      login: data['login'],
      password: data['password'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      status: data['status'],
      language: data['language'],
    }));
});
