// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { UserCollectionModelType, userCollectionModelType } from './user-collection-model-type';
import {
  UserCollectionModelLinks,
  userCollectionModelLinks,
  userCollectionModelLinksRequest,
  userCollectionModelLinksResponse,
} from './user-collection-model-links';
import {
  UserCollectionModelEmbedded,
  userCollectionModelEmbedded,
  userCollectionModelEmbeddedRequest,
  userCollectionModelEmbeddedResponse,
} from './user-collection-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const userCollectionModel = z.lazy(() => {
  return z.object({
    _type: userCollectionModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: userCollectionModelLinks,
    _embedded: userCollectionModelEmbedded,
  });
});

/**
 *
 * @typedef  {UserCollectionModel} userCollectionModel
 * @property {UserCollectionModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {UserCollectionModelLinks}
 * @property {UserCollectionModelEmbedded}
 */
export type UserCollectionModel = z.infer<typeof userCollectionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const userCollectionModelResponse = z.lazy(() => {
  return z
    .object({
      _type: userCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: userCollectionModelLinksResponse,
      _embedded: userCollectionModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const userCollectionModelRequest = z.lazy(() => {
  return z
    .object({
      _type: userCollectionModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: userCollectionModelLinksRequest,
      _embedded: userCollectionModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
