// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { VersionsByProjectModelType, versionsByProjectModelType } from './versions-by-project-model-type';
import {
  VersionsByProjectModelLinks,
  versionsByProjectModelLinks,
  versionsByProjectModelLinksRequest,
  versionsByProjectModelLinksResponse,
} from './versions-by-project-model-links';
import {
  VersionsByProjectModelEmbedded,
  versionsByProjectModelEmbedded,
  versionsByProjectModelEmbeddedRequest,
  versionsByProjectModelEmbeddedResponse,
} from './versions-by-project-model-embedded';

/**
 * The shape of the model inside the application code - what the users use
 */
export const versionsByProjectModel = z.lazy(() => {
  return z.object({
    _type: versionsByProjectModelType,
    total: z.number().gte(0),
    count: z.number().gte(0),
    _links: versionsByProjectModelLinks,
    _embedded: versionsByProjectModelEmbedded,
  });
});

/**
 *
 * @typedef  {VersionsByProjectModel} versionsByProjectModel
 * @property {VersionsByProjectModelType}
 * @property {number} - The total amount of elements available in the collection.
 * @property {number} - Actual amount of elements in this response.
 * @property {VersionsByProjectModelLinks}
 * @property {VersionsByProjectModelEmbedded}
 */
export type VersionsByProjectModel = z.infer<typeof versionsByProjectModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const versionsByProjectModelResponse = z.lazy(() => {
  return z
    .object({
      _type: versionsByProjectModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: versionsByProjectModelLinksResponse,
      _embedded: versionsByProjectModelEmbeddedResponse,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const versionsByProjectModelRequest = z.lazy(() => {
  return z
    .object({
      _type: versionsByProjectModelType,
      total: z.number().gte(0),
      count: z.number().gte(0),
      _links: versionsByProjectModelLinksRequest,
      _embedded: versionsByProjectModelEmbeddedRequest,
    })
    .transform((data) => ({
      _type: data['_type'],
      total: data['total'],
      count: data['count'],
      _links: data['_links'],
      _embedded: data['_embedded'],
    }));
});
