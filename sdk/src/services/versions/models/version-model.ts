// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  VersionModelDescription,
  versionModelDescription,
  versionModelDescriptionRequest,
  versionModelDescriptionResponse,
} from './version-model-description';
import {
  VersionModelLinks,
  versionModelLinks,
  versionModelLinksRequest,
  versionModelLinksResponse,
} from './version-model-links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const versionModel = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    name: z.string(),
    description: versionModelDescription.optional(),
    startDate: z.string().optional(),
    endDate: z.string().optional(),
    status: z.string(),
    sharing: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _links: versionModelLinks.optional(),
  });
});

/**
 *
 * @typedef  {VersionModel} versionModel
 * @property {number} - Version id
 * @property {string} - Version name
 * @property {VersionModelDescription}
 * @property {string}
 * @property {string}
 * @property {string} - The current status of the version
 * @property {string} - The current status of the version
 * @property {string} - Time of creation
 * @property {string} - Time of the most recent change to the version
 * @property {VersionModelLinks}
 */
export type VersionModel = z.infer<typeof versionModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const versionModelResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string(),
      description: versionModelDescriptionResponse.optional(),
      startDate: z.string().optional(),
      endDate: z.string().optional(),
      status: z.string(),
      sharing: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _links: versionModelLinksResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      description: data['description'],
      startDate: data['startDate'],
      endDate: data['endDate'],
      status: data['status'],
      sharing: data['sharing'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const versionModelRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      name: z.string(),
      description: versionModelDescriptionRequest.optional(),
      startDate: z.string().optional(),
      endDate: z.string().optional(),
      status: z.string(),
      sharing: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _links: versionModelLinksRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      description: data['description'],
      startDate: data['startDate'],
      endDate: data['endDate'],
      status: data['status'],
      sharing: data['sharing'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      _links: data['_links'],
    }));
});
