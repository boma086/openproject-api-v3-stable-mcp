// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksUpdate9, _linksUpdate9, _linksUpdate9Request, _linksUpdate9Response } from './_links-update-9';
import {
  _LinksUpdateImmediately14,
  _linksUpdateImmediately14,
  _linksUpdateImmediately14Request,
  _linksUpdateImmediately14Response,
} from './_links-update-immediately-14';
import { _LinksSelf65, _linksSelf65, _linksSelf65Request, _linksSelf65Response } from './_links-self-65';
import {
  _LinksDefiningProject1,
  _linksDefiningProject1,
  _linksDefiningProject1Request,
  _linksDefiningProject1Response,
} from './_links-defining-project-1';
import {
  _LinksAvailableInProjects1,
  _linksAvailableInProjects1,
  _linksAvailableInProjects1Request,
  _linksAvailableInProjects1Response,
} from './_links-available-in-projects-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const elementsLinks8 = z.lazy(() => {
  return z.object({
    update: _linksUpdate9.optional(),
    updateImmediately: _linksUpdateImmediately14.optional(),
    self: _linksSelf65,
    definingProject: _linksDefiningProject1.optional(),
    availableInProjects: _linksAvailableInProjects1,
  });
});

/**
 * 
 * @typedef  {ElementsLinks8} elementsLinks8   
 * @property {_LinksUpdate9} - Form endpoint that aids in preparing and performing edits on the version

# Conditions

``Permission``: manage versions
 * @property {_LinksUpdateImmediately14} - Directly perform edits on the version

# Conditions

``Permission``: manage versions
 * @property {_LinksSelf65} - This version

``Resource``: Version
 * @property {_LinksDefiningProject1} - The project to which the version belongs

``Resource``: Project
 * @property {_LinksAvailableInProjects1} - Projects where this version can be used

``Resource``: Projects
 */
export type ElementsLinks8 = z.infer<typeof elementsLinks8>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks8Response = z.lazy(() => {
  return z
    .object({
      update: _linksUpdate9Response.optional(),
      updateImmediately: _linksUpdateImmediately14Response.optional(),
      self: _linksSelf65Response,
      definingProject: _linksDefiningProject1Response.optional(),
      availableInProjects: _linksAvailableInProjects1Response,
    })
    .transform((data) => ({
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      self: data['self'],
      definingProject: data['definingProject'],
      availableInProjects: data['availableInProjects'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const elementsLinks8Request = z.lazy(() => {
  return z
    .object({
      update: _linksUpdate9Request.optional(),
      updateImmediately: _linksUpdateImmediately14Request.optional(),
      self: _linksSelf65Request,
      definingProject: _linksDefiningProject1Request.optional(),
      availableInProjects: _linksAvailableInProjects1Request,
    })
    .transform((data) => ({
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      self: data['self'],
      definingProject: data['definingProject'],
      availableInProjects: data['availableInProjects'],
    }));
});
