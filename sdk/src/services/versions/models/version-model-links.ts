// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { _LinksUpdate10, _linksUpdate10, _linksUpdate10Request, _linksUpdate10Response } from './_links-update-10';
import {
  _LinksUpdateImmediately15,
  _linksUpdateImmediately15,
  _linksUpdateImmediately15Request,
  _linksUpdateImmediately15Response,
} from './_links-update-immediately-15';
import { _LinksSelf66, _linksSelf66, _linksSelf66Request, _linksSelf66Response } from './_links-self-66';
import {
  _LinksDefiningProject2,
  _linksDefiningProject2,
  _linksDefiningProject2Request,
  _linksDefiningProject2Response,
} from './_links-defining-project-2';
import {
  _LinksAvailableInProjects2,
  _linksAvailableInProjects2,
  _linksAvailableInProjects2Request,
  _linksAvailableInProjects2Response,
} from './_links-available-in-projects-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const versionModelLinks = z.lazy(() => {
  return z.object({
    update: _linksUpdate10.optional(),
    updateImmediately: _linksUpdateImmediately15.optional(),
    self: _linksSelf66,
    definingProject: _linksDefiningProject2.optional(),
    availableInProjects: _linksAvailableInProjects2,
  });
});

/**
 * 
 * @typedef  {VersionModelLinks} versionModelLinks   
 * @property {_LinksUpdate10} - Form endpoint that aids in preparing and performing edits on the version

# Conditions

``Permission``: manage versions
 * @property {_LinksUpdateImmediately15} - Directly perform edits on the version

# Conditions

``Permission``: manage versions
 * @property {_LinksSelf66} - This version

``Resource``: Version
 * @property {_LinksDefiningProject2} - The project to which the version belongs

``Resource``: Project
 * @property {_LinksAvailableInProjects2} - Projects where this version can be used

``Resource``: Projects
 */
export type VersionModelLinks = z.infer<typeof versionModelLinks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const versionModelLinksResponse = z.lazy(() => {
  return z
    .object({
      update: _linksUpdate10Response.optional(),
      updateImmediately: _linksUpdateImmediately15Response.optional(),
      self: _linksSelf66Response,
      definingProject: _linksDefiningProject2Response.optional(),
      availableInProjects: _linksAvailableInProjects2Response,
    })
    .transform((data) => ({
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      self: data['self'],
      definingProject: data['definingProject'],
      availableInProjects: data['availableInProjects'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const versionModelLinksRequest = z.lazy(() => {
  return z
    .object({
      update: _linksUpdate10Request.optional(),
      updateImmediately: _linksUpdateImmediately15Request.optional(),
      self: _linksSelf66Request,
      definingProject: _linksDefiningProject2Request.optional(),
      availableInProjects: _linksAvailableInProjects2Request,
    })
    .transform((data) => ({
      update: data['update'],
      updateImmediately: data['updateImmediately'],
      self: data['self'],
      definingProject: data['definingProject'],
      availableInProjects: data['availableInProjects'],
    }));
});
