{
  "name": "openproject-api-v3-stable-mcp",
  "version": "1.0.0",
  "description": "You're looking at the current stable documentation of the OpenProject APIv3. If you're interested in the current development version, please go to github.comopfhttpsgithub.comopfopenprojecttreedevdocsapiapiv3.  Introduction The documentation for the APIv3 is written according to the OpenAPI 3.1 Specificationhttpsswagger.iospecification. You can either view the static version of this documentation on the websitehttpswww.openproject.orgdocsapiintroduction or the interactive version, rendered with OpenAPI Explorerhttpsgithub.comRhosysopenapi-explorerblobmainREADME.md, in your OpenProject installation under apidocs. In the latter you can try out the various API endpoints directly interacting with our OpenProject data. Moreover you can access the specification source itself under apiv3spec.json and apiv3spec.yml e.g. herehttpscommunity.openproject.orgapiv3spec.yml. The APIv3 is a hypermedia REST API, a shorthand for \"Hypermedia As The Engine Of Application State\" HATEOAS. This means that each endpoint of this API will have links to other resources or actions defined in the resulting body. These related resources and actions for any given resource will be context sensitive. For example, only actions that the authenticated user can take are being rendered. This can be used to dynamically identify actions that the user might take for any given response. As an example, if you fetch a work package through the Work Package endpointhttpswww.openproject.orgdocsapiendpointswork-packages, the update link will only be present when the user you authenticated has been granted a permission to update the work package in the assigned project.  HALJSON HAL is a simple format that gives a consistent and easy way to hyperlink between resources in your API. Read more in the following specification httpstools.ietf.orghtmldraft-kelly-json-hal-08httpstools.ietf.orghtmldraft-kelly-json-hal-08 OpenProject API implementation of HALJSON format enriches JSON and introduces a few meta properties - type - specifies the type of the resource e.g. WorkPackage, Project - links - contains all related resource and action links available for the resource - embedded - contains all embedded objects HAL does not guarantee that embedded resources are embedded in their full representation, they might as well be partially represented e.g. some properties can be left out. However in this API you have the guarantee that whenever a resource is embedded, it is embedded in its full representation.  API response structure All API responses contain a single HALJSON object, even collections of objects are technically represented by a single HALJSON object that itself contains its members. More details on collections can be found in the Collections Sectionhttpswww.openproject.orgdocsapicollections.  Authentication The API supports the following authentication schemes OAuth2, session based authentication, and basic auth. Depending on the settings of the OpenProject instance many resources can be accessed without being authenticated. In case the instance requires authentication on all requests the client will receive an HTTP 401 status code in response to any request. Otherwise unauthenticated clients have all the permissions of the anonymous user.  Session-based Authentication This means you have to login to OpenProject via the Web-Interface to be authenticated in the API. This method is well-suited for clients acting within the browser, like the Angular-Client built into OpenProject. In this case, you always need to pass the HTTP header X-Requested-With \"XMLHttpRequest\" for authentication.  API Key through Basic Auth Users can authenticate towards the API v3 using basic auth with the user name apikey NOT your login and the API key as the password. Users can find their API key on their account page. Example shell APIKEY2519132cdf62dcf5a66fd96394672079f9e9cad1 curl -u apikeyAPIKEY httpscommunity.openproject.orgapiv3users42   OAuth2.0 authentication OpenProject allows authentication and authorization with OAuth2 with Authorization code flow, as well as Client credentials operation modes. To get started, you first need to register an application in the OpenProject OAuth administration section of your installation. This will save an entry for your application with a client unique identifier clientid and an accompanying secret key clientsecret. You can then use one the following guides to perform the supported OAuth 2.0 flows - Authorization code flowhttpsoauth.net2grant-typesauthorization-code - Authorization code flow with PKCEhttpsdoorkeeper.gitbook.ioguidesruby-on-railspkce-flow, recommended for clients unable to keep the clientsecret confidential - Client credentialshttpsoauth.net2grant-typesclient-credentials - Requires an application to be bound to an impersonating user for non-public access  OIDC provider generated JWT as a Bearer token There is a possibility to use JSON Web Tokens JWT generated by an OIDC provider configured in OpenProject as a bearer token to do authenticated requests against the API. The following requirements must be met - OIDC provider must be configured in OpenProject with jwksuri - JWT must be signed using RSA algorithm - JWT iss claim must be equal to OIDC provider issuer - JWT aud claim must contain the OpenProject client ID used at the OIDC provider - JWT scope claim must include a valid scope to access the desired API e.g. apiv3 for APIv3 - JWT must be actual neither expired or too early to be used - JWT must be passed in Authorization header like Authorization Bearer jwt - User from sub claim must be logged in OpenProject before otherwise it will be not authenticated In more general terms, OpenProject should be compliant to RFC 9068httpswww.rfc-editor.orgrfcrfc9068 when validating access tokens.  Why not username and password The simplest way to do basic auth would be to use a user's username and password naturally. However, OpenProject already has supported API keys in the past for the API v2, though not through basic auth. Using username and password directly would have some advantages  It is intuitive for the user who then just has to provide those just as they would when logging into OpenProject.  No extra logic for token management necessary. On the other hand using API keys has some advantages too, which is why we went for that  If compromised while saved on an insecure client the user only has to regenerate the API key instead of changing their password, too.  They are naturally long and random which makes them invulnerable to dictionary attacks and harder to crack in general. Most importantly users may not actually have a password to begin with. Specifically when they have registered through an OpenID Connect provider.  Cross-Origin Resource Sharing CORS By default, the OpenProject API is not responding with any CORS headers. If you want to allow cross-domain AJAX calls against your OpenProject instance, you need to enable CORS headers being returned. Please see our API settings documentationhttpswww.openproject.orgdocssystem-admin-guideapi-and-webhooks on how to selectively enable CORS.  Allowed HTTP methods - GET - Get a single resource or collection of resources - POST - Create a new resource or perform - PATCH - Update a resource - DELETE - Delete a resource  Compression Responses are compressed if requested by the client. Currently gziphttpswww.gzip.org and deflatehttpstools.ietf.orghtmlrfc1951 are supported. The client signals the desired compression by setting the Accept-Encoding headerhttpswww.w3.orgProtocolsrfc2616rfc2616-sec14.htmlsec14.3. If no Accept-Encoding header is send, Accept-Encoding identity is assumed which will result in the API responding uncompressed.",
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "browser": "./dist/index.js",
  "unpkg": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "type": "module",
  "scripts": {
    "test": "tsc --noEmit",
    "setup": "npm install && npm run build",
    "build": "npm --prefix ./sdk run build && tsc --outDir dist",
    "prepublishOnly": "npm run build"
  },
  "keywords": [
    "typescript",
    "mcp",
    "api",
    "client"
  ],
  "files": [
    "dist",
    "README.md"
  ],
  "workspaces": [
    "sdk"
  ],
  "author": "",
  "devDependencies": {
    "typescript": "5.3.3",
    "@types/node": "^22.14.0"
  },
  "dependencies": {
    "openproject-api-v3-stable": "file:./sdk",
    "zod": "^3.24.2",
    "@modelcontextprotocol/sdk": "^1.8.0"
  },
  "exports": {
    ".": {
      "require": "./dist/index.js",
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts"
    }
  }
}
